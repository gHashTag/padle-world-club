name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  BUN_VERSION: '1.0.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================
  # Code Quality & Type Checking
  # ================================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟨 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 TypeScript type checking
        run: bun run typecheck

      - name: 🧹 ESLint code analysis
        run: bun run lint

      - name: 💅 Prettier code formatting
        run: bun run format:check

      - name: 📊 Upload ESLint results
        if: always()
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JAVASCRIPT_ES: true

  # ================================
  # Security Scanning
  # ================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Dependency vulnerability scan
        run: |
          bun audit
        continue-on-error: true

  # ================================
  # Unit & Integration Tests
  # ================================
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: padel_test_db
          POSTGRES_USER: padel_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟨 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🗄️ Run database migrations
        env:
          DATABASE_URL: postgresql://padel_user:test_password@localhost:5432/padel_test_db
        run: bun run db:migrate

      - name: 🧪 Run unit tests
        env:
          DATABASE_URL: postgresql://padel_user:test_password@localhost:5432/padel_test_db
          JWT_SECRET: test-secret-key
          REDIS_URL: redis://localhost:6379
        run: bun run test:unit

      - name: 🔗 Run integration tests
        env:
          DATABASE_URL: postgresql://padel_user:test_password@localhost:5432/padel_test_db
          JWT_SECRET: test-secret-key
          REDIS_URL: redis://localhost:6379
        run: bun run test:integration

      - name: 🎭 Run E2E tests
        env:
          DATABASE_URL: postgresql://padel_user:test_password@localhost:5432/padel_test_db
          JWT_SECRET: test-secret-key
          REDIS_URL: redis://localhost:6379
        run: bun run test:e2e

      - name: 📊 Generate test coverage
        env:
          DATABASE_URL: postgresql://padel_user:test_password@localhost:5432/padel_test_db
          JWT_SECRET: test-secret-key
          REDIS_URL: redis://localhost:6379
        run: bun run test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ================================
  # Build & Test Docker Image
  # ================================
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [quality, security, test]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: runtime
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker image
        run: |
          docker run --rm \
            -e NODE_ENV=test \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            bun run typecheck

  # ================================
  # Performance Testing
  # ================================
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟨 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🚀 Start application
        run: |
          docker-compose -f docker-compose.dev.yml up -d
          sleep 30

      - name: ⚡ Run performance tests
        run: bun run test:performance

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: reports/performance/

      - name: 🛑 Stop application
        if: always()
        run: docker-compose -f docker-compose.dev.yml down
