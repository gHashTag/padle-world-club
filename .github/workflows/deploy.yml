name: üöÄ Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================
  # Deploy to Staging
  # ================================
  deploy-staging:
    name: üß™ Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging-api.padel.local
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üê≥ Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üöÄ Deploy to ECS Staging
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster padel-staging-cluster \
            --service padel-api-staging \
            --force-new-deployment \
            --task-definition padel-api-staging:${{ github.run_number }}

      - name: ‚è≥ Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster padel-staging-cluster \
            --services padel-api-staging

      - name: üß™ Run smoke tests
        run: |
          curl -f https://staging-api.padel.local/health || exit 1
          curl -f https://staging-api.padel.local/api/docs || exit 1

      - name: üì¢ Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: 'üéâ Staging deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ================================
  # Deploy to Production
  # ================================
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: [deploy-staging]
    environment:
      name: production
      url: https://api.padel.local
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: üê≥ Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üóÑÔ∏è Run database migrations
        run: |
          # Run migrations in production
          aws ecs run-task \
            --cluster padel-production-cluster \
            --task-definition padel-migrator-production \
            --wait

      - name: üöÄ Blue-Green Deployment
        run: |
          # Get current service configuration
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster padel-production-cluster \
            --services padel-api-production \
            --query 'services[0].taskDefinition' \
            --output text)

          # Create new task definition with new image
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --family padel-api-production \
            --task-role-arn ${{ secrets.ECS_TASK_ROLE_ARN }} \
            --execution-role-arn ${{ secrets.ECS_EXECUTION_ROLE_ARN }} \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu 512 \
            --memory 1024 \
            --container-definitions '[{
              "name": "padel-api",
              "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}",
              "portMappings": [{"containerPort": 3000}],
              "environment": [
                {"name": "NODE_ENV", "value": "production"},
                {"name": "PORT", "value": "3000"}
              ],
              "secrets": [
                {"name": "DATABASE_URL", "valueFrom": "${{ secrets.DATABASE_URL_SECRET_ARN }}"},
                {"name": "JWT_SECRET", "valueFrom": "${{ secrets.JWT_SECRET_ARN }}"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/padel-api-production",
                  "awslogs-region": "${{ secrets.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "healthCheck": {
                "command": ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 60
              }
            }]' \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          # Update service with new task definition
          aws ecs update-service \
            --cluster padel-production-cluster \
            --service padel-api-production \
            --task-definition $NEW_TASK_DEF

      - name: ‚è≥ Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster padel-production-cluster \
            --services padel-api-production

      - name: üß™ Run production smoke tests
        run: |
          curl -f https://api.padel.local/health || exit 1
          curl -f https://api.padel.local/api/docs || exit 1

      - name: üìä Update monitoring dashboards
        run: |
          # Update Grafana dashboards with new deployment
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"tags":["deployment"],"text":"Production deployment: ${{ github.sha }}"}' \
            https://grafana.padel.local/api/annotations

      - name: üì¢ Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: 'üöÄ Production deployment successful! Version: ${{ github.ref_name }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: üö® Rollback on failure
        if: failure()
        run: |
          # Rollback to previous task definition
          PREVIOUS_TASK_DEF=$(aws ecs describe-services \
            --cluster padel-production-cluster \
            --services padel-api-production \
            --query 'services[0].deployments[1].taskDefinition' \
            --output text)

          aws ecs update-service \
            --cluster padel-production-cluster \
            --service padel-api-production \
            --task-definition $PREVIOUS_TASK_DEF

      - name: üì¢ Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: 'üö® Production deployment failed! Rollback initiated.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ================================
  # Create GitHub Release
  # ================================
  release:
    name: üì¶ Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [deploy-production]
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìù Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üì¶ Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release
            ${{ steps.changelog.outputs.changelog }}

            ## Docker Image
            ```
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```

            ## Deployment
            This release has been automatically deployed to production.
          draft: false
          prerelease: false
