---
description:
globs:
alwaysApply: false
---
# üß™ AGENT_Tester: –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤

## üìù –†–æ–ª—å –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å

–ê–≥–µ–Ω—Ç-—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –∫–æ–¥–∞ (TDD). –ö–ª—é—á–µ–≤—ã–µ –∑–∞–¥–∞—á–∏:

1. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤
2. –ù–∞–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—å–Ω—ã—Ö, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏ E2E —Ç–µ—Å—Ç–æ–≤
3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∏–∫—Å—Ç—É—Ä –∏ –º–æ–∫–æ–≤
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏
5. –í—ã—è–≤–ª–µ–Ω–∏–µ –∫—Ä–∞–µ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –Ω–∏—Ö

## üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

### TDD (Test-Driven Development)
- –°–Ω–∞—á–∞–ª–∞ –ø–∏—à–µ–º —Ç–µ—Å—Ç, –∑–∞—Ç–µ–º –∫–æ–¥
- –¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –ø–∞–¥–∞—Ç—å (red), –∑–∞—Ç–µ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å (green)
- –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞, —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–º –∫–æ–¥

### –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–µ–º `describe` –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–µ–º `it` –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è
- –°–ª–µ–¥—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—É "Arrange-Act-Assert"
- –û–¥–∏–Ω —Ç–µ—Å—Ç - –æ–¥–Ω–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)

### –ò–∑–æ–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
- –ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

### –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
- –°—Ç—Ä–µ–º–∏–º—Å—è –∫ 100% –ø–æ–∫—Ä—ã—Ç–∏—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
- –ù–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞–µ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
- –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫

## üìã –ß–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞

1. ‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –º—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º
2. ‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –º–æ–∫–∏
3. ‚úÖ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
4. ‚úÖ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç–µ—Å—Ç –ø–∞–¥–∞–µ—Ç (red)
5. ‚úÖ –ù–∞–ø–∏—Å–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
6. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç (green)
7. ‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç—å –∫–æ–¥ –∏ —Ç–µ—Å—Ç

## üß† –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã

```mermaid
graph TD
    A[–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π] --> B[–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤]
    B --> C[–ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø–∞–¥–∞—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞]
    C --> D[–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ—Å—Ç –ø–∞–¥–∞–µ—Ç]
    D --> E[–ü–µ—Ä–µ–¥–∞—á–∞ —Ç–µ—Å—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É]
    E --> F[–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç]
    F --> G[–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è]
    G -->|–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ| B
    G -->|–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ| H[–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤]
```

## üìö –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤

### –ú–æ–¥—É–ª—å–Ω—ã–π —Ç–µ—Å—Ç (Unit Test)

```typescript
import { describe, it, expect, vi } from "vitest";
import { getUserByTelegramId } from "../../../src/db/users";
import { db } from "../../../src/db";
import { users } from "../../../src/db/schema";
import { eq } from "drizzle-orm";

// –ú–æ–∫–∞–µ–º drizzle ORM
vi.mock("../../../src/db", () => ({
  db: {
    query: {
      users: {
        findFirst: vi.fn(),
      },
    },
  },
}));

describe("getUserByTelegramId", () => {
  it("should return user when found", async () => {
    // Arrange
    const mockUser = {
      id: 1,
      telegram_id: "123456789",
      username: "testuser",
      first_name: "Test",
      last_name: "User",
      created_at: new Date(),
      updated_at: new Date(),
    };
    
    vi.mocked(db.query.users.findFirst).mockResolvedValue(mockUser);
    
    // Act
    const result = await getUserByTelegramId(123456789);
    
    // Assert
    expect(result).toEqual(mockUser);
    expect(db.query.users.findFirst).toHaveBeenCalledWith({
      where: eq(users.telegram_id, "123456789"),
    });
  });

  it("should return null when user not found", async () => {
    // Arrange
    vi.mocked(db.query.users.findFirst).mockResolvedValue(null);
    
    // Act
    const result = await getUserByTelegramId(999999);
    
    // Assert
    expect(result).toBeNull();
  });

  it("should handle errors and return null", async () => {
    // Arrange
    vi.mocked(db.query.users.findFirst).mockRejectedValue(new Error("DB error"));
    
    // Act
    const result = await getUserByTelegramId(123456789);
    
    // Assert
    expect(result).toBeNull();
  });
});
```

### –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç

```typescript
import { describe, it, expect, beforeEach, afterEach } from "vitest";
import { Telegraf } from "telegraf";
import { createExampleWizardScene } from "../../../src/templates/wizard-scene-template";
import { mockTelegramContext } from "../../helpers/mock-telegram";

describe("ExampleWizardScene Integration", () => {
  let bot: Telegraf;
  let scene: any;
  
  beforeEach(() => {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    bot = new Telegraf("mock-token");
    scene = createExampleWizardScene();
  });
  
  afterEach(() => {
    // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    bot.stop();
  });
  
  it("should welcome user and move to next step", async () => {
    // Arrange
    const ctx = mockTelegramContext();
    ctx.reply = vi.fn().mockResolvedValue(null);
    
    // Act
    await scene.steps[0](ctx);
    
    // Assert
    expect(ctx.reply).toHaveBeenCalledWith("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?");
    expect(ctx.wizard.next).toHaveBeenCalled();
  });
  
  it("should handle name input and move to next step", async () => {
    // Arrange
    const ctx = mockTelegramContext({
      message: { text: "John Doe" },
    });
    ctx.reply = vi.fn().mockResolvedValue(null);
    
    // Act
    await scene.steps[1](ctx);
    
    // Assert
    expect(ctx.wizard.state.data.name).toBe("John Doe");
    expect(ctx.reply).toHaveBeenCalledWith(
      "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, John Doe! –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?"
    );
    expect(ctx.wizard.next).toHaveBeenCalled();
  });
});
```

### E2E —Ç–µ—Å—Ç

```typescript
import { describe, it, expect, beforeAll, afterAll } from "vitest";
import { Telegraf, Scenes } from "telegraf";
import { session } from "telegraf";
import { createExampleWizardScene } from "../../../src/templates/wizard-scene-template";
import { BaseBotContext } from "../../../src/types";
import { MockTelegramServer } from "../../helpers/mock-telegram-server";

describe("Bot E2E Test", () => {
  let bot: Telegraf<BaseBotContext>;
  let mockServer: MockTelegramServer;
  
  beforeAll(async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫-—Å–µ—Ä–≤–µ—Ä Telegram
    mockServer = new MockTelegramServer();
    await mockServer.start();
    
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –º–æ–∫-—Å–µ—Ä–≤–µ—Ä–æ–º
    bot = new Telegraf<BaseBotContext>(mockServer.token);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    const exampleScene = createExampleWizardScene();
    const stage = new Scenes.Stage<BaseBotContext>([exampleScene]);
    
    bot.use(session());
    bot.use(stage.middleware());
    
    bot.command("wizard", (ctx) => ctx.scene.enter("example_wizard"));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch();
  });
  
  afterAll(async () => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –∏ –º–æ–∫-—Å–µ—Ä–≤–µ—Ä
    bot.stop();
    await mockServer.stop();
  });
  
  it("should complete the wizard flow", async () => {
    // Arrange
    const userId = 123456789;
    
    // Act & Assert
    
    // –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /wizard
    await mockServer.sendUpdate({
      message: {
        message_id: 1,
        from: { id: userId, first_name: "Test", is_bot: false },
        chat: { id: userId, type: "private" },
        date: Date.now(),
        text: "/wizard",
        entities: [{ type: "bot_command", offset: 0, length: 7 }],
      },
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    const welcome = await mockServer.waitForMessage();
    expect(welcome.text).toContain("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å");
    
    // –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è
    await mockServer.sendUpdate({
      message: {
        message_id: 2,
        from: { id: userId, first_name: "Test", is_bot: false },
        chat: { id: userId, type: "private" },
        date: Date.now(),
        text: "John Doe",
      },
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    const nameResponse = await mockServer.waitForMessage();
    expect(nameResponse.text).toContain("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, John Doe");
  });
});
```

## üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã

- `bun run test` - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
- `bun run test:watch` - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
- `bun run test:coverage` - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
- `bun run tdd path/to/test.ts` - TDD-—Ü–∏–∫–ª –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞

## üéØ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤

1. **–Ø—Å–Ω–æ—Å—Ç—å** - –¢–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –∏ —á–∏—Ç–∞–µ–º—ã–º–∏
2. **–°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å** - –ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—Å–ø–µ–∫—Ç
3. **–ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å** - –¢–µ—Å—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
4. **–ë—ã—Å—Ç—Ä–æ—Ç–∞** - –¢–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ
5. **–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å** - –¢–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏
6. **–ü–æ–ª–Ω–æ—Ç–∞** - –¢–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –æ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏
7. **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å** - –¢–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ª–µ–≥–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º–∏
