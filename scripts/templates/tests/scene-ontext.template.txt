import { describe, it, expect, jest, beforeEach, afterEach } from "bun:test";
import { Context, Scenes } from "telegraf";
import { Message } from "telegraf/typings/core/types/typegram";
import { StorageAdapter, SceneStep } from "@/types";
import { {{SCENE_NAME}} } from "@/scenes/{{SCENE_FILE_NAME}}";

// Мокируем адаптер хранилища
const mockAdapter: jest.Mocked<StorageAdapter> = {
  findUserByTelegramIdOrCreate: jest.fn(),
  getProjectsByUserId: jest.fn(),
  getProjectById: jest.fn(),
  createProject: jest.fn(),
  getCompetitorAccounts: jest.fn(),
  addCompetitorAccount: jest.fn(),
  deleteCompetitorAccount: jest.fn(),
  getHashtagsByProjectId: jest.fn(),
  addHashtag: jest.fn(),
  removeHashtag: jest.fn(),
  getParsingRunLogs: jest.fn(),
  close: jest.fn(),
  ensureConnection: jest.fn(),
};

describe("{{SCENE_NAME}} - Text Input Handler", () => {
  // Создаем моки для контекста Telegraf
  let ctx: Context & { 
    scene: Scenes.SceneContext; 
    from?: { id: number };
    message?: { text?: string };
  };
  let scene: {{SCENE_NAME}};

  beforeEach(() => {
    // Сбрасываем все моки перед каждым тестом
    jest.clearAllMocks();

    // Создаем новый экземпляр сцены для каждого теста
    scene = new {{SCENE_NAME}}(mockAdapter);

    // Создаем мок контекста
    ctx = {
      scene: {
        enter: jest.fn(),
        reenter: jest.fn(),
        leave: jest.fn(),
        state: {
          step: SceneStep.{{STEP_NAME}},
          projectId: 1,
        },
      } as unknown as Scenes.SceneContext,
      reply: jest.fn().mockResolvedValue({} as Message.TextMessage),
      from: { id: 123456789 },
      message: { text: "Test input" },
    } as Context & { 
      scene: Scenes.SceneContext; 
      from?: { id: number };
      message?: { text?: string };
    };
  });

  afterEach(() => {
    // Очищаем все моки после каждого теста
    jest.clearAllMocks();
  });

  it("should do nothing if step is not {{STEP_NAME}}", async () => {
    // Изменяем шаг в состоянии сцены
    ctx.scene.state.step = SceneStep.NONE;

    // Вызываем обработчик текстового сообщения
    await scene.handle{{SCENE_NAME}}Text(ctx);

    // Проверяем, что не были вызваны методы адаптера
    expect(mockAdapter.findUserByTelegramIdOrCreate).not.toHaveBeenCalled();
    expect(ctx.reply).not.toHaveBeenCalled();
    expect(mockAdapter.close).not.toHaveBeenCalled();
  });

  it("should handle successful text input", async () => {
    // Настраиваем моки для успешного сценария
    mockAdapter.findUserByTelegramIdOrCreate.mockResolvedValue({ id: 1, telegram_id: 123456789 });
    
    // Вызываем обработчик текстового сообщения
    await scene.handle{{SCENE_NAME}}Text(ctx);

    // Проверяем, что были вызваны нужные методы
    expect(mockAdapter.findUserByTelegramIdOrCreate).toHaveBeenCalledWith(123456789);
    expect(ctx.reply).toHaveBeenCalled();
    expect(ctx.scene.reenter).toHaveBeenCalled();
    expect(mockAdapter.close).toHaveBeenCalled();
  });

  it("should handle error scenario", async () => {
    // Настраиваем моки для сценария с ошибкой
    mockAdapter.findUserByTelegramIdOrCreate.mockResolvedValue(null);

    // Вызываем обработчик текстового сообщения
    await scene.handle{{SCENE_NAME}}Text(ctx);

    // Проверяем, что были вызваны нужные методы
    expect(mockAdapter.findUserByTelegramIdOrCreate).toHaveBeenCalledWith(123456789);
    expect(ctx.reply).toHaveBeenCalledWith(expect.stringContaining("ошибка"));
    expect(mockAdapter.close).toHaveBeenCalled();
  });

  // Добавьте дополнительные тесты для других сценариев
});
