import { describe, it, expect, jest, beforeEach, afterEach } from "bun:test";
import { Context, Scenes } from "telegraf";
import { Message } from "telegraf/typings/core/types/typegram";
import { StorageAdapter } from "@/types";
import { {{SCENE_NAME}} } from "@/scenes/{{SCENE_FILE_NAME}}";

// Мокируем адаптер хранилища
const mockAdapter: jest.Mocked<StorageAdapter> = {
  findUserByTelegramIdOrCreate: jest.fn(),
  getProjectsByUserId: jest.fn(),
  getProjectById: jest.fn(),
  createProject: jest.fn(),
  getCompetitorAccounts: jest.fn(),
  addCompetitorAccount: jest.fn(),
  deleteCompetitorAccount: jest.fn(),
  getHashtagsByProjectId: jest.fn(),
  addHashtag: jest.fn(),
  removeHashtag: jest.fn(),
  getParsingRunLogs: jest.fn(),
  close: jest.fn(),
  ensureConnection: jest.fn(),
};

describe("{{SCENE_NAME}} - Action Handlers", () => {
  // Создаем моки для контекста Telegraf
  let ctx: Context & { 
    scene: Scenes.SceneContext; 
    from?: { id: number };
    callbackQuery?: { data: string; id: string };
    answerCbQuery: jest.Mock;
    match?: RegExpExecArray;
  };
  let scene: {{SCENE_NAME}};

  beforeEach(() => {
    // Сбрасываем все моки перед каждым тестом
    jest.clearAllMocks();

    // Создаем новый экземпляр сцены для каждого теста
    scene = new {{SCENE_NAME}}(mockAdapter);

    // Создаем мок контекста
    ctx = {
      scene: {
        enter: jest.fn(),
        reenter: jest.fn(),
        leave: jest.fn(),
        state: {},
      } as unknown as Scenes.SceneContext,
      reply: jest.fn().mockResolvedValue({} as Message.TextMessage),
      from: { id: 123456789 },
      callbackQuery: { data: "test_action", id: "123" },
      answerCbQuery: jest.fn().mockResolvedValue(true),
      match: ["action_123", "123"] as unknown as RegExpExecArray,
    } as Context & { 
      scene: Scenes.SceneContext; 
      from?: { id: number };
      callbackQuery?: { data: string; id: string };
      answerCbQuery: jest.Mock;
      match?: RegExpExecArray;
    };
  });

  afterEach(() => {
    // Очищаем все моки после каждого теста
    jest.clearAllMocks();
  });

  describe("handle{{ACTION_NAME}}Action", () => {
    it("should handle successful action", async () => {
      // Настраиваем моки для успешного сценария
      mockAdapter.findUserByTelegramIdOrCreate.mockResolvedValue({ id: 1, telegram_id: 123456789 });
      
      // Вызываем обработчик действия
      await scene.handle{{ACTION_NAME}}Action(ctx);

      // Проверяем, что были вызваны нужные методы
      expect(ctx.answerCbQuery).toHaveBeenCalled();
      expect(ctx.reply).toHaveBeenCalled();
      expect(mockAdapter.close).toHaveBeenCalled();
    });

    it("should handle error scenario", async () => {
      // Настраиваем моки для сценария с ошибкой
      mockAdapter.findUserByTelegramIdOrCreate.mockResolvedValue(null);

      // Вызываем обработчик действия
      await scene.handle{{ACTION_NAME}}Action(ctx);

      // Проверяем, что были вызваны нужные методы
      expect(ctx.answerCbQuery).toHaveBeenCalled();
      expect(ctx.reply).toHaveBeenCalledWith(expect.stringContaining("ошибка"));
      expect(mockAdapter.close).toHaveBeenCalled();
    });

    // Добавьте дополнительные тесты для других сценариев
  });

  // Добавьте тесты для других обработчиков действий
});
