#!/usr/bin/env bun

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π Wizard-—Å—Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * bun run scripts/generate-wizard-scene.ts <–∏–º—è-—Å—Ü–µ–Ω—ã>
 * 
 * –ü—Ä–∏–º–µ—Ä:
 * bun run scripts/generate-wizard-scene.ts my-feature
 * 
 * –†–µ–∑—É–ª—å—Ç–∞—Ç:
 * –°–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª src/scenes/my-feature-wizard-scene.ts –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ PascalCase
function toPascalCase(str: string): string {
  return str
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join('');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ camelCase
function toCamelCase(str: string): string {
  const pascal = toPascalCase(str);
  return pascal.charAt(0).toLowerCase() + pascal.slice(1);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ snake_case
function toSnakeCase(str: string): string {
  return str.replace(/-/g, '_');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ UPPER_SNAKE_CASE
function toUpperSnakeCase(str: string): string {
  return toSnakeCase(str).toUpperCase();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π Wizard-—Å—Ü–µ–Ω—ã
async function generateWizardScene(sceneName: string): Promise<void> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å—Ü–µ–Ω—ã –∑–∞–¥–∞–Ω–æ
  if (!sceneName) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Å—Ü–µ–Ω—ã');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bun run scripts/generate-wizard-scene.ts <–∏–º—è-—Å—Ü–µ–Ω—ã>');
    process.exit(1);
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å—Ü–µ–Ω—ã
  const pascalCaseName = toPascalCase(sceneName);
  const camelCaseName = toCamelCase(sceneName);
  const snakeCaseName = toSnakeCase(sceneName);
  const upperSnakeCaseName = toUpperSnakeCase(sceneName);
  
  // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
  const templatePath = path.join(__dirname, '..', 'src', 'templates', 'wizard-scene-template.ts');
  const outputPath = path.join(__dirname, '..', 'src', 'scenes', `${sceneName}-wizard-scene.ts`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω
  if (!fs.existsSync(templatePath)) {
    console.error(`–û—à–∏–±–∫–∞: –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ ${templatePath}`);
    process.exit(1);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
  if (fs.existsSync(outputPath)) {
    console.error(`–û—à–∏–±–∫–∞: –§–∞–π–ª ${outputPath} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    process.exit(1);
  }
  
  // –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
  let templateContent = fs.readFileSync(templatePath, 'utf-8');
  
  // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–Ω—ã—Ö –∏–º–µ–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
  templateContent = templateContent
    .replace(/TemplateWizardScene/g, `${pascalCaseName}WizardScene`)
    .replace(/template_wizard/g, `${snakeCaseName}_wizard`)
    .replace(/\[TemplateWizard\]/g, `[${pascalCaseName}Wizard]`)
    .replace(/TEMPLATE_STEP_1/g, `${upperSnakeCaseName}_STEP_1`)
    .replace(/TEMPLATE_STEP_2/g, `${upperSnakeCaseName}_STEP_2`)
    .replace(/setupTemplateWizard/g, `setup${pascalCaseName}Wizard`)
    .replace(/\/template/g, `/${snakeCaseName}`)
    .replace(/'–®–∞–±–ª–æ–Ω'/g, `'${pascalCaseName}'`)
    .replace(/\[–æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\]/g, `${sceneName}`);
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
  fs.writeFileSync(outputPath, templateContent);
  
  console.log(`‚úÖ Wizard-—Å—Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: ${outputPath}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —à–∞–≥–∏ –≤ ScraperSceneStep
  const typesPath = path.join(__dirname, '..', 'src', 'types.ts');
  
  if (fs.existsSync(typesPath)) {
    let typesContent = fs.readFileSync(typesPath, 'utf-8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —à–∞–≥–∏ –¥–ª—è —ç—Ç–æ–π —Å—Ü–µ–Ω—ã
    if (!typesContent.includes(`${upperSnakeCaseName}_STEP_1`)) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –≤ enum ScraperSceneStep
      const enumMatch = typesContent.match(/export enum ScraperSceneStep \{[\s\S]*?\}/);
      
      if (enumMatch) {
        const enumContent = enumMatch[0];
        const lastLine = enumContent.split('\n').slice(-2)[0];
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —à–∞–≥–æ–≤
        const newSteps = `  ${upperSnakeCaseName}_STEP_1 = "${upperSnakeCaseName}_STEP_1", // –®–∞–≥ 1 –¥–ª—è ${sceneName}
  ${upperSnakeCaseName}_STEP_2 = "${upperSnakeCaseName}_STEP_2" // –®–∞–≥ 2 –¥–ª—è ${sceneName}`;
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É + –Ω–æ–≤—ã–µ —à–∞–≥–∏
        const updatedEnum = enumContent.replace(
          lastLine,
          `${lastLine}\n${newSteps}`
        );
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª types.ts
        typesContent = typesContent.replace(enumContent, updatedEnum);
        fs.writeFileSync(typesPath, typesContent);
        
        console.log(`‚úÖ –®–∞–≥–∏ –¥–ª—è —Å—Ü–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ ScraperSceneStep`);
      }
    }
  }
  
  console.log('\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω—ã:');
  console.log(`1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—Ü–µ–Ω—É –≤ index.ts:`);
  console.log(`   import { ${pascalCaseName}WizardScene, setup${pascalCaseName}Wizard } from "./src/scenes/${sceneName}-wizard-scene";`);
  console.log(`2. –î–æ–±–∞–≤—å—Ç–µ —Å—Ü–µ–Ω—É –≤ —Å–ø–∏—Å–æ–∫ —Å—Ü–µ–Ω:`);
  console.log(`   new ${pascalCaseName}WizardScene(storageAdapter),`);
  console.log(`3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:`);
  console.log(`   setup${pascalCaseName}Wizard(bot);`);
}

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ü–µ–Ω—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const sceneName = process.argv[2];

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
generateWizardScene(sceneName).catch(console.error);
