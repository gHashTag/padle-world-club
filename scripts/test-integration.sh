#!/bin/bash

# Instagram Scraper Bot - –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
# 
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è Instagram Scraper Bot
# —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–π SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
RED="\033[0;31m"
BLUE="\033[0;34m"
NC="\033[0m" # No Color

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥—É–ª—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MODULE_DIR="$(dirname "$SCRIPT_DIR")"
ROOT_DIR="$(cd "$MODULE_DIR/../../../../" && pwd)"
DEV_DIR="$MODULE_DIR/.dev"
INTEGRATION_TESTS_DIR="$MODULE_DIR/__tests__/integration"

# –õ–æ–≥-—Ñ–∞–π–ª
LOG_FILE="$DEV_DIR/dev.log"

# –°–æ–∑–¥–∞–µ–º .dev –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -d "$DEV_DIR" ]; then
  mkdir -p "$DEV_DIR"
fi

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -f "$LOG_FILE" ]; then
  echo "üöÄ –õ–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ Instagram Scraper Bot" > "$LOG_FILE"
  echo "" >> "$LOG_FILE"
fi

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
  local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
  echo -e "$timestamp $1" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
create_test_db() {
  log "${YELLOW}üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${NC}"
  
  # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  TEST_DB="$DEV_DIR/test-sqlite.db"
  
  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if [ -f "$TEST_DB" ]; then
    rm "$TEST_DB"
  fi
  
  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
  # –ò—Å–ø–æ–ª—å–∑—É–µ–º NODE_ENV=test –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
  cd "$MODULE_DIR"
  NODE_ENV=test SQLITE_DB_PATH="$TEST_DB" bun run scripts/init-dev-db.ts
  
  if [ $? -eq 0 ]; then
    log "${GREEN}‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.${NC}"
    return 0
  else
    log "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.${NC}"
    return 1
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
run_tests() {
  log "${YELLOW}üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...${NC}"
  
  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  cd "$ROOT_DIR"
  NODE_ENV=test SQLITE_DB_PATH="$DEV_DIR/test-sqlite.db" \
    bun vitest run "$INTEGRATION_TESTS_DIR" --reporter verbose
  
  TEST_RESULT=$?
  
  if [ $TEST_RESULT -eq 0 ]; then
    log "${GREEN}‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã.${NC}"
  else
    log "${RED}‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.${NC}"
  fi
  
  return $TEST_RESULT
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
cleanup() {
  log "${YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤...${NC}"
  
  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
  if [ -f "$DEV_DIR/test-sqlite.db" ]; then
    rm "$DEV_DIR/test-sqlite.db"
    log "${GREEN}‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞.${NC}"
  fi
  
  return 0
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
  log "${BLUE}üöÄ –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Instagram Scraper Bot${NC}"
  
  # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  create_test_db
  if [ $? -ne 0 ]; then
    log "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.${NC}"
    return 1
  fi
  
  # 2. –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
  run_tests
  TEST_RESULT=$?
  
  # 3. –û—á–∏—Å—Ç–∫–∞
  cleanup
  
  # 4. –†–µ–∑—É–ª—å—Ç–∞—Ç
  if [ $TEST_RESULT -eq 0 ]; then
    log "${GREEN}üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${NC}"
  else
    log "${RED}‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏!${NC}"
  fi
  
  return $TEST_RESULT
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
if [ ! -d "$INTEGRATION_TESTS_DIR" ]; then
  log "${YELLOW}‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $INTEGRATION_TESTS_DIR${NC}"
  log "${YELLOW}‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...${NC}"
  
  mkdir -p "$INTEGRATION_TESTS_DIR"
  
  # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
  cat > "$INTEGRATION_TESTS_DIR/sqlite-adapter.test.ts" << EOL
/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è SQLite –∞–¥–∞–ø—Ç–µ—Ä–∞ Instagram Scraper Bot
 */
import { describe, it, expect, beforeAll, afterAll } from 'vitest'
import { SqliteAdapter } from '../../adapters/sqlite-adapter'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const dbPath = process.env.SQLITE_DB_PATH || path.resolve(__dirname, '../../.dev/test-sqlite.db')

describe('SQLite Adapter - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç', () => {
  let adapter: SqliteAdapter

  beforeAll(async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    expect(fs.existsSync(dbPath)).toBe(true)
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä
    adapter = new SqliteAdapter({ dbPath })
    await adapter.connect()
  })

  afterAll(async () => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await adapter.disconnect()
  })

  it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤', async () => {
    const projects = await adapter.getProjects(1) // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    expect(Array.isArray(projects)).toBe(true)
    expect(projects.length).toBeGreaterThan(0)
  })

  it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞', async () => {
    const competitors = await adapter.getCompetitors(1) // ID –ø—Ä–æ–µ–∫—Ç–∞
    expect(Array.isArray(competitors)).toBe(true)
    expect(competitors.length).toBeGreaterThan(0)
  })

  it('–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞', async () => {
    const hashtags = await adapter.getHashtags(1) // ID –ø—Ä–æ–µ–∫—Ç–∞
    expect(Array.isArray(hashtags)).toBe(true)
    expect(hashtags.length).toBeGreaterThan(0)
  })

  it('–¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–æ–≤—ã–π Reel –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', async () => {
    const newReel = {
      project_id: 1,
      source_type: 'competitor',
      source_id: 1,
      instagram_id: 'test_' + Date.now(),
      url: 'https://instagram.com/reel/test' + Date.now(),
      caption: '–¢–µ—Å—Ç–æ–≤—ã–π Reel –∏–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞',
      owner_username: 'test_user',
      owner_id: 'test_owner_id',
      view_count: 50000,
      like_count: 1000,
      comment_count: 50,
      duration: 30,
      thumbnail_url: 'https://example.com/thumb_test.jpg',
      audio_title: '–¢–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ç—Ä–µ–∫',
      published_at: new Date().toISOString()
    }
    
    const result = await adapter.saveReel(newReel)
    expect(result).toBeTruthy()
    expect(result.id).toBeDefined()
  })

  it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ Reels', async () => {
    const reels = await adapter.getReels(1, { limit: 10 }) // ID –ø—Ä–æ–µ–∫—Ç–∞
    expect(Array.isArray(reels)).toBe(true)
    expect(reels.length).toBeGreaterThan(0)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ Reel
    const firstReel = reels[0]
    expect(firstReel).toHaveProperty('id')
    expect(firstReel).toHaveProperty('url')
    expect(firstReel).toHaveProperty('caption')
    expect(firstReel).toHaveProperty('view_count')
  })
})
EOL

  log "${GREEN}‚úÖ –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω –≤: $INTEGRATION_TESTS_DIR/sqlite-adapter.test.ts${NC}"
fi

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
exit $? 