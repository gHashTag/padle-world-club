#!/usr/bin/env bun

import fs from 'fs';
import path from 'path';
import { spawnSync } from 'child_process';
import readline from 'readline';

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function prompt(question: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ –∏–º—è –∫–ª–∞—Å—Å–∞
function fileNameToClassName(fileName: string): string {
  return fileName
    .split('-')
    .map(part => part.charAt(0).toUpperCase() + part.slice(1))
    .join('');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function ensureDirectoryExists(dirPath: string): void {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
  }
}

// –®–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
function generateEnterHandlerTest(sceneName: string, sceneFileName: string): string {
  return `import { describe, it, expect, beforeEach, afterEach, jest } from "bun:test";
import { SceneTester, generateEnterHandlerTests } from "../../../__tests__/helpers/telegram";
import { ${sceneName} } from "../../../scenes/${sceneFileName}";

describe("${sceneName} - Enter Handler", () => {
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä —Å—Ü–µ–Ω—ã
  const sceneTester = new SceneTester({
    sceneName: "${sceneName}",
    sceneFilePath: "../../../scenes/${sceneFileName}",
    sceneConstructor: ${sceneName}
  });

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
  generateEnterHandlerTests(sceneTester);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
});`;
}

// –®–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
function generateActionHandlerTest(sceneName: string, sceneFileName: string, actionName: string): string {
  return `import { describe, it, expect, beforeEach, afterEach, jest } from "bun:test";
import { SceneTester, generateActionHandlerTests } from "../../../__tests__/helpers/telegram";
import { ${sceneName} } from "../../../scenes/${sceneFileName}";

describe("${sceneName} - Action Handlers", () => {
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä —Å—Ü–µ–Ω—ã
  const sceneTester = new SceneTester({
    sceneName: "${sceneName}",
    sceneFilePath: "../../../scenes/${sceneFileName}",
    sceneConstructor: ${sceneName}
  });

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
  generateActionHandlerTests(
    sceneTester,
    "handle${actionName}Action" as keyof ${sceneName},
    "${actionName.toLowerCase()}"
  );

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
});`;
}

// –®–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
function generateTextHandlerTest(sceneName: string, sceneFileName: string, stepName: string): string {
  return `import { describe, it, expect, beforeEach, afterEach, jest } from "bun:test";
import { SceneTester, generateTextHandlerTests } from "../../../__tests__/helpers/telegram";
import { ${sceneName} } from "../../../scenes/${sceneFileName}";
import { ScraperSceneStep } from "../../../types";

describe("${sceneName} - Text Input Handler", () => {
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä —Å—Ü–µ–Ω—ã
  const sceneTester = new SceneTester({
    sceneName: "${sceneName}",
    sceneFilePath: "../../../scenes/${sceneFileName}",
    sceneConstructor: ${sceneName}
  });

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  generateTextHandlerTests(
    sceneTester,
    "handle${sceneName}Text" as keyof ${sceneName},
    "${stepName}",
    ScraperSceneStep.${stepName}
  );

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å
});`;
}

// –®–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π
function generateSequenceTest(sceneName: string, sceneFileName: string): string {
  return `import { describe, it, expect, beforeEach, afterEach, jest } from "bun:test";
import { SceneTester, SceneSequenceTester, expectSceneStep, expectMessageContaining } from "../../../__tests__/helpers/telegram";
import { ${sceneName} } from "../../../scenes/${sceneFileName}";
import { ScraperSceneStep } from "../../../types";

describe("${sceneName} - Sequence Test", () => {
  it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π", async () => {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä —Å—Ü–µ–Ω—ã
    const sceneTester = new SceneTester({
      sceneName: "${sceneName}",
      sceneFilePath: "../../../scenes/${sceneFileName}",
      sceneConstructor: ${sceneName}
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫–∏
    sceneTester.updateAdapter({
      getUserByTelegramId: jest.fn().mockResolvedValue({ id: 1, telegram_id: 123456789, username: "testuser", created_at: new Date().toISOString(), is_active: true }),
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–∫–∏
    });

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    const sequenceTester = new SceneSequenceTester(sceneTester);

    // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥–∏ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    sequenceTester
      .addSceneEnter(
        "–í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É",
        "enterHandler",
        {},
        (tester) => {
          // –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
          expectMessageContaining(tester.getContext(), "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å");
        }
      )
      // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —à–∞–≥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    await sequenceTester.run();
  });
});`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
async function generateTest(
  template: string,
  outputPath: string
): Promise<void> {
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  ensureDirectoryExists(path.dirname(outputPath));

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤ —Ñ–∞–π–ª
  fs.writeFileSync(outputPath, template);

  console.log(`–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${outputPath}`);

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é prettier
  try {
    spawnSync('bunx', ['prettier', '--write', outputPath], { stdio: 'inherit' });
    console.log(`–§–∞–π–ª –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é prettier: ${outputPath}`);
  } catch (error) {
    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é prettier: ${error}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
async function main(): Promise<void> {
  console.log('üß™ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Telegram-—Å—Ü–µ–Ω üß™');
  console.log('----------------------------------------');
  console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram-—Å—Ü–µ–Ω –∏–∑ src/__tests__/helpers/telegram');

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å—Ü–µ–Ω—ã
  const sceneFileName = await prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å—Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, project-scene): ');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å—Ü–µ–Ω—ã
  const sceneFilePath = path.join(process.cwd(), 'src', 'scenes', `${sceneFileName}.ts`);
  if (!fs.existsSync(sceneFilePath)) {
    console.error(`–§–∞–π–ª —Å—Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sceneFilePath}`);
    rl.close();
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞ —Å—Ü–µ–Ω—ã
  const sceneClassName = fileNameToClassName(sceneFileName);

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
  console.log('\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:');
  console.log('1. –¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É');
  console.log('2. –¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π');
  console.log('3. –¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
  console.log('4. –¢–µ—Å—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π');
  console.log('5. –í—Å–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤');

  const testTypesInput = await prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,2,3): ');
  const testTypes = testTypesInput.split(',').map(type => type.trim());

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
  const generateEnterTests = testTypes.includes('1') || testTypes.includes('5');
  const generateActionTests = testTypes.includes('2') || testTypes.includes('5');
  const generateTextTests = testTypes.includes('3') || testTypes.includes('5');
  const generateSequenceTests = testTypes.includes('4') || testTypes.includes('5');

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
  if (generateEnterTests) {
    const enterTestPath = path.join(
      process.cwd(),
      'src',
      '__tests__',
      'unit',
      'scenes',
      `${sceneFileName}-enter.test.ts`
    );

    await generateTest(
      generateEnterHandlerTest(sceneClassName, sceneFileName),
      enterTestPath
    );
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
  if (generateActionTests) {
    const actionTestPath = path.join(
      process.cwd(),
      'src',
      '__tests__',
      'unit',
      'scenes',
      `${sceneFileName}-actions.test.ts`
    );

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –¥–µ–π—Å—Ç–≤–∏—è
    const actionName = await prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, CreateProject): ');

    await generateTest(
      generateActionHandlerTest(sceneClassName, sceneFileName, actionName),
      actionTestPath
    );
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (generateTextTests) {
    const textTestPath = path.join(
      process.cwd(),
      'src',
      '__tests__',
      'unit',
      'scenes',
      `${sceneFileName}-ontext.test.ts`
    );

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è —à–∞–≥–∞
    const stepName = await prompt('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —à–∞–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, CREATE_PROJECT): ');

    await generateTest(
      generateTextHandlerTest(sceneClassName, sceneFileName, stepName),
      textTestPath
    );
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π
  if (generateSequenceTests) {
    const sequenceTestPath = path.join(
      process.cwd(),
      'src',
      '__tests__',
      'unit',
      'scenes',
      `${sceneFileName}-sequence.test.ts`
    );

    await generateTest(
      generateSequenceTest(sceneClassName, sceneFileName),
      sequenceTestPath
    );
  }

  console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  rl.close();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(error => {
  console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
  rl.close();
});
