#!/bin/bash

# Performance Testing Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

set -e

echo "üöÄ Starting Performance Testing Suite"
echo "======================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
if [ ! -f "package.json" ]; then
    log_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
if ! command -v bun &> /dev/null; then
    log_error "Bun –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Bun –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ autocannon
if ! bun pm ls | grep -q "autocannon"; then
    log_error "Autocannon –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: bun add -D autocannon"
    exit 1
fi

log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ TypeScript..."
if ! bun run typecheck; then
    log_error "–û—à–∏–±–∫–∏ —Ç–∏–ø–æ–≤ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º performance —Ç–µ—Å—Ç–æ–≤."
    exit 1
fi
log_success "–¢–∏–ø—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
mkdir -p reports/performance

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ performance —Ç–µ—Å—Ç–∞
run_performance_test() {
    local test_file=$1
    local test_name=$2

    log_info "–ó–∞–ø—É—Å–∫ $test_name..."

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if bun test "$test_file" > "reports/performance/${test_name}-$(date +%Y%m%d-%H%M%S).log" 2>&1; then
        log_success "$test_name –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        log_error "$test_name –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö performance —Ç–µ—Å—Ç–æ–≤
run_all_performance_tests() {
    log_info "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö performance —Ç–µ—Å—Ç–æ–≤..."

    local failed_tests=0
    local total_tests=0

    # –°–ø–∏—Å–æ–∫ performance —Ç–µ—Å—Ç–æ–≤
    declare -a tests=(
        "src/api/__tests__/performance/users-api.test.ts:Users API Performance"
        "src/api/__tests__/performance/venues-api.test.ts:Venues API Performance"
        "src/api/__tests__/performance/database-stress.test.ts:Database Stress Testing"
        "src/api/__tests__/performance/memory-usage.test.ts:Memory Usage Testing"
        "src/api/__tests__/performance/response-time-benchmarks.test.ts:Response Time Benchmarks"
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
    for test_info in "${tests[@]}"; do
        IFS=':' read -r test_file test_name <<< "$test_info"

        if [ -f "$test_file" ]; then
            total_tests=$((total_tests + 1))
            if ! run_performance_test "$test_file" "$test_name"; then
                failed_tests=$((failed_tests + 1))
            fi

            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            log_info "–ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏..."
            sleep 5
        else
            log_warning "–§–∞–π–ª —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $test_file"
        fi
    done

    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    echo ""
    echo "======================================"
    log_info "–ò—Ç–æ–≥–∏ Performance Testing:"
    log_info "–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $total_tests"
    log_info "–£—Å–ø–µ—à–Ω—ã—Ö: $((total_tests - failed_tests))"

    if [ $failed_tests -eq 0 ]; then
        log_success "–í—Å–µ performance —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! üéâ"
        return 0
    else
        log_error "–ù–µ—É–¥–∞—á–Ω—ã—Ö: $failed_tests"
        log_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ performance —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö performance —Ç–µ—Å—Ç–æ–≤
run_quick_performance_tests() {
    log_info "–ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö performance —Ç–µ—Å—Ç–æ–≤..."

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ Users API —Ç–µ—Å—Ç –∫–∞–∫ –±—ã—Å—Ç—Ä—ã–π smoke test
    if run_performance_test "src/api/__tests__/performance/users-api.test.ts" "Quick Users API Performance"; then
        log_success "–ë—ã—Å—Ç—Ä—ã–µ performance —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! üéâ"
        return 0
    else
        log_error "–ë—ã—Å—Ç—Ä—ã–µ performance —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
generate_performance_report() {
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."

    local report_file="reports/performance/summary-$(date +%Y%m%d-%H%M%S).md"

    cat > "$report_file" << EOF
# Performance Testing Report

**–î–∞—Ç–∞:** $(date)
**–ü—Ä–æ–µ–∫—Ç:** Padle World Club API

## –û–±–∑–æ—Ä

–≠—Ç–æ—Ç –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints.

## –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

- **Users API:** –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –ø—Ä–æ—Ñ–∏–ª—å
- **Venues API:** –°–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –ø–æ–∏—Å–∫ –ø–ª–æ—â–∞–¥–æ–∫

## –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤

- **Light:** 5 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, 5 —Å–µ–∫—É–Ω–¥
- **Medium:** 10 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, 10 —Å–µ–∫—É–Ω–¥
- **Heavy:** 20 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, 15 —Å–µ–∫—É–Ω–¥
- **Stress:** 50 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, 30 —Å–µ–∫—É–Ω–¥

## –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞

- **–û—à–∏–±–∫–∏:** < 1-5% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
- **Latency P99:** < 500ms-3s –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
- **RPS:** > 10-50 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã

–ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–º. –≤ –ª–æ–≥–∞—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ reports/performance/

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ
2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ endpoints
3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –Ω–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

EOF

    log_success "–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-all}" in
    "all")
        run_all_performance_tests
        exit_code=$?
        generate_performance_report
        exit $exit_code
        ;;
    "quick")
        run_quick_performance_tests
        exit $?
        ;;
    "users")
        run_performance_test "src/api/__tests__/performance/users-api.test.ts" "Users API Performance"
        exit $?
        ;;
    "venues")
        run_performance_test "src/api/__tests__/performance/venues-api.test.ts" "Venues API Performance"
        exit $?
        ;;
    "database")
        run_performance_test "src/api/__tests__/performance/database-stress.test.ts" "Database Stress Testing"
        exit $?
        ;;
    "memory")
        run_performance_test "src/api/__tests__/performance/memory-usage.test.ts" "Memory Usage Testing"
        exit $?
        ;;
    "benchmarks")
        run_performance_test "src/api/__tests__/performance/response-time-benchmarks.test.ts" "Response Time Benchmarks"
        exit $?
        ;;
    "report")
        generate_performance_report
        exit 0
        ;;
    "help"|"-h"|"--help")
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
        echo ""
        echo "–ö–æ–º–∞–Ω–¥—ã:"
        echo "  all        - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ performance —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  quick      - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä—ã–µ performance —Ç–µ—Å—Ç—ã"
        echo "  users      - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã Users API"
        echo "  venues     - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã Venues API"
        echo "  database   - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã Database Stress"
        echo "  memory     - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã Memory Usage"
        echo "  benchmarks - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã Response Time Benchmarks"
        echo "  report     - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
        echo "  help       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo ""
        echo "–ü—Ä–∏–º–µ—Ä—ã:"
        echo "  $0 all"
        echo "  $0 quick"
        echo "  $0 database"
        echo "  $0 memory"
        exit 0
        ;;
    *)
        log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
        log_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
        exit 1
        ;;
esac
