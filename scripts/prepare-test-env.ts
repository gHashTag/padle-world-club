#!/usr/bin/env bun

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 * 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
 * 3. –ó–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * bun run scripts/prepare-test-env.ts
 * 
 * –û–ø—Ü–∏–∏:
 * --reset - —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
 * --verbose - –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Database } from 'bun:sqlite';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const resetDb = args.includes('--reset');
const verbose = args.includes('--verbose');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  dbPath: path.join(rootDir, '.dev', 'test-sqlite.db'),
  devDir: path.join(rootDir, '.dev'),
  requiredDeps: ['telegraf', 'zod', 'bun:sqlite'],
  testData: {
    users: [
      { telegramId: 123456789, username: 'test_user', firstName: 'Test', lastName: 'User' }
    ],
    projects: [
      { name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç 1', userId: 1 },
      { name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç 2', userId: 1 }
    ],
    competitors: [
      { projectId: 1, username: 'beauty_clinic', instagramUrl: 'https://www.instagram.com/beauty_clinic' },
      { projectId: 1, username: 'luxury_beauty', instagramUrl: 'https://www.instagram.com/luxury_beauty' },
      { projectId: 2, username: 'skincare_expert', instagramUrl: 'https://www.instagram.com/skincare_expert' }
    ],
    hashtags: [
      { projectId: 1, name: '–∫—Ä–∞—Å–æ—Ç–∞' },
      { projectId: 1, name: '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è' },
      { projectId: 2, name: '—É—Ö–æ–¥–∑–∞–∫–æ–∂–µ–π' }
    ],
    reels: [
      { 
        projectId: 1, 
        sourceType: 'competitor', 
        sourceId: 1, 
        instagramId: 'reel123456', 
        caption: '–¢–µ—Å—Ç–æ–≤—ã–π Reel 1', 
        url: 'https://www.instagram.com/reel/reel123456',
        viewCount: 100000,
        likesCount: 5000,
        commentsCount: 200,
        publishedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString() // 5 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
      },
      { 
        projectId: 1, 
        sourceType: 'competitor', 
        sourceId: 2, 
        instagramId: 'reel234567', 
        caption: '–¢–µ—Å—Ç–æ–≤—ã–π Reel 2', 
        url: 'https://www.instagram.com/reel/reel234567',
        viewCount: 75000,
        likesCount: 3000,
        commentsCount: 150,
        publishedAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString() // 3 –¥–Ω—è –Ω–∞–∑–∞–¥
      },
      { 
        projectId: 2, 
        sourceType: 'hashtag', 
        sourceId: 3, 
        instagramId: 'reel345678', 
        caption: '–¢–µ—Å—Ç–æ–≤—ã–π Reel 3', 
        url: 'https://www.instagram.com/reel/reel345678',
        viewCount: 120000,
        likesCount: 6000,
        commentsCount: 300,
        publishedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString() // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
      }
    ],
    collections: [
      {
        projectId: 1,
        name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è 1',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 1',
        isProcessed: false
      }
    ],
    notificationSettings: [
      {
        userId: 1,
        newReelsEnabled: true,
        trendsEnabled: true,
        weeklyReportEnabled: false,
        viewsThreshold: 50000,
        notificationTime: '10:00'
      }
    ]
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message: string, isVerbose = false) {
  if (isVerbose && !verbose) return;
  console.log(message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
async function checkDependencies() {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', true);
  
  try {
    const { stdout } = await execAsync('bun pm ls --json');
    const installedDeps = JSON.parse(stdout);
    
    for (const dep of config.requiredDeps) {
      if (dep.startsWith('bun:')) continue; // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ Bun
      
      if (!installedDeps[dep]) {
        console.error(`‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é 'bun install ${dep}'`);
        process.exit(1);
      }
    }
    
    log('‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', true);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:', error);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .dev
function initDevDir() {
  log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .dev...', true);
  
  if (!fs.existsSync(config.devDir)) {
    fs.mkdirSync(config.devDir, { recursive: true });
    log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${config.devDir}`, true);
  } else {
    log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${config.devDir} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, true);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initDatabase() {
  log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  if (resetDb && fs.existsSync(config.dbPath)) {
    fs.unlinkSync(config.dbPath);
    log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ${config.dbPath}`, true);
  }
  
  const db = new Database(config.dbPath);
  
  // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
  db.exec(`
    CREATE TABLE IF NOT EXISTS Users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      telegram_id INTEGER UNIQUE,
      username TEXT,
      first_name TEXT,
      last_name TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    
    CREATE TABLE IF NOT EXISTS Projects (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER,
      name TEXT NOT NULL,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES Users(id)
    );
    
    CREATE TABLE IF NOT EXISTS Competitors (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      project_id INTEGER,
      username TEXT NOT NULL,
      instagram_url TEXT NOT NULL,
      is_active BOOLEAN DEFAULT 1,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (project_id) REFERENCES Projects(id)
    );
    
    CREATE TABLE IF NOT EXISTS Hashtags (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      project_id INTEGER,
      name TEXT NOT NULL,
      is_active BOOLEAN DEFAULT 1,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (project_id) REFERENCES Projects(id)
    );
    
    CREATE TABLE IF NOT EXISTS ReelsContent (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      project_id INTEGER,
      source_type TEXT NOT NULL,
      source_id INTEGER NOT NULL,
      instagram_id TEXT UNIQUE,
      caption TEXT,
      url TEXT,
      view_count INTEGER,
      likes_count INTEGER,
      comments_count INTEGER,
      published_at TIMESTAMP,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      transcript TEXT,
      FOREIGN KEY (project_id) REFERENCES Projects(id)
    );
    
    CREATE TABLE IF NOT EXISTS ParsingRunLogs (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      project_id INTEGER,
      target_type TEXT NOT NULL,
      target_id TEXT NOT NULL,
      status TEXT,
      reels_found INTEGER,
      reels_saved INTEGER,
      started_at TIMESTAMP,
      completed_at TIMESTAMP,
      error_message TEXT,
      FOREIGN KEY (project_id) REFERENCES Projects(id)
    );
    
    CREATE TABLE IF NOT EXISTS NotificationSettings (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER UNIQUE,
      new_reels_enabled BOOLEAN DEFAULT 1,
      trends_enabled BOOLEAN DEFAULT 1,
      weekly_report_enabled BOOLEAN DEFAULT 0,
      views_threshold INTEGER DEFAULT 50000,
      notification_time TEXT DEFAULT '10:00',
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES Users(id)
    );
    
    CREATE TABLE IF NOT EXISTS ReelsCollections (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      project_id INTEGER,
      name TEXT NOT NULL,
      description TEXT,
      is_processed BOOLEAN DEFAULT 0,
      processing_status TEXT,
      content_format TEXT,
      content_data TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (project_id) REFERENCES Projects(id)
    );
    
    CREATE TABLE IF NOT EXISTS ReelsCollectionItems (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      collection_id INTEGER,
      reel_id INTEGER,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (collection_id) REFERENCES ReelsCollections(id),
      FOREIGN KEY (reel_id) REFERENCES ReelsContent(id)
    );
    
    CREATE TABLE IF NOT EXISTS Embeddings (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      reel_id TEXT,
      embedding TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (reel_id) REFERENCES ReelsContent(instagram_id)
    );
    
    CREATE TABLE IF NOT EXISTS ChatHistory (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER,
      reel_id TEXT,
      message TEXT,
      response TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      FOREIGN KEY (user_id) REFERENCES Users(id),
      FOREIGN KEY (reel_id) REFERENCES ReelsContent(instagram_id)
    );
  `);
  
  log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã');
  
  return db;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
function fillTestData(db: Database) {
  log('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  for (const user of config.testData.users) {
    db.prepare(
      'INSERT OR IGNORE INTO Users (telegram_id, username, first_name, last_name) VALUES (?, ?, ?, ?)'
    ).run(user.telegramId, user.username, user.firstName, user.lastName);
  }
  log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${config.testData.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã
  for (const project of config.testData.projects) {
    db.prepare(
      'INSERT OR IGNORE INTO Projects (user_id, name) VALUES (?, ?)'
    ).run(project.userId, project.name);
  }
  log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${config.testData.projects.length} –ø—Ä–æ–µ–∫—Ç–æ–≤`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  for (const competitor of config.testData.competitors) {
    db.prepare(
      'INSERT OR IGNORE INTO Competitors (project_id, username, instagram_url) VALUES (?, ?, ?)'
    ).run(competitor.projectId, competitor.username, competitor.instagramUrl);
  }
  log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${config.testData.competitors.length} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
  for (const hashtag of config.testData.hashtags) {
    db.prepare(
      'INSERT OR IGNORE INTO Hashtags (project_id, name) VALUES (?, ?)'
    ).run(hashtag.projectId, hashtag.name);
  }
  log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${config.testData.hashtags.length} —Ö–µ—à—Ç–µ–≥–æ–≤`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º Reels
  for (const reel of config.testData.reels) {
    db.prepare(
      'INSERT OR IGNORE INTO ReelsContent (project_id, source_type, source_id, instagram_id, caption, url, view_count, likes_count, comments_count, published_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
    ).run(
      reel.projectId, 
      reel.sourceType, 
      reel.sourceId, 
      reel.instagramId, 
      reel.caption, 
      reel.url, 
      reel.viewCount, 
      reel.likesCount, 
      reel.commentsCount, 
      reel.publishedAt
    );
  }
  log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${config.testData.reels.length} Reels`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  for (const collection of config.testData.collections) {
    db.prepare(
      'INSERT OR IGNORE INTO ReelsCollections (project_id, name, description, is_processed) VALUES (?, ?, ?, ?)'
    ).run(
      collection.projectId, 
      collection.name, 
      collection.description, 
      collection.isProcessed ? 1 : 0
    );
  }
  log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${config.testData.collections.length} –∫–æ–ª–ª–µ–∫—Ü–∏–π`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  for (const settings of config.testData.notificationSettings) {
    db.prepare(
      'INSERT OR IGNORE INTO NotificationSettings (user_id, new_reels_enabled, trends_enabled, weekly_report_enabled, views_threshold, notification_time) VALUES (?, ?, ?, ?, ?, ?)'
    ).run(
      settings.userId, 
      settings.newReelsEnabled ? 1 : 0, 
      settings.trendsEnabled ? 1 : 0, 
      settings.weeklyReportEnabled ? 1 : 0, 
      settings.viewsThreshold, 
      settings.notificationTime
    );
  }
  log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function checkEnvVars() {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...', true);
  
  const envPath = path.join(rootDir, '.env');
  if (!fs.existsSync(envPath)) {
    log('‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –µ–≥–æ...', true);
    
    const envContent = `# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
NEON_DATABASE_URL=sqlite:///.dev/test-sqlite.db
APIFY_TOKEN=mock_apify_token_for_testing
MIN_VIEWS=50000
MAX_AGE_DAYS=14
TEST_MODE=true
`;
    
    fs.writeFileSync(envPath, envContent);
    log('‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω', true);
  } else {
    log('‚úÖ –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', true);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...');
  
  try {
    await checkDependencies();
    initDevDir();
    checkEnvVars();
    const db = initDatabase();
    fillTestData(db);
    db.close();
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞!');
    console.log('\nüìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: bun run dev');
    console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
    console.log('3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —á–µ–∫-–ª–∏—Å—Ç–µ: docs/MVP_TESTING_CHECKLIST.md');
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();
