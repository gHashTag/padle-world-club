#!/usr/bin/env bun

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏ (–¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ç.–¥.)
 * 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * 3. –°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * bun run scripts/generate-edge-cases.ts
 * 
 * –û–ø—Ü–∏–∏:
 * --performance - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * --errors - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 * --all - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Database } from 'bun:sqlite';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.join(__dirname, '..');

// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const generatePerformance = args.includes('--performance') || args.includes('--all');
const generateErrors = args.includes('--errors') || args.includes('--all');
const generateAll = args.includes('--all');

// –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
const generateEdgeCases = args.length === 0 || generateAll;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  dbPath: path.join(rootDir, '.dev', 'test-sqlite.db'),
  edgeCases: {
    projects: [
      { 
        name: 'A'.repeat(100), // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        userId: 1 
      },
      { 
        name: 'Project with special chars: !@#$%^&*()_+{}[]|\\:;"\'<>,.?/', 
        userId: 1 
      },
      { 
        name: 'Project with emojis: üòÄüéâüöÄüíØüî•', 
        userId: 1 
      },
      { 
        name: '', // –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É)
        userId: 1 
      },
      { 
        name: ' '.repeat(50), // –¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã
        userId: 1 
      }
    ],
    competitors: [
      { 
        projectId: 1, 
        username: 'A'.repeat(100), // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        instagramUrl: 'https://www.instagram.com/' + 'A'.repeat(100) 
      },
      { 
        projectId: 1, 
        username: 'user with spaces', 
        instagramUrl: 'https://www.instagram.com/user with spaces' 
      },
      { 
        projectId: 1, 
        username: 'user_with_special_chars!@#$%', 
        instagramUrl: 'https://www.instagram.com/user_with_special_chars!@#$%' 
      },
      { 
        projectId: 1, 
        username: 'not_instagram_url', 
        instagramUrl: 'https://www.example.com/not_instagram_url' // –ù–µ Instagram URL
      },
      { 
        projectId: 1, 
        username: '', // –ü—É—Å—Ç–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        instagramUrl: 'https://www.instagram.com/' 
      }
    ],
    hashtags: [
      { 
        projectId: 1, 
        name: 'A'.repeat(100) // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ö–µ—à—Ç–µ–≥
      },
      { 
        projectId: 1, 
        name: 'hashtag with spaces' // –•–µ—à—Ç–µ–≥ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
      },
      { 
        projectId: 1, 
        name: 'hashtag_with_special_chars!@#$%' // –•–µ—à—Ç–µ–≥ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
      },
      { 
        projectId: 1, 
        name: '#already_has_hash' // –•–µ—à—Ç–µ–≥ —É–∂–µ —Å —Å–∏–º–≤–æ–ª–æ–º #
      },
      { 
        projectId: 1, 
        name: '' // –ü—É—Å—Ç–æ–π —Ö–µ—à—Ç–µ–≥
      }
    ],
    reels: [
      { 
        projectId: 1, 
        sourceType: 'competitor', 
        sourceId: 1, 
        instagramId: 'reel_with_long_id_' + 'A'.repeat(100), 
        caption: 'A'.repeat(1000), // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        url: 'https://www.instagram.com/reel/reel_with_long_id',
        viewCount: 9999999, // –û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        likesCount: 9999999,
        commentsCount: 9999999,
        publishedAt: new Date().toISOString()
      },
      { 
        projectId: 1, 
        sourceType: 'competitor', 
        sourceId: 1, 
        instagramId: 'reel_with_special_chars', 
        caption: 'Caption with special chars: !@#$%^&*()_+{}[]|\\:;"\'<>,.?/',
        url: 'https://www.instagram.com/reel/reel_with_special_chars',
        viewCount: 0, // –ù—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        likesCount: 0,
        commentsCount: 0,
        publishedAt: new Date().toISOString()
      },
      { 
        projectId: 1, 
        sourceType: 'competitor', 
        sourceId: 1, 
        instagramId: 'reel_with_emojis', 
        caption: 'Caption with emojis: üòÄüéâüöÄüíØüî•',
        url: 'https://www.instagram.com/reel/reel_with_emojis',
        viewCount: 100000,
        likesCount: 5000,
        commentsCount: 200,
        publishedAt: new Date().toISOString()
      },
      { 
        projectId: 1, 
        sourceType: 'competitor', 
        sourceId: 1, 
        instagramId: 'reel_with_no_caption', 
        caption: '', // –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        url: 'https://www.instagram.com/reel/reel_with_no_caption',
        viewCount: 100000,
        likesCount: 5000,
        commentsCount: 200,
        publishedAt: new Date().toISOString()
      },
      { 
        projectId: 1, 
        sourceType: 'competitor', 
        sourceId: 1, 
        instagramId: 'reel_with_old_date', 
        caption: 'Reel with very old date',
        url: 'https://www.instagram.com/reel/reel_with_old_date',
        viewCount: 100000,
        likesCount: 5000,
        commentsCount: 200,
        publishedAt: new Date(2000, 0, 1).toISOString() // –û—á–µ–Ω—å —Å—Ç–∞—Ä–∞—è –¥–∞—Ç–∞
      }
    ]
  },
  performanceData: {
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    generateProjects: (count: number, userId: number) => {
      const projects = [];
      for (let i = 0; i < count; i++) {
        projects.push({
          name: `Performance Test Project ${i + 1}`,
          userId
        });
      }
      return projects;
    },
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    generateCompetitors: (count: number, projectId: number) => {
      const competitors = [];
      for (let i = 0; i < count; i++) {
        competitors.push({
          projectId,
          username: `competitor_${i + 1}`,
          instagramUrl: `https://www.instagram.com/competitor_${i + 1}`
        });
      }
      return competitors;
    },
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
    generateHashtags: (count: number, projectId: number) => {
      const hashtags = [];
      for (let i = 0; i < count; i++) {
        hashtags.push({
          projectId,
          name: `hashtag_${i + 1}`
        });
      }
      return hashtags;
    },
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ Reels
    generateReels: (count: number, projectId: number, sourceType: string, sourceId: number) => {
      const reels = [];
      for (let i = 0; i < count; i++) {
        reels.push({
          projectId,
          sourceType,
          sourceId,
          instagramId: `performance_reel_${i + 1}`,
          caption: `Performance test reel ${i + 1}`,
          url: `https://www.instagram.com/reel/performance_reel_${i + 1}`,
          viewCount: Math.floor(Math.random() * 1000000),
          likesCount: Math.floor(Math.random() * 50000),
          commentsCount: Math.floor(Math.random() * 5000),
          publishedAt: new Date(Date.now() - Math.floor(Math.random() * 30) * 24 * 60 * 60 * 1000).toISOString()
        });
      }
      return reels;
    }
  },
  errorData: {
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    projects: [
      { 
        name: null, // NULL –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        userId: 1 
      },
      { 
        name: 'Project with invalid user',
        userId: 9999 // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      }
    ],
    competitors: [
      { 
        projectId: 9999, // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç
        username: 'competitor_for_nonexistent_project',
        instagramUrl: 'https://www.instagram.com/competitor_for_nonexistent_project'
      },
      { 
        projectId: 1,
        username: null, // NULL –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        instagramUrl: 'https://www.instagram.com/null_username'
      },
      { 
        projectId: 1,
        username: 'competitor_with_invalid_url',
        instagramUrl: 'not_a_valid_url' // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL
      }
    ],
    hashtags: [
      { 
        projectId: 9999, // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç
        name: 'hashtag_for_nonexistent_project'
      },
      { 
        projectId: 1,
        name: null // NULL –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
      }
    ],
    reels: [
      { 
        projectId: 9999, // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç
        sourceType: 'competitor',
        sourceId: 1,
        instagramId: 'reel_for_nonexistent_project',
        caption: 'Reel for nonexistent project',
        url: 'https://www.instagram.com/reel/reel_for_nonexistent_project',
        viewCount: 100000,
        likesCount: 5000,
        commentsCount: 200,
        publishedAt: new Date().toISOString()
      },
      { 
        projectId: 1,
        sourceType: 'competitor',
        sourceId: 9999, // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
        instagramId: 'reel_for_nonexistent_source',
        caption: 'Reel for nonexistent source',
        url: 'https://www.instagram.com/reel/reel_for_nonexistent_source',
        viewCount: 100000,
        likesCount: 5000,
        commentsCount: 200,
        publishedAt: new Date().toISOString()
      },
      { 
        projectId: 1,
        sourceType: 'invalid_source_type', // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        sourceId: 1,
        instagramId: 'reel_with_invalid_source_type',
        caption: 'Reel with invalid source type',
        url: 'https://www.instagram.com/reel/reel_with_invalid_source_type',
        viewCount: 100000,
        likesCount: 5000,
        commentsCount: 200,
        publishedAt: new Date().toISOString()
      },
      { 
        projectId: 1,
        sourceType: 'competitor',
        sourceId: 1,
        instagramId: null, // NULL –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        caption: 'Reel with null instagram_id',
        url: 'https://www.instagram.com/reel/null_instagram_id',
        viewCount: 100000,
        likesCount: 5000,
        commentsCount: 200,
        publishedAt: new Date().toISOString()
      },
      { 
        projectId: 1,
        sourceType: 'competitor',
        sourceId: 1,
        instagramId: 'reel_with_invalid_date',
        caption: 'Reel with invalid date',
        url: 'https://www.instagram.com/reel/reel_with_invalid_date',
        viewCount: 100000,
        likesCount: 5000,
        commentsCount: 200,
        publishedAt: 'not_a_valid_date' // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞
      }
    ]
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function log(message: string) {
  console.log(message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏
function generateEdgeCaseData(db: Database) {
  log('\nüîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏...');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏
  for (const project of config.edgeCases.projects) {
    try {
      db.prepare(
        'INSERT OR IGNORE INTO Projects (user_id, name) VALUES (?, ?)'
      ).run(project.userId, project.name);
      log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º —Å–ª—É—á–∞–µ–º: "${project.name.substring(0, 30)}${project.name.length > 30 ? '...' : ''}"`);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${error}`);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏
  for (const competitor of config.edgeCases.competitors) {
    try {
      db.prepare(
        'INSERT OR IGNORE INTO Competitors (project_id, username, instagram_url) VALUES (?, ?, ?)'
      ).run(competitor.projectId, competitor.username, competitor.instagramUrl);
      log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º —Å–ª—É—á–∞–µ–º: "${competitor.username.substring(0, 30)}${competitor.username.length > 30 ? '...' : ''}"`);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: ${error}`);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏
  for (const hashtag of config.edgeCases.hashtags) {
    try {
      db.prepare(
        'INSERT OR IGNORE INTO Hashtags (project_id, name) VALUES (?, ?)'
      ).run(hashtag.projectId, hashtag.name);
      log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ö–µ—à—Ç–µ–≥ —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º —Å–ª—É—á–∞–µ–º: "${hashtag.name.substring(0, 30)}${hashtag.name.length > 30 ? '...' : ''}"`);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞: ${error}`);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º Reels —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏
  for (const reel of config.edgeCases.reels) {
    try {
      db.prepare(
        'INSERT OR IGNORE INTO ReelsContent (project_id, source_type, source_id, instagram_id, caption, url, view_count, likes_count, comments_count, published_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
      ).run(
        reel.projectId, 
        reel.sourceType, 
        reel.sourceId, 
        reel.instagramId, 
        reel.caption, 
        reel.url, 
        reel.viewCount, 
        reel.likesCount, 
        reel.commentsCount, 
        reel.publishedAt
      );
      log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω Reel —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º —Å–ª—É—á–∞–µ–º: "${reel.instagramId.substring(0, 30)}${reel.instagramId.length > 30 ? '...' : ''}"`);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ Reel: ${error}`);
    }
  }
  
  log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function generatePerformanceData(db: Database) {
  log('\nüöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
  
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  let performanceProjectId: number;
  try {
    const result = db.prepare(
      'INSERT INTO Projects (user_id, name) VALUES (?, ?) RETURNING id'
    ).get(1, 'Performance Test Project');
    performanceProjectId = result.id;
    log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (ID: ${performanceProjectId})`);
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${error}`);
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  const competitorsCount = 50;
  const competitors = config.performanceData.generateCompetitors(competitorsCount, performanceProjectId);
  for (const competitor of competitors) {
    try {
      db.prepare(
        'INSERT INTO Competitors (project_id, username, instagram_url) VALUES (?, ?, ?)'
      ).run(competitor.projectId, competitor.username, competitor.instagramUrl);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: ${error}`);
    }
  }
  log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${competitorsCount} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–µ—à—Ç–µ–≥–æ–≤
  const hashtagsCount = 50;
  const hashtags = config.performanceData.generateHashtags(hashtagsCount, performanceProjectId);
  for (const hashtag of hashtags) {
    try {
      db.prepare(
        'INSERT INTO Hashtags (project_id, name) VALUES (?, ?)'
      ).run(hashtag.projectId, hashtag.name);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞: ${error}`);
    }
  }
  log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${hashtagsCount} —Ö–µ—à—Ç–µ–≥–æ–≤`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels
  const reelsCount = 200;
  const reels = config.performanceData.generateReels(reelsCount, performanceProjectId, 'competitor', 1);
  for (const reel of reels) {
    try {
      db.prepare(
        'INSERT INTO ReelsContent (project_id, source_type, source_id, instagram_id, caption, url, view_count, likes_count, comments_count, published_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
      ).run(
        reel.projectId, 
        reel.sourceType, 
        reel.sourceId, 
        reel.instagramId, 
        reel.caption, 
        reel.url, 
        reel.viewCount, 
        reel.likesCount, 
        reel.commentsCount, 
        reel.publishedAt
      );
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ Reel: ${error}`);
    }
  }
  log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${reelsCount} Reels`);
  
  log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
function generateErrorData(db: Database) {
  log('\n‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏
  for (const project of config.errorData.projects) {
    try {
      db.prepare(
        'INSERT OR IGNORE INTO Projects (user_id, name) VALUES (?, ?)'
      ).run(project.userId, project.name);
      log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç —Å –æ—à–∏–±–∫–æ–π: "${project.name}"`);
    } catch (error) {
      log(`‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${error}`);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
  for (const competitor of config.errorData.competitors) {
    try {
      db.prepare(
        'INSERT OR IGNORE INTO Competitors (project_id, username, instagram_url) VALUES (?, ?, ?)'
      ).run(competitor.projectId, competitor.username, competitor.instagramUrl);
      log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç —Å –æ—à–∏–±–∫–æ–π: "${competitor.username}"`);
    } catch (error) {
      log(`‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: ${error}`);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ —Å –æ—à–∏–±–∫–∞–º–∏
  for (const hashtag of config.errorData.hashtags) {
    try {
      db.prepare(
        'INSERT OR IGNORE INTO Hashtags (project_id, name) VALUES (?, ?)'
      ).run(hashtag.projectId, hashtag.name);
      log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ö–µ—à—Ç–µ–≥ —Å –æ—à–∏–±–∫–æ–π: "${hashtag.name}"`);
    } catch (error) {
      log(`‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞: ${error}`);
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º Reels —Å –æ—à–∏–±–∫–∞–º–∏
  for (const reel of config.errorData.reels) {
    try {
      db.prepare(
        'INSERT OR IGNORE INTO ReelsContent (project_id, source_type, source_id, instagram_id, caption, url, view_count, likes_count, comments_count, published_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
      ).run(
        reel.projectId, 
        reel.sourceType, 
        reel.sourceId, 
        reel.instagramId, 
        reel.caption, 
        reel.url, 
        reel.viewCount, 
        reel.likesCount, 
        reel.commentsCount, 
        reel.publishedAt
      );
      log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω Reel —Å –æ—à–∏–±–∫–æ–π: "${reel.instagramId}"`);
    } catch (error) {
      log(`‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ Reel: ${error}`);
    }
  }
  
  log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏ —Å–ª—É—á–∞—è–º–∏...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  if (!fs.existsSync(config.dbPath)) {
    console.error(`‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ ${config.dbPath}`);
    console.log('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã: bun run scripts/prepare-test-env.ts');
    process.exit(1);
  }
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const db = new Database(config.dbPath);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  if (generateEdgeCases) {
    generateEdgeCaseData(db);
  }
  
  if (generatePerformance) {
    generatePerformanceData(db);
  }
  
  if (generateErrors) {
    generateErrorData(db);
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  db.close();
  
  console.log('\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('\nüìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: bun run dev');
  console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
  console.log('3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —á–µ–∫-–ª–∏—Å—Ç–µ: docs/MVP_TESTING_CHECKLIST.md');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main();
