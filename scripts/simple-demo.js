#!/usr/bin/env node
/**
 * üß™ –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 * –ß–∏—Å—Ç—ã–π JavaScript –±–µ–∑ TypeScript
 */

const express = require("express");
const fs = require("fs").promises;
const path = require("path");

const app = express();
const PORT = 3001;

// Middleware
app.use(express.json());
app.use((req, res, next) => {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Content-Type");
  res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
  next();
});

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º Obsidian
const OBSIDIAN_PATH = path.join(process.cwd(), "oxygen-world", "Database");

// –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
let users = [
  {
    id: 1,
    firstName: "David",
    lastName: "Smith",
    username: "david_smith",
    email: "david@example.com",
    userRole: "player",
    currentRating: 2485,
    bonusPoints: 150,
    memberId: "OXY12345",
  },
  {
    id: 2,
    firstName: "Anna",
    lastName: "Johnson",
    username: "anna_johnson",
    email: "anna@example.com",
    userRole: "admin",
    currentRating: 2200,
    bonusPoints: 300,
    memberId: "OXY54321",
  },
];

/**
 * üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è markdown –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function generateUserMarkdown(user) {
  const roleEmojis = {
    player: "üéæ",
    admin: "üë®‚Äçüíº", 
    club_staff: "üë∑",
    trainer: "üéì"
  };
  
  const roleEmoji = roleEmojis[user.userRole] || "üë§";
  
  return `---
title: "${user.firstName} ${user.lastName}"
username: "${user.username}"
first_name: "${user.firstName}"
last_name: "${user.lastName}"
email: "${user.email}"
user_role: "${user.userRole}"
current_rating: ${user.currentRating || 0}
bonus_points: ${user.bonusPoints || 0}
member_id: "${user.memberId || ""}"
status: "active"
tags: [user, ${user.userRole}, simple_demo]
created_at: "${new Date().toISOString().split("T")[0]}"
sync_source: "simple_demo"
last_sync: "${new Date().toISOString()}"
---

# ${roleEmoji} ${user.firstName} ${user.lastName}

## –ü—Ä–æ—Ñ–∏–ª—å ${user.userRole === "admin" ? "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" : "–∏–≥—Ä–æ–∫–∞"}

- **–õ–æ–≥–∏–Ω**: \`= this.username\`
- **–†–µ–π—Ç–∏–Ω–≥**: \`= this.current_rating\` ‚≠ê
- **–†–æ–ª—å**: \`= this.user_role\`
- **–ë–æ–Ω—É—Å—ã**: \`= this.bonus_points\` –±–∞–ª–ª–æ–≤
- **Email**: \`= this.email\`

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- ID —É—á–∞—Å—Ç–Ω–∏–∫–∞: \`= this.member_id\`
- –°—Ç–∞—Ç—É—Å: \`= this.status\`
- –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: \`= this.last_sync\`

## üîó **–°–≤—è–∑–∏ –≤ "–í—Ç–æ—Ä–æ–º –ú–æ–∑–≥–µ"**

### üë• **–î—Ä—É–≥–∏–µ –ò–≥—Ä–æ–∫–∏**
- [[User-David-Smith-Demo|üë§ David Smith - –¢–æ–ø –∏–≥—Ä–æ–∫]]
- [[User-Anna-Johnson-Demo|üë§ Anna Johnson - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä]]

### üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞**
- [[üë• Users Demo - Simple Real-time|üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏]]

---

*üì° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Simple Demo*
*üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏*
*üèùÔ∏è Phangan Padel Tennis Club Member*`;
}

/**
 * üë§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Obsidian
 */
async function syncUserToObsidian(user) {
  try {
    const fileName = `User-${user.firstName}-${user.lastName}-Demo.md`;
    const filePath = path.join(OBSIDIAN_PATH, fileName);
    
    const content = generateUserMarkdown(user);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await fs.mkdir(OBSIDIAN_PATH, { recursive: true });
    
    await fs.writeFile(filePath, content, "utf8");
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${fileName}`);
    
    return { success: true, fileName };
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:`, error);
    throw error;
  }
}

/**
 * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
 */
async function updateSummaryTable() {
  try {
    const filePath = path.join(OBSIDIAN_PATH, "üë• Users Demo - Simple Real-time.md");
    
    const content = `---
title: "üë• Users Demo - Simple Real-time"
tags: [database, users, demo, simple]
last_sync: "${new Date().toISOString()}"
total_users: ${users.length}
---

# üë• Users Demo - Simple Real-time

> **üß™ –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏**  
> –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleString()}  
> –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **${users.length}**

## üìä –°–ø–∏—Å–æ–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

| üë§ –ò–º—è | üîë –õ–æ–≥–∏–Ω | üé≠ –†–æ–ª—å | ‚≠ê –†–µ–π—Ç–∏–Ω–≥ | üìß Email |
|--------|----------|---------|------------|----------|
${users.map(u => 
  `| [[User-${u.firstName}-${u.lastName}-Demo\\|${u.firstName} ${u.lastName}]] | ${u.username} | ${u.userRole} | ${u.currentRating || 0} | ${u.email} |`
).join('\n')}

## üîÑ API Endpoints (http://localhost:3001)

- **GET /users** - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- **POST /users** - –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- **POST /sync** - –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
- **POST /test-user** - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

\`\`\`bash
# –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
curl -X POST http://localhost:3001/test-user

# –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
curl -X POST http://localhost:3001/sync

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
curl http://localhost:3001/users
\`\`\`

## üéØ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç**

1. **API —Å–æ–∑–¥–∞–µ—Ç/–∏–∑–º–µ–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** ‚Üí –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏
2. **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è syncUserToObsidian()** ‚Üí –°–æ–∑–¥–∞–µ—Ç—Å—è .md —Ñ–∞–π–ª
3. **–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞** ‚Üí –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
4. **Obsidian –≤–∏–¥–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è** ‚Üí –§–∞–π–ª—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –≥—Ä–∞—Ñ–µ

### ‚úÖ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —ç—Ç–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:**
- **–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è** - –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–Ω—ã —Å—Ä–∞–∑—É
- **–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–≤—è–∑—å** - API ‚Üî Obsidian
- **–ü—Ä–æ—Å—Ç–æ—Ç–∞** - –º–∏–Ω–∏–º—É–º –∫–æ–¥–∞
- **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å** - –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã

---

*üß™ –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏*
*üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —á–µ—Ä–µ–∑ API*`;

    await fs.writeFile(filePath, content, "utf8");
    console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:", error);
  }
}

// API Routes

/**
 * üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 */
app.get("/", (req, res) => {
  res.json({
    name: "Simple Real-time Sync Demo",
    version: "1.0.0",
    description: "–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø—Ä–∏–º–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ API ‚Üî Obsidian",
    endpoints: {
      users: "GET /users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      createUser: "POST /users - –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      testUser: "POST /test-user - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 
      sync: "POST /sync - –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
    },
    obsidianPath: OBSIDIAN_PATH,
    usersCount: users.length,
    status: "üîÑ Ready for real-time sync testing!"
  });
});

/**
 * üìä –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
app.get("/users", (req, res) => {
  res.json({ 
    success: true, 
    data: users,
    count: users.length,
    message: "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω"
  });
});

/**
 * üß™ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
app.post("/test-user", async (req, res) => {
  try {
    const timestamp = Date.now();
    const testUser = {
      id: users.length + 1,
      firstName: "Test",
      lastName: `User${timestamp}`,
      username: `test_user_${timestamp}`,
      email: `test${timestamp}@example.com`,
      userRole: "player",
      currentRating: Math.floor(Math.random() * 1000) + 1000,
      bonusPoints: Math.floor(Math.random() * 100),
      memberId: `TEST${timestamp}`,
      createdAt: new Date().toISOString(),
    };
    
    users.push(testUser);
    console.log(`üß™ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.firstName} ${testUser.lastName}`);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Obsidian
    await syncUserToObsidian(testUser);
    await updateSummaryTable();
    
    res.json({ 
      success: true, 
      message: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Obsidian",
      data: testUser,
      obsidianFile: `User-${testUser.firstName}-${testUser.lastName}-Demo.md`
    });
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    res.status(500).json({ 
      success: false, 
      error: error.message || "Unknown error" 
    });
  }
});

/**
 * üîÑ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
app.post("/sync", async (req, res) => {
  try {
    console.log("üîÑ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
    
    for (const user of users) {
      await syncUserToObsidian(user);
    }
    
    await updateSummaryTable();
    
    res.json({ 
      success: true, 
      message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Obsidian`,
      count: users.length,
      obsidianPath: OBSIDIAN_PATH
    });
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
    res.status(500).json({ 
      success: false, 
      error: error.message || "Unknown error" 
    });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log("üöÄ Simple Real-time Sync Demo");
  console.log("=" .repeat(60));
  console.log(`üìç –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
  console.log(`üìÅ Obsidian –ø—É—Ç—å: ${OBSIDIAN_PATH}`);
  console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: ${users.length}`);
  console.log("");
  console.log("üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
  console.log(`   curl http://localhost:${PORT}`);
  console.log(`   curl http://localhost:${PORT}/users`);
  console.log(`   curl -X POST http://localhost:${PORT}/test-user`);
  console.log(`   curl -X POST http://localhost:${PORT}/sync`);
  console.log("");
  console.log("üîÑ –ì–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏!");
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  setTimeout(async () => {
    try {
      console.log("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...");
      for (const user of users) {
        await syncUserToObsidian(user);
      }
      await updateSummaryTable();
      console.log("‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
      console.log("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ oxygen-world/Database/");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
    }
  }, 1000);
});
