/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram –±–æ—Ç–æ–º
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram API,
 * –ø—Ä–æ–≤–µ—Ä—è—è —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
 */

import { Api, TelegramClient } from 'telegram';
import { StringSession } from 'telegram/sessions';
import * as dotenv from 'dotenv';
import { NewMessage } from 'telegram/events';
import { NewMessageEvent } from 'telegram/events/NewMessage';
import input from 'input';

dotenv.config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_ID = parseInt(process.env.TELEGRAM_API_ID || '0');
const API_HASH = process.env.TELEGRAM_API_HASH || '';
const BOT_USERNAME = process.env.BOT_USERNAME || 'dao999nft_dev_bot';
const SESSION_STRING = process.env.TELEGRAM_SESSION_STRING || '';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if (!API_ID || !API_HASH) {
  console.error('–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
const stringSession = new StringSession(SESSION_STRING);

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
const testScenarios = [
  {
    name: '–¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã"',
    steps: [
      { action: 'send', message: '/start', waitForResponse: true },
      { action: 'send', message: 'üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã', waitForResponse: true },
      { action: 'checkButton', button: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞' },
      { action: 'checkButton', button: '‚ùå –í—ã–π—Ç–∏' },
      { action: 'clickButton', button: '‚ùå –í—ã–π—Ç–∏', waitForResponse: true }
    ]
  },
  {
    name: '–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞',
    steps: [
      { action: 'send', message: 'üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã', waitForResponse: true },
      { action: 'clickButton', button: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞', waitForResponse: true },
      { action: 'send', message: 'https://www.instagram.com/example', waitForResponse: true },
      { action: 'checkButton', button: '–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ' },
      { action: 'checkButton', button: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' },
      { action: 'clickButton', button: '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç–∞–º', waitForResponse: true }
    ]
  }
];

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞...');
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
  const client = new TelegramClient(stringSession, API_ID, API_HASH, {
    connectionRetries: 5,
  });
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
  await client.start({
    phoneNumber: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: '),
    password: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: '),
    phoneCode: async () => await input.text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS: '),
    onError: (err) => console.log(err),
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  console.log('–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –≤ .env —Ñ–∞–π–ª –∫–∞–∫ TELEGRAM_SESSION_STRING:');
  console.log(client.session.save());
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
  const botEntity = await client.getEntity(BOT_USERNAME);
  console.log(`–ë–æ—Ç –Ω–∞–π–¥–µ–Ω: ${botEntity.username}`);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
  let lastBotMessage: any = null;
  let messagePromiseResolve: ((value: any) => void) | null = null;
  
  client.addEventHandler(async (event: NewMessageEvent) => {
    const message = event.message;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    if (message.peerId.userId === botEntity.id) {
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞: ${message.text}`);
      lastBotMessage = message;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –ø—Ä–æ–º–∏—Å, —Ä–∞–∑—Ä–µ—à–∞–µ–º –µ–≥–æ
      if (messagePromiseResolve) {
        messagePromiseResolve(message);
        messagePromiseResolve = null;
      }
    }
  }, new NewMessage({}));
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
  function waitForBotResponse(): Promise<any> {
    return new Promise((resolve) => {
      messagePromiseResolve = resolve;
      
      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç
      setTimeout(() => {
        if (messagePromiseResolve) {
          console.log('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞');
          messagePromiseResolve(null);
          messagePromiseResolve = null;
        }
      }, 10000);
    });
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É
  async function sendMessage(text: string, waitForResponse: boolean = false): Promise<any> {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É: ${text}`);
    await client.sendMessage(botEntity, { message: text });
    
    if (waitForResponse) {
      console.log('–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞...');
      return await waitForBotResponse();
    }
    
    return null;
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –±–æ—Ç–∞
  function checkButton(buttonText: string): boolean {
    if (!lastBotMessage || !lastBotMessage.replyMarkup) {
      console.log(`–ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: –Ω–µ—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫`);
      return false;
    }
    
    const rows = lastBotMessage.replyMarkup.rows;
    for (const row of rows) {
      for (const button of row.buttons) {
        if (button.text === buttonText) {
          console.log(`–ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–∞–π–¥–µ–Ω–∞`);
          return true;
        }
      }
    }
    
    console.log(`–ö–Ω–æ–ø–∫–∞ "${buttonText}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return false;
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
  async function clickButton(buttonText: string, waitForResponse: boolean = false): Promise<any> {
    if (!lastBotMessage || !lastBotMessage.replyMarkup) {
      console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "${buttonText}": –Ω–µ—Ç —Ä–∞–∑–º–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫`);
      return null;
    }
    
    const rows = lastBotMessage.replyMarkup.rows;
    for (const row of rows) {
      for (const button of row.buttons) {
        if (button.text === buttonText) {
          console.log(`–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "${buttonText}"`);
          await client.invoke({
            _: 'messages.getBotCallbackAnswer',
            peer: botEntity,
            msgId: lastBotMessage.id,
            data: button.data,
          });
          
          if (waitForResponse) {
            console.log('–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É...');
            return await waitForBotResponse();
          }
          
          return null;
        }
      }
    }
    
    console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "${buttonText}": –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    return null;
  }
  
  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
  for (const scenario of testScenarios) {
    console.log(`\n=== –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: ${scenario.name} ===`);
    
    for (const step of scenario.steps) {
      switch (step.action) {
        case 'send':
          await sendMessage(step.message, step.waitForResponse);
          break;
        case 'checkButton':
          checkButton(step.button);
          break;
        case 'clickButton':
          await clickButton(step.button, step.waitForResponse);
          break;
        default:
          console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${step.action}`);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log(`=== –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω: ${scenario.name} ===`);
  }
  
  console.log('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  
  // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
  await client.disconnect();
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(console.error);
