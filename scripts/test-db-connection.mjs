#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon Database
 */

import { Pool } from "pg";
import dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const DATABASE_URL = process.env.DATABASE_URL;

if (!DATABASE_URL) {
  console.log("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
  process.exit(1);
}

console.log("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database...");
console.log("üìç Host:", DATABASE_URL.split("@")[1]?.split("/")[0] || "Unknown");

const pool = new Pool({
  connectionString: DATABASE_URL,
  ssl: {
    rejectUnauthorized: false,
  },
});

try {
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const client = await pool.connect();

  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
  const result = await client.query(
    "SELECT NOW() as current_time, version() as db_version"
  );

  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database –£–°–ü–ï–®–ù–û!");
  console.log("üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ë–î:", result.rows[0].current_time);
  console.log("üìä –í–µ—Ä—Å–∏—è PostgreSQL:", result.rows[0].db_version.split(" ")[0]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
  const tables = await client.query(`
    SELECT table_name 
    FROM information_schema.tables 
    WHERE table_schema = 'public' 
    ORDER BY table_name
  `);

  console.log("üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –ë–î:", tables.rows.length);
  if (tables.rows.length > 0) {
    console.log(
      "üìÑ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã:",
      tables.rows
        .slice(0, 5)
        .map((r) => r.table_name)
        .join(", ")
    );
  }

  client.release();
} catch (error) {
  console.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon Database:");
  console.log("üîç –î–µ—Ç–∞–ª–∏:", error.message);

  if (error.code) {
    console.log("üìù –ö–æ–¥ –æ—à–∏–±–∫–∏:", error.code);
  }

  process.exit(1);
} finally {
  await pool.end();
}

console.log("ÔøΩÔøΩ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
