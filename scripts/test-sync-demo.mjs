#!/usr/bin/env node
/**
 * üß™ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Obsidian ‚ÜîÔ∏è Neon Database
 */

import { Pool } from "pg";
import fs from "fs/promises";
import path from "path";
import dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const DATABASE_URL = process.env.DATABASE_URL;
const OBSIDIAN_VAULT_PATH =
  process.env.OBSIDIAN_VAULT_PATH ||
  "/Users/playra/padle-world-club/oxygen-world";
const TEST_DATABASE_FOLDER = path.join(OBSIDIAN_VAULT_PATH, "Database");

class SyncTester {
  constructor() {
    this.pool = new Pool({
      connectionString: DATABASE_URL,
      ssl: { rejectUnauthorized: false },
    });
  }

  async createTestObsidianFile() {
    console.log("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ Obsidian...");

    const timestamp = new Date().toISOString();
    const testContent = `---
title: "üß™ TEST Sync Demo ${timestamp}"
type: database-test
table: "user"
sync_enabled: true
last_sync: "${timestamp}"
test_mode: true
---

# üß™ –¢–µ—Å—Ç –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

**–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:** ${new Date().toLocaleString()}

## üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

\`\`\`dataview
TABLE
  username as "üë§ –õ–æ–≥–∏–Ω",
  first_name as "üìù –ò–º—è", 
  last_name as "üìù –§–∞–º–∏–ª–∏—è",
  email as "üìß Email",
  user_role as "üé≠ –†–æ–ª—å",
  current_rating as "‚≠ê –†–µ–π—Ç–∏–Ω–≥",
  created_at as "üìÖ –°–æ–∑–¥–∞–Ω"
FROM "oxygen-world/Database"
WHERE contains(file.name, "user") 
SORT created_at DESC
LIMIT 5
\`\`\`

## üîÑ –¢–µ—Å—Ç –°—Ç–∞—Ç—É—Å

- ‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${timestamp}
- üîÑ –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...
- üìä –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤—ã—à–µ

## üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

1. **–ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª** - –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ
2. **–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª** (Cmd+S)  
3. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏** —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
4. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ë–î** —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∫—Ä–∏–ø—Ç

---

### üñäÔ∏è –ú–ï–°–¢–û –î–õ–Ø –í–ê–®–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô:

**–î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:**



---

*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏*
`;

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    await fs.mkdir(TEST_DATABASE_FOLDER, { recursive: true });

    const testFilePath = path.join(
      TEST_DATABASE_FOLDER,
      `üß™ Sync Test - ${Date.now()}.md`
    );
    await fs.writeFile(testFilePath, testContent, "utf8");

    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${testFilePath}`);
    return testFilePath;
  }

  async checkDatabaseData() {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Neon Database...");

    try {
      const client = await this.pool.connect();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResult = await client.query(`
        SELECT 
          username, 
          first_name, 
          last_name, 
          email, 
          user_role, 
          current_rating,
          created_at 
        FROM "user" 
        ORDER BY created_at DESC 
        LIMIT 5
      `);

      console.log("üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ë–î:");
      console.table(usersResult.rows);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsResult = await client.query(`
        SELECT 
          'users' as table_name,
          COUNT(*) as total_records
        FROM "user"
        UNION ALL
        SELECT 
          'bookings' as table_name,
          COUNT(*) as total_records  
        FROM "booking"
        UNION ALL
        SELECT 
          'payments' as table_name,
          COUNT(*) as total_records
        FROM "payment"
      `);

      console.log("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:");
      console.table(statsResult.rows);

      client.release();
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î:", error.message);
    }
  }

  async addTestUser() {
    console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...");

    try {
      const client = await this.pool.connect();

      const timestamp = new Date().toISOString();
      const testUser = {
        username: `test_user_${Date.now()}`,
        password_hash: "hashed_password_demo",
        first_name: "–¢–µ—Å—Ç",
        last_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        email: `test${Date.now()}@example.com`,
        member_id: `MEMBER_${Date.now()}`,
        user_role: "player",
      };

      const result = await client.query(
        `
        INSERT INTO "user" (
          username, password_hash, first_name, last_name, 
          email, member_id, user_role
        ) VALUES ($1, $2, $3, $4, $5, $6, $7)
        RETURNING id, username, first_name, last_name, email
      `,
        [
          testUser.username,
          testUser.password_hash,
          testUser.first_name,
          testUser.last_name,
          testUser.email,
          testUser.member_id,
          testUser.user_role,
        ]
      );

      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:");
      console.table(result.rows);

      client.release();
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error.message);
    }
  }

  async monitorFileChanges(filePath) {
    console.log(`üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞: ${path.basename(filePath)}`);
    console.log("üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Obsidian –∏ –≤–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!");
    console.log("üîÑ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n");

    let lastModified = 0;

    const checkFile = async () => {
      try {
        const stats = await fs.stat(filePath);
        const currentModified = stats.mtime.getTime();

        if (currentModified > lastModified) {
          lastModified = currentModified;
          console.log(`üìù –§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω –≤ ${new Date().toLocaleTimeString()}`);

          // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
          const content = await fs.readFile(filePath, "utf8");
          const lines = content.split("\n").length;
          console.log(`üìÑ –°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${lines}`);
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error.message);
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(checkFile, 2000);

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    checkFile();

    // Graceful shutdown
    process.on("SIGINT", () => {
      clearInterval(interval);
      console.log("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω");
      process.exit(0);
    });
  }

  async close() {
    await this.pool.end();
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function runDemo() {
  console.log("üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò OBSIDIAN ‚ÜîÔ∏è NEON DATABASE");
  console.log("=".repeat(60));

  const tester = new SyncTester();

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    await tester.checkDatabaseData();

    console.log("\n" + "=".repeat(60));

    // 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await tester.addTestUser();

    console.log("\n" + "=".repeat(60));

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ Obsidian
    const testFilePath = await tester.createTestObsidianFile();

    console.log("\n" + "=".repeat(60));
    console.log("üéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:");
    console.log("1. –û—Ç–∫—Ä–æ–π—Ç–µ Obsidian");
    console.log(`2. –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª: ${path.basename(testFilePath)}`);
    console.log("3. –í–Ω–µ—Å–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª '–ú–ï–°–¢–û –î–õ–Ø –í–ê–®–ò–• –ò–ó–ú–ï–ù–ï–ù–ò–ô'");
    console.log("4. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª (Cmd+S –∏–ª–∏ Ctrl+S)");
    console.log("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –¥—Ä—É–≥–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ");
    console.log("\nüîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞...");

    // 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    await tester.monitorFileChanges(testFilePath);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:", error.message);
  } finally {
    await tester.close();
  }
}

// –ó–∞–ø—É—Å–∫
runDemo();
