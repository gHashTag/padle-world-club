#!/usr/bin/env node

/**
 * üîÑ –ü–æ–ª–Ω–∞—è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –í—Å–µ—Ö –ú–æ–¥–µ–ª–µ–π –ë–î —Å Obsidian
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö 31 –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã
 */

import { Pool } from 'pg';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

dotenv.config();

const DATABASE_FOLDER = 'oxygen-world/Database';
const TECHNICAL_FOLDER = 'oxygen-world/Technical';

class CompleteDBSync {
  constructor() {
    this.pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: { rejectUnauthorized: false }
    });
    
    // üéØ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    this.missingTables = {
      // üéÆ Gaming Layer
      game_session: {
        icon: "üéÆ",
        displayName: "Game Sessions",
        filePrefix: "Game-Session",
        fields: ['id', 'court_id', 'host_user_id', 'game_type', 'status', 'max_players', 'current_players', 'start_time', 'end_time', 'created_at']
      },
      game_player: {
        icon: "üèì",
        displayName: "Game Players", 
        filePrefix: "Game-Player",
        fields: ['id', 'game_session_id', 'user_id', 'status', 'team_number', 'score', 'joined_at', 'created_at']
      },
      rating_change: {
        icon: "üìà",
        displayName: "Rating Changes",
        filePrefix: "Rating-Change", 
        fields: ['id', 'user_id', 'game_session_id', 'old_rating', 'new_rating', 'rating_change', 'reason', 'created_at']
      },
      
      // üèÜ Tournament Layer
      tournament: {
        icon: "üèÜ",
        displayName: "Tournaments",
        filePrefix: "Tournament",
        fields: ['id', 'name', 'venue_id', 'tournament_type', 'status', 'start_date', 'end_date', 'max_participants', 'entry_fee', 'prize_pool', 'created_at']
      },
      tournament_participant: {
        icon: "ü•á", 
        displayName: "Tournament Participants",
        filePrefix: "Tournament-Participant",
        fields: ['id', 'tournament_id', 'user_id', 'registration_date', 'status', 'seed_number', 'created_at']
      },
      tournament_team: {
        icon: "üë•",
        displayName: "Tournament Teams", 
        filePrefix: "Tournament-Team",
        fields: ['id', 'tournament_id', 'name', 'captain_user_id', 'status', 'created_at']
      },
      tournament_match: {
        icon: "‚öîÔ∏è",
        displayName: "Tournament Matches",
        filePrefix: "Tournament-Match", 
        fields: ['id', 'tournament_id', 'round', 'match_number', 'team1_id', 'team2_id', 'status', 'scheduled_time', 'actual_start_time', 'winner_team_id', 'score', 'created_at']
      },
      
      // üéì Education Layer
      class_participant: {
        icon: "üéì",
        displayName: "Class Participants",
        filePrefix: "Class-Participant",
        fields: ['id', 'class_schedule_id', 'user_id', 'enrollment_date', 'status', 'attendance_count', 'progress_notes', 'created_at']
      },
      training_package_definition: {
        icon: "üìã",
        displayName: "Training Package Definitions", 
        filePrefix: "Training-Package-Definition",
        fields: ['id', 'name', 'description', 'duration_weeks', 'sessions_per_week', 'price', 'skill_level', 'created_at']
      },
      user_training_package: {
        icon: "üéØ",
        displayName: "User Training Packages",
        filePrefix: "User-Training-Package", 
        fields: ['id', 'user_id', 'training_package_definition_id', 'start_date', 'end_date', 'status', 'sessions_completed', 'progress_percentage', 'created_at']
      },
      
      // ‚öôÔ∏è System Layer
      task: {
        icon: "üìã",
        displayName: "Tasks",
        filePrefix: "Task",
        fields: ['id', 'title', 'description', 'assigned_to_user_id', 'status', 'priority', 'due_date', 'venue_id', 'created_at', 'updated_at']
      },
      notification: {
        icon: "üîî",
        displayName: "Notifications", 
        filePrefix: "Notification",
        fields: ['id', 'user_id', 'type', 'title', 'message', 'is_read', 'action_url', 'created_at']
      },
      feedback: {
        icon: "üí≠",
        displayName: "Feedback",
        filePrefix: "Feedback",
        fields: ['id', 'user_id', 'feedback_type', 'rating', 'comment', 'related_entity_type', 'related_entity_id', 'created_at']
      }
    };
  }

  async syncAllMissingTables() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');
    console.log(`üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${Object.keys(this.missingTables).length}`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (const [tableName, config] of Object.entries(this.missingTables)) {
      try {
        console.log(`\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${config.icon} ${config.displayName}`);
        await this.syncTable(tableName, config);
        successCount++;
        console.log(`‚úÖ ${tableName}: –£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
      } catch (error) {
        errorCount++;
        console.error(`‚ùå ${tableName}: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:`, error.message);
      }
    }
    
    console.log(`\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${successCount}/${Object.keys(this.missingTables).length} (${Math.round(successCount/Object.keys(this.missingTables).length*100)}%)`);
  }

  async syncTable(tableName, config) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    const tableExists = await this.checkTableExists(tableName);
    if (!tableExists) {
      console.log(`‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î, —Å–æ–∑–¥–∞—é –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...`);
      await this.createDemoData(tableName, config);
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    const data = await this.getTableData(tableName, config.fields);
    
    if (data.length === 0) {
      console.log(`üìù –¢–∞–±–ª–∏—Ü–∞ ${tableName} –ø—É—Å—Ç–∞, —Å–æ–∑–¥–∞—é –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ...`);
      await this.createDemoData(tableName, config);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã Obsidian
    await this.createObsidianFiles(tableName, config, data);
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    await this.createSummaryFile(tableName, config, data);
  }

  async checkTableExists(tableName) {
    try {
      const result = await this.pool.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name = $1
        )
      `, [tableName]);
      
      return result.rows[0].exists;
    } catch (error) {
      return false;
    }
  }

  async getTableData(tableName, fields) {
    const fieldsList = fields.join(', ');
    const query = `
      SELECT ${fieldsList}
      FROM "${tableName}" 
      ORDER BY created_at DESC 
      LIMIT 20
    `;
    
    const result = await this.pool.query(query);
    return result.rows;
  }

  async createObsidianFiles(tableName, config, data) {
    await this.ensureDirectoryExists(DATABASE_FOLDER);
    
    for (const [index, row] of data.entries()) {
      const fileName = this.generateFileName(config, row, index);
      const content = this.generateFileContent(tableName, config, row);
      const filePath = path.join(DATABASE_FOLDER, fileName);
      
      await fs.writeFile(filePath, content, 'utf8');
    }
    
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–æ ${data.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è ${tableName}`);
  }

  async createDemoData(tableName, config) {
    console.log(`üé≠ –°–æ–∑–¥–∞—é –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è ${tableName}...`);
    
    const demoData = this.generateDemoData(tableName, config);
    await this.createObsidianFiles(tableName, config, demoData);
    await this.createSummaryFile(tableName, config, demoData);
  }

  generateDemoData(tableName, config) {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3-5 –¥–µ–º–æ-–∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    const demoData = [];
    const count = Math.floor(Math.random() * 3) + 3; // 3-5 –∑–∞–ø–∏—Å–µ–π
    
    for (let i = 0; i < count; i++) {
      const record = {
        id: `demo-${tableName}-${i + 1}`,
        created_at: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
        updated_at: new Date().toISOString()
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–±–ª–∏—Ü—ã
      switch (tableName) {
        case 'game_session':
          Object.assign(record, {
            court_id: 'demo-court-1',
            host_user_id: 'demo-user-1', 
            game_type: ['singles', 'doubles'][Math.floor(Math.random() * 2)],
            status: ['active', 'completed', 'cancelled'][Math.floor(Math.random() * 3)],
            max_players: 4,
            current_players: Math.floor(Math.random() * 4) + 1,
            start_time: new Date().toISOString(),
            end_time: new Date(Date.now() + 60 * 60 * 1000).toISOString()
          });
          break;
          
        case 'tournament':
          Object.assign(record, {
            name: `Tournament ${i + 1}`,
            venue_id: 'demo-venue-1',
            tournament_type: ['singles', 'doubles', 'mixed'][Math.floor(Math.random() * 3)],
            status: ['upcoming', 'active', 'completed'][Math.floor(Math.random() * 3)],
            start_date: new Date().toISOString(),
            end_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            max_participants: 16,
            entry_fee: 500,
            prize_pool: 5000
          });
          break;
          
        case 'task':
          Object.assign(record, {
            title: `Task ${i + 1}`,
            description: `Demo task description ${i + 1}`,
            assigned_to_user_id: 'demo-user-1',
            status: ['pending', 'in_progress', 'completed'][Math.floor(Math.random() * 3)],
            priority: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)],
            due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
            venue_id: 'demo-venue-1'
          });
          break;
          
        // –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        default:
          // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
          Object.assign(record, {
            name: `${config.displayName} ${i + 1}`,
            status: 'active'
          });
      }
      
      demoData.push(record);
    }
    
    return demoData;
  }

  generateFileName(config, row, index) {
    const name = row.name || row.title || `${config.displayName}-${index + 1}`;
    const cleanName = name.replace(/[^a-zA-Z0-9\s-]/g, '').replace(/\s+/g, '-');
    return `${config.filePrefix}-${cleanName}.md`;
  }

  generateFileContent(tableName, config, row) {
    const title = row.name || row.title || `${config.displayName} ${row.id}`;
    
    return `---
title: "${title}"
table_name: "${tableName}"
sync_source: "neon_database"
last_sync: "${new Date().toISOString()}"
neon_id: "${row.id}"
tags: [${tableName}, neon_schema, auto_generated]
created_at: "${row.created_at}"
---

# ${config.icon} ${title}

## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

${Object.entries(row).map(([key, value]) => 
  `- **${key}**: \`${value}\``
).join('\n')}

## üîó –°–≤—è–∑–∏ –≤ "–í—Ç–æ—Ä–æ–º –ú–æ–∑–≥–µ"

### üß† **–ú–æ–¥–µ–ª—å**
- [[Technical/üß† MODEL - ${config.displayName}|üß† ${config.displayName} Model]]

### üìä **–î–∞–Ω–Ω—ã–µ**
- [[${config.displayName}-Data|üìä –í—Å–µ ${config.displayName}]]

---

*üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å Neon Database*
*üß† –ß–∞—Å—Ç—å "–í—Ç–æ—Ä–æ–≥–æ –ú–æ–∑–≥–∞" –°–µ—Ä–≤–µ—Ä–∞*
*üèùÔ∏è Phangan Padel Tennis Club - Connected Intelligence*`;
  }

  async createSummaryFile(tableName, config, data) {
    const content = `---
title: "${config.displayName} Data"
table_name: "${tableName}"
sync_source: "neon_database"
last_sync: "${new Date().toISOString()}"
tags: [${tableName}, data, summary, neon_schema]
---

# ${config.icon} ${config.displayName} Data

## üìä –°–≤–æ–¥–∫–∞

- **–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π**: ${data.length}
- **–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è**: ${new Date().toLocaleString()}
- **–¢–∞–±–ª–∏—Ü–∞ –ë–î**: \`${tableName}\`

## üìã –í—Å–µ ${config.displayName}

${data.map((row, index) => {
  const name = row.name || row.title || `${config.displayName} ${index + 1}`;
  const fileName = this.generateFileName(config, row, index);
  return `- [[${fileName.replace('.md', '')}|${config.icon} ${name}]]`;
}).join('\n')}

## üîó –°–≤—è–∑–∏

### üß† **–ú–æ–¥–µ–ª—å**
- [[Technical/üß† MODEL - ${config.displayName}|üß† ${config.displayName} Model]]

### üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞**
- [[üè† MAIN DASHBOARD|üè† –ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥]]

---

*üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å Neon Database*
*üß† –ß–∞—Å—Ç—å "–í—Ç–æ—Ä–æ–≥–æ –ú–æ–∑–≥–∞" –°–µ—Ä–≤–µ—Ä–∞*`;

    const fileName = `${config.displayName.replace(/\s+/g, '-')}-Data.md`;
    const filePath = path.join(DATABASE_FOLDER, fileName);
    await fs.writeFile(filePath, content, 'utf8');
  }

  async ensureDirectoryExists(dirPath) {
    try {
      await fs.mkdir(dirPath, { recursive: true });
    } catch (error) {
      // –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
  }

  async close() {
    await this.pool.end();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async function main() {
  const sync = new CompleteDBSync();
  
  try {
    await sync.syncAllMissingTables();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await sync.close();
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export default CompleteDBSync;
