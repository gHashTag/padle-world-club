#!/usr/bin/env bun
/**
 * üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */

import { config } from "../src/config";

const API_BASE = "http://localhost:3000/api";

interface TestResult {
  success: boolean;
  message: string;
  data?: any;
  error?: string;
}

/**
 * üåê –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
 */
async function makeRequest(
  endpoint: string, 
  method: string = "GET", 
  body?: any
): Promise<TestResult> {
  try {
    const url = `${API_BASE}${endpoint}`;
    console.log(`üì° ${method} ${url}`);
    
    const response = await fetch(url, {
      method,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json",
      },
      body: body ? JSON.stringify(body) : undefined,
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      return {
        success: false,
        message: `HTTP ${response.status}: ${response.statusText}`,
        error: data.error || data.message,
      };
    }
    
    return {
      success: true,
      message: data.message || "Success",
      data,
    };
    
  } catch (error) {
    return {
      success: false,
      message: "Network error",
      error: error instanceof Error ? error.message : String(error),
    };
  }
}

/**
 * üß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API
 */
async function testApiHealth(): Promise<TestResult> {
  console.log("\nüß™ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API");
  return await makeRequest("/health");
}

/**
 * üß™ –¢–µ—Å—Ç 2: –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function testManualSync(): Promise<TestResult> {
  console.log("\nüß™ –¢–µ—Å—Ç 2: –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
  return await makeRequest("/obsidian-realtime/sync-users", "POST");
}

/**
 * üß™ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function testCreateUser(): Promise<TestResult> {
  console.log("\nüß™ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  return await makeRequest("/obsidian-realtime/test-create-user", "POST");
}

/**
 * üß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook endpoint
 */
async function testWebhook(): Promise<TestResult> {
  console.log("\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook endpoint");
  
  const webhookData = {
    table: "user",
    action: "INSERT",
    data: {
      id: 999,
      firstName: "Webhook",
      lastName: "Test",
      username: "webhook_test",
      email: "webhook@test.com",
      userRole: "player",
      currentRating: 1200,
    },
    timestamp: new Date().toISOString(),
  };
  
  return await makeRequest("/obsidian-realtime/webhook", "POST", webhookData);
}

/**
 * üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
 */
function displayResult(testName: string, result: TestResult) {
  const status = result.success ? "‚úÖ" : "‚ùå";
  console.log(`${status} ${testName}: ${result.message}`);
  
  if (result.data) {
    console.log(`   üìä –î–∞–Ω–Ω—ã–µ:`, JSON.stringify(result.data, null, 2));
  }
  
  if (result.error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞:`, result.error);
  }
}

/**
 * üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runTests() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
  console.log("=" .repeat(50));
  
  const tests = [
    { name: "API Health Check", fn: testApiHealth },
    { name: "Manual Sync", fn: testManualSync },
    { name: "Create Test User", fn: testCreateUser },
    { name: "Webhook Test", fn: testWebhook },
  ];
  
  let passed = 0;
  let failed = 0;
  
  for (const test of tests) {
    try {
      const result = await test.fn();
      displayResult(test.name, result);
      
      if (result.success) {
        passed++;
      } else {
        failed++;
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
    } catch (error) {
      console.log(`‚ùå ${test.name}: Unexpected error`);
      console.log(`   ‚ùå –û—à–∏–±–∫–∞:`, error);
      failed++;
    }
  }
  
  console.log("\n" + "=" .repeat(50));
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / (passed + failed)) * 100)}%`);
  
  if (failed === 0) {
    console.log("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!");
  } else {
    console.log("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.");
  }
}

/**
 * üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ Obsidian
 */
async function checkObsidianFiles() {
  console.log("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ Obsidian:");
  
  try {
    const fs = await import("fs/promises");
    const path = await import("path");
    
    const obsidianPath = path.join(process.cwd(), "oxygen-world", "Database");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
    try {
      await fs.access(obsidianPath);
      console.log(`‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${obsidianPath}`);
    } catch {
      console.log(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${obsidianPath}`);
      return;
    }
    
    // –ò—â–µ–º —Ñ–∞–π–ª—ã —Å real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
    const files = await fs.readdir(obsidianPath);
    const realtimeFiles = files.filter(f => 
      f.includes("Real-time") || f.includes("Test") || f.includes("Webhook")
    );
    
    if (realtimeFiles.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ —Å real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π: ${realtimeFiles.length}`);
      realtimeFiles.forEach(file => {
        console.log(`   üìÑ ${file}`);
      });
    } else {
      console.log(`‚ö†Ô∏è –§–∞–π–ª—ã —Å real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤:`, error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (import.meta.main) {
  console.log("üîÑ Real-time Sync Tester");
  console.log("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000");
  console.log("");
  
  runTests()
    .then(() => checkObsidianFiles())
    .then(() => {
      console.log("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
      process.exit(0);
    })
    .catch((error) => {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
}
