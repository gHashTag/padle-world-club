import { Scenes, Markup } from "telegraf";
import type { ScraperBotContext } from "@/types";
import { NeonAdapter } from "../adapters/neon-adapter";
import { ScraperSceneStep, ScraperSceneSessionData } from "@/types";
import { logger } from "../logger";

/**
 * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Å—Ü–µ–Ω—ã
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
function clearSessionState(ctx: ScraperBotContext, reason: string = "general"): void {
  if (ctx.scene.session) {
    logger.info(`[HashtagWizard] Clearing session state before leaving (reason: ${reason})`);
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ctx.scene.session.step = undefined;
    // –î–ª—è Wizard-—Å—Ü–µ–Ω
    if (ctx.wizard && ctx.wizard.state) {
      ctx.wizard.state = {};
    }
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param targetScene –¶–µ–ª–µ–≤–∞—è —Å—Ü–µ–Ω–∞
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
async function safeSceneTransition(
  ctx: ScraperBotContext,
  targetScene: string = "instagram_scraper_projects",
  reason: string = "general"
): Promise<void> {
  try {
    logger.info(`[HashtagWizard] Transitioning to ${targetScene} scene (reason: ${reason})`);
    await ctx.scene.enter(targetScene);
  } catch (error) {
    logger.error(`[HashtagWizard] Error entering ${targetScene} scene:`, error);
    await ctx.scene.leave();
  }
}

/**
 * Wizard-—Å—Ü–µ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
 */
export const hashtagWizardScene = new Scenes.WizardScene<ScraperBotContext>(
  "hashtag_wizard",
  
  // –®–∞–≥ 1: –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
  async (ctx) => {
    logger.info(`[HashtagWizard] –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã —Ö–µ—à—Ç–µ–≥–æ–≤`);
    logger.debug(`[HashtagWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);
    
    const adapter = ctx.storage as NeonAdapter;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ projectId –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ wizard –∏–ª–∏ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    let projectId = ctx.wizard.state.projectId;
    if (!projectId && ctx.scene.session && ctx.scene.session.projectId) {
      projectId = ctx.scene.session.projectId;
      ctx.wizard.state.projectId = projectId;
    }
    
    if (!projectId) {
      await ctx.reply(
        "–û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç."
      );
      clearSessionState(ctx, "missing_project_id");
      return ctx.scene.leave();
    }
    
    try {
      await adapter.initialize();
      const hashtags = await adapter.getHashtagsByProjectId(projectId);
      const projectName =
        (await adapter.getProjectById(projectId))?.name ||
        `–ü—Ä–æ–µ–∫—Ç ID ${projectId}`;
      
      ctx.wizard.state.projectName = projectName;
      
      if (!hashtags || hashtags.length === 0) {
        await ctx.reply(
          `–í –ø—Ä–æ–µ–∫—Ç–µ "${projectName}" –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π?`,
          {
            reply_markup: Markup.inlineKeyboard([
              [
                Markup.button.callback(
                  "–î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥",
                  `add_hashtag`
                ),
              ],
              [Markup.button.callback("–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `back_to_project`)],
            ]).reply_markup,
          }
        );
      } else {
        const hashtagList = hashtags
          .map((h, i) => `${i + 1}. #${h.hashtag}`)
          .join("\n");
        const hashtagButtons = hashtags.map((h) => [
          Markup.button.callback(
            `#${h.hashtag}`,
            `hashtag_${h.id}`
          ),
          Markup.button.callback(
            `üëÄ`,
            `view_reels_${h.id}`
          ),
          Markup.button.callback(
            `üóëÔ∏è`,
            `delete_hashtag_${h.hashtag}`
          ),
        ]);
        
        await ctx.reply(
          `–•–µ—à—Ç–µ–≥–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ "${projectName}":\n\n${hashtagList}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?`,
          {
            reply_markup: Markup.inlineKeyboard([
              ...hashtagButtons,
              [
                Markup.button.callback(
                  "–î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥",
                  `add_hashtag`
                ),
              ],
              [Markup.button.callback("–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `back_to_project`)],
            ]).reply_markup,
          }
        );
      }
    } catch (error) {
      logger.error(
        `[HashtagWizard] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`,
        error
      );
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      clearSessionState(ctx, "error_loading_hashtags");
      return ctx.scene.leave();
    } finally {
      if (adapter) {
        await adapter.close();
      }
    }
    
    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    return;
  },
  
  // –®–∞–≥ 2: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞
  async (ctx) => {
    logger.info(`[HashtagWizard] –®–∞–≥ 2: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞`);
    logger.debug(`[HashtagWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if (ctx.message && 'text' in ctx.message) {
      const adapter = ctx.storage as NeonAdapter;
      const projectId = ctx.wizard.state.projectId;
      let hashtagInput = ctx.message.text.trim();
      
      if (!projectId) {
        await ctx.reply("–û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
        clearSessionState(ctx, "missing_project_id_on_input");
        return ctx.scene.leave();
      }
      
      if (hashtagInput.startsWith("#")) {
        hashtagInput = hashtagInput.substring(1);
      }
      
      if (!hashtagInput || hashtagInput.includes(" ") || hashtagInput.length < 2) {
        await ctx.reply(
          "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–µ—à—Ç–µ–≥. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞), # —Å—Ç–∞–≤–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ."
        );
        return;
      }
      
      try {
        await adapter.initialize();
        const addedHashtag = await adapter.addHashtag(projectId, hashtagInput);
        if (addedHashtag) {
          await ctx.reply(`–•–µ—à—Ç–µ–≥ #${hashtagInput} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
        } else {
          await ctx.reply(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥ #${hashtagInput}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.`
          );
        }
      } catch (error) {
        logger.error(
          `[HashtagWizard] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞ ${hashtagInput} –≤ –ø—Ä–æ–µ–∫—Ç ${projectId}:`,
          error
        );
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞.");
      } finally {
        if (adapter) {
          await adapter.close();
        }
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ö–µ—à—Ç–µ–≥–æ–≤ (—à–∞–≥ 1)
        return ctx.wizard.selectStep(0);
      }
    } else {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–±–µ–∑ #):");
    }
    
    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    return;
  }
);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ü–µ–Ω—ã
hashtagWizardScene.action("add_hashtag", async (ctx) => {
  logger.info(`[HashtagWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'add_hashtag' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();
  
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–±–µ–∑ #):", {
    reply_markup: Markup.inlineKeyboard([
      [Markup.button.callback("–û—Ç–º–µ–Ω–∞", "cancel_hashtag_input")],
    ]).reply_markup,
  });
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–∞
  return ctx.wizard.next();
});

hashtagWizardScene.action("cancel_hashtag_input", async (ctx) => {
  logger.info(`[HashtagWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'cancel_hashtag_input' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.");
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ö–µ—à—Ç–µ–≥–æ–≤ (—à–∞–≥ 1)
  return ctx.wizard.selectStep(0);
});

hashtagWizardScene.action("back_to_project", async (ctx) => {
  logger.info(`[HashtagWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'back_to_project' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();
  await ctx.reply("–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–æ–º...");
  
  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
  clearSessionState(ctx, "back_to_project_clicked");
  await safeSceneTransition(ctx, "instagram_scraper_projects", "back_to_project_clicked");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–∞
hashtagWizardScene.action(/delete_hashtag_(.+)/, async (ctx) => {
  logger.info(`[HashtagWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'delete_hashtag' –≤—ã–∑–≤–∞–Ω`);
  const adapter = ctx.storage as NeonAdapter;
  const hashtag = ctx.match[1];
  const projectId = ctx.wizard.state.projectId;
  
  if (!projectId || !hashtag) {
    logger.warn(`[HashtagWizard] Invalid data for delete hashtag: projectId=${projectId}, hashtag=${hashtag}`);
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö");
    return;
  }
  
  try {
    await adapter.initialize();
    await adapter.removeHashtag(projectId, hashtag);
    await ctx.reply(`–•–µ—à—Ç–µ–≥ #${hashtag} —É–¥–∞–ª–µ–Ω.`);
    await ctx.answerCbQuery("–£–¥–∞–ª–µ–Ω–æ");
  } catch (error) {
    logger.error(
      `[HashtagWizard] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞ ${hashtag} –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`,
      error
    );
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞.");
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞");
  } finally {
    if (adapter) {
      await adapter.close();
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ö–µ—à—Ç–µ–≥–æ–≤ (—à–∞–≥ 1)
    return ctx.wizard.selectStep(0);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Reels —Ö–µ—à—Ç–µ–≥–∞
hashtagWizardScene.action(/view_reels_(\d+)/, async (ctx) => {
  logger.info(`[HashtagWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'view_reels' –≤—ã–∑–≤–∞–Ω`);
  const hashtagId = parseInt(ctx.match[1], 10);
  const projectId = ctx.wizard.state.projectId;
  
  if (isNaN(hashtagId) || !projectId) {
    logger.warn(`[HashtagWizard] Invalid data for view reels: projectId=${projectId}, hashtagId=${hashtagId}`);
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö");
    return;
  }
  
  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.currentSourceType = "hashtag";
  ctx.scene.session.currentSourceId = hashtagId;
  
  await ctx.answerCbQuery();
  
  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
  clearSessionState(ctx, "view_reels_clicked");
  await safeSceneTransition(ctx, "instagram_scraper_reels", "view_reels_clicked");
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /hashtags
export function setupHashtagWizard(bot: any) {
  bot.command('hashtags', async (ctx: any) => {
    await ctx.scene.enter('hashtag_wizard');
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–•—ç—à—Ç–µ–≥–∏" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
  bot.hears('#Ô∏è‚É£ –•—ç—à—Ç–µ–≥–∏', async (ctx: any) => {
    logger.info("[HashtagWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '#Ô∏è‚É£ –•—ç—à—Ç–µ–≥–∏' –≤—ã–∑–≤–∞–Ω");
    await ctx.scene.enter('hashtag_wizard');
  });
}

export default hashtagWizardScene;
