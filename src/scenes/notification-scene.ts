import { Scenes, Markup } from "telegraf";
import type { ScraperBotContext } from "../types";
import { ScraperSceneStep } from "../types";
import { logger } from "../logger";
import { NotificationSettings } from "../schemas";
import { registerButtons } from "../utils/button-handler";

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 */
export const notificationScene = new Scenes.BaseScene<ScraperBotContext>(
  "instagram_scraper_notifications"
);

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export async function handleNotificationEnter(ctx: ScraperBotContext): Promise<void> {
  logger.info("[NotificationScene] handleNotificationEnter triggered");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
  if (!ctx.from) {
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
    );
    return ctx.scene.leave();
  }

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await ctx.storage.getUserByTelegramId(ctx.from.id);

    if (!user) {
      await ctx.reply(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      );
      await ctx.storage.close();
      return ctx.scene.leave();
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let settings = await ctx.storage.getNotificationSettings(user.id);

    // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!settings) {
      settings = await ctx.storage.saveNotificationSettings({
        user_id: user.id,
        new_reels_enabled: true,
        trends_enabled: true,
        weekly_report_enabled: true,
        min_views_threshold: 1000,
        notification_time: "09:00",
        notification_days: [1, 2, 3, 4, 5, 6, 7],
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    let message = `üì¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n`;
    message += `üé¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö Reels: ${settings.new_reels_enabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}\n`;
    message += `üìà –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–¥–∞—Ö: ${settings.trends_enabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}\n`;
    message += `üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: ${settings.weekly_report_enabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}\n\n`;
    message += `üëÅÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${settings.min_views_threshold}\n`;
    message += `‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${settings.notification_time}\n`;
    message += `üìÖ –î–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${formatDays(settings.notification_days)}\n\n`;
    message += `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`;

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback(
          `${settings.new_reels_enabled ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å" : "üîî –í–∫–ª—é—á–∏—Ç—å"} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö Reels`,
          `toggle_new_reels_${settings.new_reels_enabled ? "off" : "on"}`
        ),
      ],
      [
        Markup.button.callback(
          `${settings.trends_enabled ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å" : "üîî –í–∫–ª—é—á–∏—Ç—å"} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–¥–∞—Ö`,
          `toggle_trends_${settings.trends_enabled ? "off" : "on"}`
        ),
      ],
      [
        Markup.button.callback(
          `${settings.weekly_report_enabled ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å" : "üîî –í–∫–ª—é—á–∏—Ç—å"} –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã`,
          `toggle_weekly_report_${settings.weekly_report_enabled ? "off" : "on"}`
        ),
      ],
      [
        Markup.button.callback(
          "üëÅÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
          "change_views_threshold"
        ),
      ],
      [
        Markup.button.callback(
          "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
          "change_notification_time"
        ),
      ],
      [
        Markup.button.callback(
          "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
          "change_notification_days"
        ),
      ],
      [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_menu")],
    ]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...keyboard,
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã
    ctx.scene.session.step = ScraperSceneStep.NOTIFICATION_SETTINGS;
  } catch (error) {
    logger.error("[NotificationScene] Error in handleNotificationEnter:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

notificationScene.enter(handleNotificationEnter);

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö Reels
 */
export async function handleToggleNewReelsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[NotificationScene] handleToggleNewReelsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const action = match[1]; // "on" –∏–ª–∏ "off"

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await ctx.storage.getUserByTelegramId(ctx.from?.id || 0);

    if (!user) {
      await ctx.reply(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      );
      await ctx.storage.close();
      return ctx.scene.leave();
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const settings = await ctx.storage.getNotificationSettings(user.id);

    if (!settings) {
      await ctx.reply(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
      );
      await ctx.storage.close();
      return ctx.scene.leave();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const updatedSettings = await ctx.storage.updateNotificationSettings(user.id, {
      new_reels_enabled: action === "on",
    });

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await ctx.answerCbQuery(
      `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö Reels ${action === "on" ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã"}`
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await handleNotificationEnter(ctx);
  } catch (error) {
    logger.error("[NotificationScene] Error in handleToggleNewReelsAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—Ä–µ–Ω–¥–∞—Ö
 */
export async function handleToggleTrendsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[NotificationScene] handleToggleTrendsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const action = match[1]; // "on" –∏–ª–∏ "off"

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await ctx.storage.getUserByTelegramId(ctx.from?.id || 0);

    if (!user) {
      await ctx.reply(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      );
      await ctx.storage.close();
      return ctx.scene.leave();
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const settings = await ctx.storage.getNotificationSettings(user.id);

    if (!settings) {
      await ctx.reply(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
      );
      await ctx.storage.close();
      return ctx.scene.leave();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const updatedSettings = await ctx.storage.updateNotificationSettings(user.id, {
      trends_enabled: action === "on",
    });

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await ctx.answerCbQuery(
      `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–¥–∞—Ö ${action === "on" ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã"}`
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await handleNotificationEnter(ctx);
  } catch (error) {
    logger.error("[NotificationScene] Error in handleToggleTrendsAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
 */
export async function handleToggleWeeklyReportAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[NotificationScene] handleToggleWeeklyReportAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const action = match[1]; // "on" –∏–ª–∏ "off"

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await ctx.storage.getUserByTelegramId(ctx.from?.id || 0);

    if (!user) {
      await ctx.reply(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      );
      await ctx.storage.close();
      return ctx.scene.leave();
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const settings = await ctx.storage.getNotificationSettings(user.id);

    if (!settings) {
      await ctx.reply(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
      );
      await ctx.storage.close();
      return ctx.scene.leave();
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const updatedSettings = await ctx.storage.updateNotificationSettings(user.id, {
      weekly_report_enabled: action === "on",
    });

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await ctx.answerCbQuery(
      `–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã ${action === "on" ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã"}`
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await handleNotificationEnter(ctx);
  } catch (error) {
    logger.error("[NotificationScene] Error in handleToggleWeeklyReportAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
 */
export async function handleBackToMenuAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[NotificationScene] handleBackToMenuAction triggered");

  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
  await ctx.answerCbQuery();

  // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
  await ctx.scene.leave();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
  await ctx.reply(
    "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    {
      reply_markup: {
        keyboard: [
          ["üìä –ü—Ä–æ–µ–∫—Ç—ã", "üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã"],
          ["#Ô∏è‚É£ –•—ç—à—Ç–µ–≥–∏", "üé¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥"],
          ["üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä Reels", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
          ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"],
        ],
        resize_keyboard: true,
      },
    }
  );
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
registerButtons(notificationScene, [
  {
    id: /toggle_new_reels_(on|off)/,
    handler: handleToggleNewReelsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö Reels. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /toggle_trends_(on|off)/,
    handler: handleToggleTrendsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—Ä–µ–Ω–¥–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /toggle_weekly_report_(on|off)/,
    handler: handleToggleWeeklyReportAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: "back_to_menu",
    handler: handleBackToMenuAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  }
]);

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param days –ú–∞—Å—Å–∏–≤ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (1-7, –≥–¥–µ 1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
 */
function formatDays(days: number[]): string {
  const dayNames = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"];

  if (days.length === 7) {
    return "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ";
  }

  if (days.length === 5 && days.includes(1) && days.includes(2) && days.includes(3) && days.includes(4) && days.includes(5)) {
    return "–ü–æ –±—É–¥–Ω—è–º";
  }

  if (days.length === 2 && days.includes(6) && days.includes(7)) {
    return "–ü–æ –≤—ã—Ö–æ–¥–Ω—ã–º";
  }

  return days.map(day => dayNames[day - 1]).join(", ");
}
