import { Scenes, Markup } from "telegraf";
import type { ScraperBotContext } from "../types";
import { ScraperSceneStep } from "../types";
import { logger } from "../logger";
import MockScraperService from "../services/mock-scraper-service";

/**
 * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Å—Ü–µ–Ω—ã
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
function clearSessionState(ctx: ScraperBotContext, reason: string = "general"): void {
  if (ctx.scene.session) {
    logger.info(`[ScrapingWizard] Clearing session state before leaving (reason: ${reason})`);
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ctx.scene.session.step = undefined;
    ctx.scene.session.currentProjectId = undefined;
    ctx.scene.session.currentSourceType = undefined;
    ctx.scene.session.currentSourceId = undefined;
    // –î–ª—è Wizard-—Å—Ü–µ–Ω
    if (ctx.wizard && ctx.wizard.state) {
      ctx.wizard.state = {};
    }
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param targetScene –¶–µ–ª–µ–≤–∞—è —Å—Ü–µ–Ω–∞
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
async function safeSceneTransition(
  ctx: ScraperBotContext,
  targetScene: string = "project_wizard",
  reason: string = "general"
): Promise<void> {
  try {
    logger.info(`[ScrapingWizard] Transitioning to ${targetScene} scene (reason: ${reason})`);
    await ctx.scene.enter(targetScene);
  } catch (error) {
    logger.error(`[ScrapingWizard] Error entering ${targetScene} scene:`, error);
    await ctx.scene.leave();
  }
}

/**
 * Wizard-—Å—Ü–µ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–æ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Instagram
 */
export const scrapingWizardScene = new Scenes.WizardScene<ScraperBotContext>(
  "scraping_wizard",

  // –®–∞–≥ 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
  async (ctx) => {
    logger.info(`[ScrapingWizard] –®–∞–≥ 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞`);
    logger.debug(`[ScrapingWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);

    if (!ctx.from) {
      logger.error("[ScrapingWizard] ctx.from is undefined");
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
      );
      clearSessionState(ctx, "missing_user");
      return ctx.scene.leave();
    }

    // –ü–æ–ª—É—á–∞–µ–º projectId –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏–∑ wizard.state
    let projectId = ctx.scene.session.currentProjectId;
    if (!projectId && ctx.wizard.state.projectId) {
      projectId = ctx.wizard.state.projectId;
    }

    if (!projectId) {
      logger.error("[ScrapingWizard] Project ID is undefined");
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞."
      );
      clearSessionState(ctx, "missing_project_id");
      await safeSceneTransition(ctx, "project_wizard", "missing_project_id");
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º projectId –≤ wizard.state –∏ –≤ session
    ctx.wizard.state.projectId = projectId;
    ctx.scene.session.currentProjectId = projectId;
    ctx.scene.session.step = ScraperSceneStep.SCRAPING_MENU;

    try {
      await ctx.storage.initialize();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
      const project = await ctx.storage.getProjectById(projectId);

      if (!project) {
        logger.error(`[ScrapingWizard] Project with ID ${projectId} not found`);
        await ctx.reply(
          "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
        );
        clearSessionState(ctx, "project_not_found");
        await safeSceneTransition(ctx, "project_wizard", "project_not_found");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ wizard.state
      ctx.wizard.state.projectName = project.name;

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      const competitors = await ctx.storage.getCompetitorAccounts(projectId, true);
      ctx.wizard.state.competitors = competitors;

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤
      const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);
      ctx.wizard.state.hashtags = hashtags;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = `üîç *–°–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n`;

      if (competitors.length === 0 && (!hashtags || hashtags.length === 0)) {
        message += "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.\n";
        message += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ö–µ—à—Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.";

        await ctx.reply(message, {
          parse_mode: "Markdown",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üë• –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", `add_competitors`)],
            [Markup.button.callback("üìä –î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", `add_hashtags`)],
            [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `back_to_project`)]
          ])
        });

        return;
      }

      message += "*–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:*\n\n";

      if (competitors.length > 0) {
        message += `üë• *–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (${competitors.length}):*\n`;
        competitors.slice(0, 5).forEach((competitor, index) => {
          message += `${index + 1}. ${competitor.username}\n`;
        });
        if (competitors.length > 5) {
          message += `...–∏ –µ—â–µ ${competitors.length - 5}\n`;
        }
        message += "\n";
      }

      if (hashtags && hashtags.length > 0) {
        message += `üìä *–•–µ—à—Ç–µ–≥–∏ (${hashtags.length}):*\n`;
        hashtags.slice(0, 5).forEach((hashtag, index) => {
          message += `${index + 1}. #${hashtag.hashtag}\n`;
        });
        if (hashtags.length > 5) {
          message += `...–∏ –µ—â–µ ${hashtags.length - 5}\n`;
        }
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
      const keyboard = [];

      if (competitors.length > 0) {
        keyboard.push([Markup.button.callback("üë• –°–∫—Ä–∞–ø–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", `scrape_competitors`)]);
      }

      if (hashtags && hashtags.length > 0) {
        keyboard.push([Markup.button.callback("üìä –°–∫—Ä–∞–ø–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", `scrape_hashtags`)]);
      }

      keyboard.push([Markup.button.callback("üîÑ –°–∫—Ä–∞–ø–∏—Ç—å –≤—Å—ë", `scrape_all`)]);
      keyboard.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `back_to_project`)]);

      await ctx.reply(message, {
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard(keyboard)
      });
    } catch (error) {
      logger.error("[ScrapingWizard] Error in step 1:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      );
      clearSessionState(ctx, "error_loading_data");
      return ctx.scene.leave();
    } finally {
      await ctx.storage.close();
    }

    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    return;
  },

  // –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
  async (ctx) => {
    logger.info(`[ScrapingWizard] –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞`);
    logger.debug(`[ScrapingWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);

    const { projectId, competitors } = ctx.wizard.state;

    if (!projectId) {
      logger.error("[ScrapingWizard] Project ID is undefined in step 2");
      await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
      clearSessionState(ctx, "missing_project_id_step_2");
      await safeSceneTransition(ctx, "project_wizard", "missing_project_id_step_2");
      return;
    }

    if (!competitors || competitors.length === 0) {
      logger.warn("[ScrapingWizard] No competitors found for project");
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.");
      return ctx.wizard.selectStep(0);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    let message = "üë• *–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:*\n\n";

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const keyboard = competitors.map((competitor) => [
      Markup.button.callback(
        competitor.username,
        `scrape_competitor_${competitor.id}`
      )
    ]);

    keyboard.push([Markup.button.callback("üîÑ –°–∫—Ä–∞–ø–∏—Ç—å –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", `scrape_all_competitors`)]);
    keyboard.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥", `back_to_menu`)]);

    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard(keyboard)
    });

    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    return;
  },

  // –®–∞–≥ 3: –í—ã–±–æ—Ä —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
  async (ctx) => {
    logger.info(`[ScrapingWizard] –®–∞–≥ 3: –í—ã–±–æ—Ä —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞`);
    logger.debug(`[ScrapingWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);

    const { projectId, hashtags } = ctx.wizard.state;

    if (!projectId) {
      logger.error("[ScrapingWizard] Project ID is undefined in step 3");
      await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
      clearSessionState(ctx, "missing_project_id_step_3");
      await safeSceneTransition(ctx, "project_wizard", "missing_project_id_step_3");
      return;
    }

    if (!hashtags || hashtags.length === 0) {
      logger.warn("[ScrapingWizard] No hashtags found for project");
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤.");
      return ctx.wizard.selectStep(0);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ö–µ—à—Ç–µ–≥–æ–≤
    let message = "üìä *–í—ã–±–µ—Ä–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:*\n\n";

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
    const keyboard = hashtags.map((hashtag) => [
      Markup.button.callback(
        `#${hashtag.hashtag}`,
        `scrape_hashtag_${hashtag.id}`
      )
    ]);

    keyboard.push([Markup.button.callback("üîÑ –°–∫—Ä–∞–ø–∏—Ç—å –≤—Å–µ —Ö–µ—à—Ç–µ–≥–∏", `scrape_all_hashtags`)]);
    keyboard.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥", `back_to_menu`)]);

    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard(keyboard)
    });

    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    return;
  }
);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ü–µ–Ω—ã
scrapingWizardScene.action("back_to_project", async (ctx) => {
  logger.info(`[ScrapingWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'back_to_project' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const projectId = ctx.wizard.state.projectId;

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
  clearSessionState(ctx, "back_to_project_clicked");
  await safeSceneTransition(ctx, "project_wizard", "back_to_project_clicked");
});

scrapingWizardScene.action("back_to_menu", async (ctx) => {
  logger.info(`[ScrapingWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'back_to_menu' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ (—à–∞–≥ 1)
  return ctx.wizard.selectStep(0);
});

scrapingWizardScene.action("add_competitors", async (ctx) => {
  logger.info(`[ScrapingWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'add_competitors' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const projectId = ctx.wizard.state.projectId;

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
  clearSessionState(ctx, "add_competitors_clicked");
  ctx.scene.session.currentProjectId = projectId;
  await safeSceneTransition(ctx, "competitor_wizard", "add_competitors_clicked");
});

scrapingWizardScene.action("add_hashtags", async (ctx) => {
  logger.info(`[ScrapingWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'add_hashtags' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const projectId = ctx.wizard.state.projectId;

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
  clearSessionState(ctx, "add_hashtags_clicked");
  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.projectId = projectId;
  await safeSceneTransition(ctx, "hashtag_wizard", "add_hashtags_clicked");
});

scrapingWizardScene.action("scrape_competitors", async (ctx) => {
  logger.info(`[ScrapingWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'scrape_competitors' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  return ctx.wizard.next();
});

scrapingWizardScene.action("scrape_hashtags", async (ctx) => {
  logger.info(`[ScrapingWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'scrape_hashtags' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤—ã–±–æ—Ä–∞ —Ö–µ—à—Ç–µ–≥–æ–≤ (—à–∞–≥ 3)
  return ctx.wizard.selectStep(2);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
scrapingWizardScene.action(/show_reels_(.+)_(.+)_(.+)/, async (ctx) => {
  logger.info(`[ScrapingWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'show_reels' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const projectId = ctx.wizard.state.projectId;
  const sourceType = ctx.match[1] as "competitor" | "hashtag";
  const sourceId = ctx.match[2];

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
  clearSessionState(ctx, "show_reels_clicked");
  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.currentSourceType = sourceType;
  ctx.scene.session.currentSourceId = sourceId;
  await safeSceneTransition(ctx, "reels_wizard", "show_reels_clicked");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞
scrapingWizardScene.action(/show_reels_project_(\d+)/, async (ctx) => {
  logger.info(`[ScrapingWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'show_reels_project' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const projectId = parseInt(ctx.match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[ScrapingWizard] Invalid project ID from action match");
    await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    return ctx.wizard.selectStep(0);
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
  clearSessionState(ctx, "show_reels_project_clicked");
  ctx.scene.session.currentProjectId = projectId;
  await safeSceneTransition(ctx, "reels_wizard", "show_reels_project_clicked");
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /scraping
export function setupScrapingWizard(bot: any) {
  bot.command('scraping', async (ctx: any) => {
    logger.info("[ScrapingWizard] Command /scraping triggered");
    await ctx.scene.enter('scraping_wizard');
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–∫—Ä–∞–ø–∏–Ω–≥" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
  bot.hears('üîç –°–∫—Ä–∞–ø–∏–Ω–≥', async (ctx: any) => {
    logger.info("[ScrapingWizard] Button 'üîç –°–∫—Ä–∞–ø–∏–Ω–≥' clicked");
    await ctx.scene.enter('scraping_wizard');
  });
}

export default scrapingWizardScene;
