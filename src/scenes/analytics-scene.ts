import { Scenes, Markup } from "telegraf";
import type { ScraperBotContext } from "../types";
import { ScraperSceneStep } from "../types";
import { logger } from "../logger";
import { ReelsFilter, ReelContent } from "../schemas";
import { formatDate, formatViews } from "./components/reels-keyboard";
import { registerButtons } from "../utils/button-handler";

/**
 * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Å—Ü–µ–Ω—ã
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
function clearSessionState(ctx: ScraperBotContext, reason: string = "general"): void {
  if (ctx.scene.session) {
    logger.info(`[AnalyticsScene] Clearing session state before leaving (reason: ${reason})`);
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ctx.scene.session.textReport = undefined;
    ctx.scene.session.csvReport = undefined;
    ctx.scene.session.currentProjectId = undefined;
    ctx.scene.session.step = undefined;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param targetScene –¶–µ–ª–µ–≤–∞—è —Å—Ü–µ–Ω–∞
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 * @param state –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É
 */
async function safeSceneTransition(
  ctx: ScraperBotContext,
  targetScene: string = "instagram_scraper_projects",
  reason: string = "general",
  state: Record<string, any> = {}
): Promise<void> {
  try {
    logger.info(`[AnalyticsScene] Transitioning to ${targetScene} scene (reason: ${reason})`);
    await ctx.scene.enter(targetScene, state);
  } catch (error) {
    logger.error(`[AnalyticsScene] Error entering ${targetScene} scene:`, error);
    await ctx.scene.leave();
  }
}

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Reels
 */
export const analyticsScene = new Scenes.BaseScene<ScraperBotContext>(
  "instagram_scraper_analytics"
);

// --- Enter Scene Handler ---
export async function handleAnalyticsEnter(ctx: ScraperBotContext): Promise<void> {
  logger.info("[AnalyticsScene] Enter handler triggered");

  if (!ctx.from) {
    logger.error("[AnalyticsScene] ctx.from is undefined");
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
    );

    // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
    clearSessionState(ctx, "missing_user");
    await safeSceneTransition(ctx, "instagram_scraper_projects", "missing_user");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º projectId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
  const state = ctx.scene.state as { projectId?: number };
  const projectId = state.projectId || ctx.scene.session.currentProjectId;

  if (!projectId) {
    logger.error("[AnalyticsScene] Project ID is undefined");
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞."
    );
    ctx.scene.enter("instagram_scraper_projects");
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–µ—Å—Å–∏–∏
  ctx.scene.session.currentProjectId = projectId;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã
  ctx.scene.session.step = ScraperSceneStep.REELS_ANALYTICS;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      logger.error(`[AnalyticsScene] Project with ID ${projectId} not found`);
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
      );
      ctx.scene.enter("instagram_scraper_projects");
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    let message = `üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n`;
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:";

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üìà –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞", `analytics_popularity_${projectId}`)],
        [Markup.button.callback("üîç –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ö–µ—à—Ç–µ–≥–æ–≤", `analytics_hashtags_${projectId}`)],
        [Markup.button.callback("üìä –¢—Ä–µ–Ω–¥—ã", `analytics_trends_${projectId}`)],
        [Markup.button.callback("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", `analytics_recommendations_${projectId}`)],
        [Markup.button.callback("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", `analytics_export_${projectId}`)],
        [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", `reels_list_${projectId}`)],
        [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)],
      ])
    });
  } catch (error) {
    logger.error("[AnalyticsScene] Error in enter handler:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );

    // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
    clearSessionState(ctx, "data_loading_error");
    await safeSceneTransition(ctx, "instagram_scraper_projects", "data_loading_error");
  } finally {
    await ctx.storage.close();
  }
}

analyticsScene.enter(handleAnalyticsEnter);

// --- Action Handlers ---

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export async function handlePopularityAnalyticsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[AnalyticsScene] handlePopularityAnalyticsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[AnalyticsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      logger.error(`[AnalyticsScene] Project with ID ${projectId} not found`);
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
      );
      ctx.scene.enter("instagram_scraper_projects");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Reels –ø—Ä–æ–µ–∫—Ç–∞
    const reels = await ctx.storage.getReels({ projectId });

    if (reels.length === 0) {
      await ctx.reply(
        `üìä *–ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Reels –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥.`,
        {
          parse_mode: "Markdown",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥", `scrape_project_${projectId}`)],
            [Markup.button.callback("üîô –ö –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", `analytics_menu_${projectId}`)],
            [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
          ])
        }
      );

      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const totalReels = reels.length;
    const totalViews = reels.reduce((sum, reel) => sum + (reel.views || 0), 0);
    const avgViews = totalViews / totalReels;
    const maxViews = Math.max(...reels.map(reel => reel.views || 0));
    const minViews = Math.min(...reels.filter(reel => reel.views !== undefined).map(reel => reel.views || 0));

    // –ù–∞—Ö–æ–¥–∏–º Reel —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const mostViewedReel = reels.find(reel => reel.views === maxViews);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    const reelsByDate: { [key: string]: number } = {};
    reels.forEach(reel => {
      const date = new Date(reel.published_at).toLocaleDateString("ru-RU");
      reelsByDate[date] = (reelsByDate[date] || 0) + 1;
    });

    // –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    let maxDate = "";
    let maxCount = 0;
    for (const [date, count] of Object.entries(reelsByDate)) {
      if (count > maxCount) {
        maxDate = date;
        maxCount = count;
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    const reelsByHour: { [key: number]: number } = {};
    reels.forEach(reel => {
      const hour = new Date(reel.published_at).getHours();
      reelsByHour[hour] = (reelsByHour[hour] || 0) + 1;
    });

    // –ù–∞—Ö–æ–¥–∏–º —á–∞—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    let maxHour = 0;
    let maxHourCount = 0;
    for (const [hour, count] of Object.entries(reelsByHour)) {
      if (count > maxHourCount) {
        maxHour = parseInt(hour);
        maxHourCount = count;
      }
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const reelsWithDuration = reels.filter(reel => reel.duration !== null && reel.duration !== undefined);
    const avgDuration = reelsWithDuration.length > 0
      ? reelsWithDuration.reduce((sum, reel) => sum + (reel.duration || 0), 0) / reelsWithDuration.length
      : 0;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    let message = `üìä *–ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n`;

    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `- –í—Å–µ–≥–æ Reels: *${totalReels}*\n`;
    message += `- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(totalViews)}*\n`;
    message += `- –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(Math.round(avgViews))}*\n`;
    message += `- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(maxViews)}*\n`;
    message += `- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(minViews)}*\n\n`;

    if (mostViewedReel) {
      message += `üîù *–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π Reel:*\n`;
      message += `- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: *${formatViews(mostViewedReel.views)}*\n`;
      message += `- –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: *${formatDate(mostViewedReel.published_at)}*\n`;
      message += `- –ê–≤—Ç–æ—Ä: *${mostViewedReel.author_username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}*\n`;
      message += `- –û–ø–∏—Å–∞–Ω–∏–µ: ${mostViewedReel.caption ? (mostViewedReel.caption.length > 50 ? mostViewedReel.caption.substring(0, 47) + "..." : mostViewedReel.caption) : "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n\n`;
    }

    message += `üìÖ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º:*\n`;
    message += `- –î–∞—Ç–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π: *${maxDate}* (${maxCount} Reels)\n\n`;

    message += `üïí *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n`;
    message += `- –°–∞–º–æ–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: *${maxHour}:00* (${maxHourCount} Reels)\n\n`;

    if (avgDuration > 0) {
      message += `‚è±Ô∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:*\n`;
      message += `- –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Reels: *${Math.round(avgDuration)} —Å–µ–∫.*\n\n`;
    }

    message += `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º Reel –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–ø–∏—Å–∫—É Reels.`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ö –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", `analytics_menu_${projectId}`)],
        [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", `reels_list_${projectId}`)],
        [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
      ])
    });

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[AnalyticsScene] Error in handlePopularityAnalyticsAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
export async function handleAnalyticsMenuAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[AnalyticsScene] handleAnalyticsMenuAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[AnalyticsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }

  ctx.scene.reenter();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ö–µ—à—Ç–µ–≥–æ–≤
export async function handleHashtagsAnalyticsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[AnalyticsScene] handleHashtagsAnalyticsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[AnalyticsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      logger.error(`[AnalyticsScene] Project with ID ${projectId} not found`);
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
      );
      ctx.scene.enter("instagram_scraper_projects");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏ –ø—Ä–æ–µ–∫—Ç–∞
    const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);

    if (hashtags.length === 0) {
      await ctx.reply(
        `üìä *–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –î–æ–±–∞–≤—å—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –≤ –ø—Ä–æ–µ–∫—Ç.`,
        {
          parse_mode: "Markdown",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", `hashtags_${projectId}`)],
            [Markup.button.callback("üîô –ö –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", `analytics_menu_${projectId}`)],
            [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
          ])
        }
      );

      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Reels –ø—Ä–æ–µ–∫—Ç–∞
    const reels = await ctx.storage.getReels({ projectId });

    if (reels.length === 0) {
      await ctx.reply(
        `üìä *–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Reels –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥.`,
        {
          parse_mode: "Markdown",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥", `scrape_project_${projectId}`)],
            [Markup.button.callback("üîô –ö –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", `analytics_menu_${projectId}`)],
            [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
          ])
        }
      );

      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º
    const hashtagStats: { [key: string]: { count: number; totalViews: number; avgViews: number } } = {};

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º Reels –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º
    for (const hashtag of hashtags) {
      const hashtagReels = reels.filter(reel =>
        reel.source_type === "hashtag" && reel.source_id === hashtag.id.toString()
      );

      if (hashtagReels.length > 0) {
        const totalViews = hashtagReels.reduce((sum, reel) => sum + (reel.views || 0), 0);
        const avgViews = totalViews / hashtagReels.length;

        hashtagStats[hashtag.tag_name] = {
          count: hashtagReels.length,
          totalViews,
          avgViews
        };
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ—à—Ç–µ–≥–∏ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const sortedHashtags = Object.entries(hashtagStats)
      .sort((a, b) => b[1].avgViews - a[1].avgViews);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    let message = `üìä *–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n`;

    if (sortedHashtags.length === 0) {
      message += "‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ö–µ—à—Ç–µ–≥–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥ –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º.";
    } else {
      message += `üìà *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ö–µ—à—Ç–µ–≥–æ–≤ (–ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤):*\n\n`;

      sortedHashtags.forEach(([tagName, stats], index) => {
        const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : `${index + 1}.`;
        message += `${medal} #${tagName}\n`;
        message += `   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels: *${stats.count}*\n`;
        message += `   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(Math.round(stats.avgViews))}*\n`;
        message += `   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(stats.totalViews)}*\n\n`;
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      message += `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n`;
      if (sortedHashtags.length > 0) {
        message += `- –ù–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Ö–µ—à—Ç–µ–≥: *#${sortedHashtags[0][0]}*\n`;
        message += `- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ö–µ—à—Ç–µ–≥ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—Ö–≤–∞—Ç–∞.\n\n`;
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ö –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", `analytics_menu_${projectId}`)],
        [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", `reels_list_${projectId}`)],
        [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
      ])
    });

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[AnalyticsScene] Error in handleHashtagsAnalyticsAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
export async function handleTrendsAnalyticsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[AnalyticsScene] handleTrendsAnalyticsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[AnalyticsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      logger.error(`[AnalyticsScene] Project with ID ${projectId} not found`);
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
      );
      ctx.scene.enter("instagram_scraper_projects");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Reels –ø—Ä–æ–µ–∫—Ç–∞
    const reels = await ctx.storage.getReels({ projectId });

    if (reels.length === 0) {
      await ctx.reply(
        `üìä *–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Reels –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥.`,
        {
          parse_mode: "Markdown",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥", `scrape_project_${projectId}`)],
            [Markup.button.callback("üîô –ö –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", `analytics_menu_${projectId}`)],
            [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
          ])
        }
      );

      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º Reels –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    const sortedReels = [...reels].sort((a, b) =>
      new Date(a.published_at).getTime() - new Date(b.published_at).getTime()
    );

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º Reels –ø–æ –Ω–µ–¥–µ–ª—è–º
    const weeklyStats: { [key: string]: { count: number; totalViews: number; avgViews: number } } = {};

    sortedReels.forEach(reel => {
      const date = new Date(reel.published_at);
      const weekStart = new Date(date);
      weekStart.setDate(date.getDate() - date.getDay());
      const weekKey = weekStart.toLocaleDateString("ru-RU");

      if (!weeklyStats[weekKey]) {
        weeklyStats[weekKey] = { count: 0, totalViews: 0, avgViews: 0 };
      }

      weeklyStats[weekKey].count += 1;
      weeklyStats[weekKey].totalViews += (reel.views || 0);
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–∏
    Object.keys(weeklyStats).forEach(week => {
      weeklyStats[week].avgViews = weeklyStats[week].totalViews / weeklyStats[week].count;
    });

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –ø–æ –º—É–∑—ã–∫–µ
    const musicStats: { [key: string]: number } = {};
    reels.forEach(reel => {
      if (reel.music_title) {
        musicStats[reel.music_title] = (musicStats[reel.music_title] || 0) + 1;
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º—É–∑—ã–∫—É –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    const sortedMusic = Object.entries(musicStats)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    let message = `üìä *–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º
    message += `üìà *–¢—Ä–µ–Ω–¥—ã –ø–æ –Ω–µ–¥–µ–ª—è–º:*\n\n`;

    const weeks = Object.keys(weeklyStats).sort((a, b) => {
      const dateA = new Date(a.split('.').reverse().join('-'));
      const dateB = new Date(b.split('.').reverse().join('-'));
      return dateA.getTime() - dateB.getTime();
    });

    if (weeks.length > 0) {
      weeks.forEach(week => {
        const stats = weeklyStats[week];
        message += `üìÖ –ù–µ–¥–µ–ª—è —Å ${week}:\n`;
        message += `   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels: *${stats.count}*\n`;
        message += `   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(Math.round(stats.avgViews))}*\n\n`;
      });

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
      const firstWeekAvg = weeklyStats[weeks[0]].avgViews;
      const lastWeekAvg = weeklyStats[weeks[weeks.length - 1]].avgViews;
      const trend = lastWeekAvg > firstWeekAvg ? "üìà –†–∞—Å—Ç—É—â–∏–π" : lastWeekAvg < firstWeekAvg ? "üìâ –ü–∞–¥–∞—é—â–∏–π" : "‚û°Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π";

      message += `*–û–±—â–∏–π —Ç—Ä–µ–Ω–¥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${trend}*\n\n`;
    } else {
      message += "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –Ω–µ–¥–µ–ª—è–º.\n\n";
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã –ø–æ –º—É–∑—ã–∫–µ
    if (sortedMusic.length > 0) {
      message += `üéµ *–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –º—É–∑—ã–∫–∞:*\n\n`;
      sortedMusic.forEach(([title, count], index) => {
        message += `${index + 1}. "${title}" - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ *${count}* Reels\n`;
      });
      message += "\n";
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ö –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", `analytics_menu_${projectId}`)],
        [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", `reels_list_${projectId}`)],
        [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
      ])
    });

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[AnalyticsScene] Error in handleTrendsAnalyticsAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

analyticsScene.action(/analytics_trends_(\d+)/, handleTrendsAnalyticsAction);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
export async function handleRecommendationsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[AnalyticsScene] handleRecommendationsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[AnalyticsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      logger.error(`[AnalyticsScene] Project with ID ${projectId} not found`);
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
      );
      ctx.scene.enter("instagram_scraper_projects");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Reels –ø—Ä–æ–µ–∫—Ç–∞
    const reels = await ctx.storage.getReels({ projectId });

    if (reels.length === 0) {
      await ctx.reply(
        `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Reels –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥.`,
        {
          parse_mode: "Markdown",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥", `scrape_project_${projectId}`)],
            [Markup.button.callback("üîô –ö –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", `analytics_menu_${projectId}`)],
            [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
          ])
        }
      );

      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

    // 1. –ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    const reelsByHour: { [key: number]: { count: number; totalViews: number; avgViews: number } } = {};
    reels.forEach(reel => {
      const hour = new Date(reel.published_at).getHours();
      if (!reelsByHour[hour]) {
        reelsByHour[hour] = { count: 0, totalViews: 0, avgViews: 0 };
      }
      reelsByHour[hour].count += 1;
      reelsByHour[hour].totalViews += (reel.views || 0);
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
    Object.keys(reelsByHour).forEach(hour => {
      const hourNum = parseInt(hour);
      reelsByHour[hourNum].avgViews = reelsByHour[hourNum].totalViews / reelsByHour[hourNum].count;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const sortedHours = Object.entries(reelsByHour)
      .sort((a, b) => b[1].avgViews - a[1].avgViews)
      .slice(0, 3);

    // 2. –ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const reelsWithDuration = reels.filter(reel => reel.duration !== null && reel.duration !== undefined);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º Reels –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const durationRanges: { [key: string]: { count: number; totalViews: number; avgViews: number } } = {
      "0-15": { count: 0, totalViews: 0, avgViews: 0 },
      "16-30": { count: 0, totalViews: 0, avgViews: 0 },
      "31-60": { count: 0, totalViews: 0, avgViews: 0 },
      "60+": { count: 0, totalViews: 0, avgViews: 0 }
    };

    reelsWithDuration.forEach(reel => {
      const duration = reel.duration || 0;
      let range = "60+";

      if (duration <= 15) range = "0-15";
      else if (duration <= 30) range = "16-30";
      else if (duration <= 60) range = "31-60";

      durationRanges[range].count += 1;
      durationRanges[range].totalViews += (reel.views || 0);
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    Object.keys(durationRanges).forEach(range => {
      if (durationRanges[range].count > 0) {
        durationRanges[range].avgViews = durationRanges[range].totalViews / durationRanges[range].count;
      }
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const sortedDurations = Object.entries(durationRanges)
      .filter(([_, stats]) => stats.count > 0)
      .sort((a, b) => b[1].avgViews - a[1].avgViews);

    // 3. –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –º—É–∑—ã–∫–∏
    const musicStats: { [key: string]: { count: number; totalViews: number; avgViews: number } } = {};
    reels.forEach(reel => {
      if (reel.music_title) {
        if (!musicStats[reel.music_title]) {
          musicStats[reel.music_title] = { count: 0, totalViews: 0, avgViews: 0 };
        }
        musicStats[reel.music_title].count += 1;
        musicStats[reel.music_title].totalViews += (reel.views || 0);
      }
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º—É–∑—ã–∫–∏
    Object.keys(musicStats).forEach(music => {
      musicStats[music].avgViews = musicStats[music].totalViews / musicStats[music].count;
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º—É–∑—ã–∫—É –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const sortedMusic = Object.entries(musicStats)
      .filter(([_, stats]) => stats.count > 1) // –¢–æ–ª—å–∫–æ –º—É–∑—ã–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞
      .sort((a, b) => b[1].avgViews - a[1].avgViews)
      .slice(0, 3);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    let message = `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n`;

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    message += `‚è∞ *–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:*\n\n`;

    if (sortedHours.length > 0) {
      sortedHours.forEach(([hour, stats], index) => {
        message += `${index + 1}. *${hour}:00 - ${parseInt(hour) + 1}:00*\n`;
        message += `   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(Math.round(stats.avgViews))}*\n`;
        message += `   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels: *${stats.count}*\n\n`;
      });

      message += `üëâ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å Reels –≤ –ø–µ—Ä–∏–æ–¥ *${sortedHours[0][0]}:00 - ${parseInt(sortedHours[0][0]) + 1}:00*\n\n`;
    } else {
      message += "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\n";
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    message += `‚è±Ô∏è *–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Reels:*\n\n`;

    if (sortedDurations.length > 0) {
      sortedDurations.forEach(([range, stats], index) => {
        message += `${index + 1}. *${range} —Å–µ–∫—É–Ω–¥*\n`;
        message += `   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(Math.round(stats.avgViews))}*\n`;
        message += `   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels: *${stats.count}*\n\n`;
      });

      message += `üëâ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å Reels –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é *${sortedDurations[0][0]} —Å–µ–∫—É–Ω–¥*\n\n`;
    } else {
      message += "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n";
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º—É–∑—ã–∫–µ
    message += `üéµ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º—É–∑—ã–∫–∞:*\n\n`;

    if (sortedMusic.length > 0) {
      sortedMusic.forEach(([title, stats], index) => {
        message += `${index + 1}. "${title}"\n`;
        message += `   - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(Math.round(stats.avgViews))}*\n`;
        message += `   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ *${stats.count}* Reels\n\n`;
      });

      message += `üëâ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É "${sortedMusic[0][0]}"\n\n`;
    } else {
      message += "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –º—É–∑—ã–∫–∏.\n\n";
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    message += `üìù *–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n\n`;
    message += `1. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—É–±–ª–∏–∫—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n`;
    message += `2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –ø–æ –≤–∞—à–µ–π —Ç–µ–º–∞—Ç–∏–∫–µ\n`;
    message += `3. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n`;
    message += `4. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç\n`;
    message += `5. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∏ —Ç–µ–º–∞–º–∏\n\n`;

    message += `–î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ö –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", `analytics_menu_${projectId}`)],
        [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", `reels_list_${projectId}`)],
        [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
      ])
    });

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[AnalyticsScene] Error in handleRecommendationsAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞
export async function handleExportAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[AnalyticsScene] handleExportAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[AnalyticsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      logger.error(`[AnalyticsScene] Project with ID ${projectId} not found`);
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
      );
      ctx.scene.enter("instagram_scraper_projects");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Reels –ø—Ä–æ–µ–∫—Ç–∞
    const reels = await ctx.storage.getReels({ projectId });

    if (reels.length === 0) {
      await ctx.reply(
        `üìÑ *–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Reels –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥.`,
        {
          parse_mode: "Markdown",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥", `scrape_project_${projectId}`)],
            [Markup.button.callback("üîô –ö –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", `analytics_menu_${projectId}`)],
            [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
          ])
        }
      );

      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º CSV-–æ—Ç—á–µ—Ç
    let csvContent = "ID,URL,–ê–≤—Ç–æ—Ä,–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏,–ü—Ä–æ—Å–º–æ—Ç—Ä—ã,–õ–∞–π–∫–∏,–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏,–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å,–ú—É–∑—ã–∫–∞\n";

    reels.forEach(reel => {
      const row = [
        reel.instagram_id,
        reel.url,
        reel.author_username || "",
        new Date(reel.published_at).toLocaleDateString("ru-RU"),
        reel.views || 0,
        reel.likes || 0,
        reel.comments_count || 0,
        reel.duration || "",
        reel.music_title || ""
      ];

      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏
      const escapedRow = row.map(cell => {
        const cellStr = String(cell);
        return cellStr.includes(",") || cellStr.includes('"')
          ? `"${cellStr.replace(/"/g, '""')}"`
          : cellStr;
      });

      csvContent += escapedRow.join(",") + "\n";
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    let textReport = `üìä –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–ï–¢ –ü–û –ü–†–û–ï–ö–¢–£ "${project.name.toUpperCase()}"\n`;
    textReport += `–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleDateString("ru-RU")}\n\n`;

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalReels = reels.length;
    const totalViews = reels.reduce((sum, reel) => sum + (reel.views || 0), 0);
    const avgViews = totalViews / totalReels;

    textReport += `–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`;
    textReport += `- –í—Å–µ–≥–æ Reels: ${totalReels}\n`;
    textReport += `- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${formatViews(totalViews)}\n`;
    textReport += `- –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${formatViews(Math.round(avgViews))}\n\n`;

    // –¢–æ–ø-5 Reels –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
    const topReels = [...reels]
      .sort((a, b) => (b.views || 0) - (a.views || 0))
      .slice(0, 5);

    textReport += `–¢–û–ü-5 REELS –ü–û –ü–†–û–°–ú–û–¢–†–ê–ú:\n`;
    topReels.forEach((reel, index) => {
      textReport += `${index + 1}. ID: ${reel.instagram_id}\n`;
      textReport += `   –ê–≤—Ç–æ—Ä: ${reel.author_username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n`;
      textReport += `   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${formatViews(reel.views || 0)}\n`;
      textReport += `   –î–∞—Ç–∞: ${new Date(reel.published_at).toLocaleDateString("ru-RU")}\n`;
      textReport += `   URL: ${reel.url}\n\n`;
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    await ctx.reply(
      `üìÑ *–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:`,
      {
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard([
          [Markup.button.callback("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç", `export_text_${projectId}`)],
          [Markup.button.callback("üìä CSV-–æ—Ç—á–µ—Ç", `export_csv_${projectId}`)],
          [Markup.button.callback("üîô –ö –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", `analytics_menu_${projectId}`)],
          [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
        ])
      }
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç—ã –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    ctx.scene.session.textReport = textReport;
    ctx.scene.session.csvReport = csvContent;

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[AnalyticsScene] Error in handleExportAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
export async function handleExportTextAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[AnalyticsScene] handleExportTextAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[AnalyticsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∏–∑ —Å–µ—Å—Å–∏–∏
  const textReport = ctx.scene.session.textReport;

  if (!textReport) {
    logger.warn("[AnalyticsScene] Text report not found in session");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ.");
    ctx.scene.reenter();
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
  await ctx.reply(textReport);

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery("–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV-–æ—Ç—á–µ—Ç–∞
export async function handleExportCsvAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[AnalyticsScene] handleExportCsvAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[AnalyticsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º CSV-–æ—Ç—á–µ—Ç –∏–∑ —Å–µ—Å—Å–∏–∏
  const csvReport = ctx.scene.session.csvReport;

  if (!csvReport) {
    logger.warn("[AnalyticsScene] CSV report not found in session");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ.");
    ctx.scene.reenter();
    return;
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    await ctx.storage.initialize();
    const project = await ctx.storage.getProjectById(projectId);
    await ctx.storage.close();

    const projectName = project ? project.name : `project_${projectId}`;
    const fileName = `reels_report_${projectName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.csv`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV-—Ñ–∞–π–ª
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É CSV –≤ –±—É—Ñ–µ—Ä
    const buffer = Buffer.from(csvReport, 'utf-8');

    await ctx.replyWithDocument({
      source: buffer,
      filename: fileName
    });

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery("CSV-–æ—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω");
    }
  } catch (error) {
    logger.error("[AnalyticsScene] Error in handleExportCsvAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ CSV-–æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
export async function handleBackToProjectAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[AnalyticsScene] handleBackToProjectAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[AnalyticsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
  clearSessionState(ctx, "back_to_project_clicked");
  await safeSceneTransition(ctx, "instagram_scraper_projects", "back_to_project_clicked", { projectId });
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
registerButtons(analyticsScene, [
  {
    id: /analytics_popularity_(\d+)/,
    handler: handlePopularityAnalyticsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /analytics_menu_(\d+)/,
    handler: handleAnalyticsMenuAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /analytics_hashtags_(\d+)/,
    handler: handleHashtagsAnalyticsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ö–µ—à—Ç–µ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /analytics_trends_(\d+)/,
    handler: handleTrendsAnalyticsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç—Ä–µ–Ω–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /analytics_recommendations_(\d+)/,
    handler: handleRecommendationsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /analytics_export_(\d+)/,
    handler: handleExportAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /export_text_(\d+)/,
    handler: handleExportTextAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /export_csv_(\d+)/,
    handler: handleExportCsvAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ CSV-–æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /project_(\d+)/,
    handler: handleBackToProjectAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ–µ–∫—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /reels_list_(\d+)/,
    handler: async (ctx) => {
      const match = ctx.match as unknown as RegExpExecArray;
      const projectId = parseInt(match[1], 10);
      if (ctx.callbackQuery) {
        await ctx.answerCbQuery().catch(() => {});
      }

      // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
      clearSessionState(ctx, "back_to_reels_list_clicked");
      await safeSceneTransition(ctx, "instagram_scraper_reels", "back_to_reels_list_clicked", { projectId });
    },
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É Reels. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  }
]);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
export default analyticsScene;
