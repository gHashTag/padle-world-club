import { Scenes, Markup } from "telegraf";
import type { ScraperBotContext } from "../types";
import { ScraperSceneStep } from "../types";
import { logger } from "../logger";
import { EmbeddingsService } from "../services/embeddings-service";
import { ChatbotService } from "../services/chatbot-service";
import { StorageAdapter } from "../types";

/**
 * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Å—Ü–µ–Ω—ã
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
function clearSessionState(ctx: ScraperBotContext, reason: string = "general"): void {
  if (ctx.scene.session) {
    logger.info(`[ChatbotWizard] Clearing session state before leaving (reason: ${reason})`);
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ctx.scene.session.step = undefined;
    ctx.scene.session.currentReelId = undefined;
    // –î–ª—è Wizard-—Å—Ü–µ–Ω
    if (ctx.wizard && ctx.wizard.state) {
      ctx.wizard.state = {};
    }
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param targetScene –¶–µ–ª–µ–≤–∞—è —Å—Ü–µ–Ω–∞
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
async function safeSceneTransition(
  ctx: ScraperBotContext,
  targetScene: string = "reels_wizard",
  reason: string = "general"
): Promise<void> {
  try {
    logger.info(`[ChatbotWizard] Transitioning to ${targetScene} scene (reason: ${reason})`);
    await ctx.scene.enter(targetScene);
  } catch (error) {
    logger.error(`[ChatbotWizard] Error entering ${targetScene} scene:`, error);
    await ctx.scene.leave();
  }
}

/**
 * Wizard-—Å—Ü–µ–Ω–∞ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏ –≤–∏–¥–µ–æ
 */
export class ChatbotWizardScene extends Scenes.WizardScene<ScraperBotContext> {
  private embeddingsService: EmbeddingsService;
  private chatbotService: ChatbotService;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ü–µ–Ω—ã
   * @param storage –ê–¥–∞–ø—Ç–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   * @param apiKey API –∫–ª—é—á OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  constructor(storage: StorageAdapter, apiKey?: string) {
    super(
      "chatbot_wizard",
      
      // –®–∞–≥ 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏
      async (ctx) => {
        logger.info(`[ChatbotWizard] –®–∞–≥ 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏`);
        logger.debug(`[ChatbotWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);
        
        if (!ctx.from) {
          logger.error("[ChatbotWizard] ctx.from is undefined");
          await ctx.reply(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
          );
          clearSessionState(ctx, "missing_user");
          return ctx.scene.leave();
        }

        // –ü–æ–ª—É—á–∞–µ–º projectId –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏–∑ wizard.state
        let projectId = ctx.scene.session.currentProjectId;
        if (!projectId && ctx.wizard.state.projectId) {
          projectId = ctx.wizard.state.projectId;
        }

        if (!projectId) {
          logger.error("[ChatbotWizard] Project ID is undefined");
          await ctx.reply(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞."
          );
          clearSessionState(ctx, "missing_project_id");
          await safeSceneTransition(ctx, "project_wizard", "missing_project_id");
          return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º projectId –≤ wizard.state –∏ –≤ —Å–µ—Å—Å–∏–∏
        ctx.wizard.state.projectId = projectId;
        ctx.scene.session.currentProjectId = projectId;

        // –ü–æ–ª—É—á–∞–µ–º reelId –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏–∑ wizard.state
        let reelId = ctx.scene.session.currentReelId;
        if (!reelId && ctx.wizard.state.reelId) {
          reelId = ctx.wizard.state.reelId;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å ID Reel, –Ω–∞—á–∏–Ω–∞–µ–º —á–∞—Ç —Å —ç—Ç–∏–º Reel
        if (reelId) {
          ctx.wizard.state.reelId = reelId;
          ctx.scene.session.currentReelId = reelId;
          return ctx.wizard.selectStep(1);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã
        ctx.scene.session.step = ScraperSceneStep.CHATBOT_REELS_LIST;
        
        try {
          await ctx.storage.initialize();

          // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏
          const reels = await ctx.storage.executeQuery(
            `SELECT r.id, r.instagram_id, r.caption, r.url, r.transcript
             FROM reels r
             WHERE r.project_id = $1 AND r.transcript IS NOT NULL
             ORDER BY r.published_at DESC
             LIMIT 10`,
            [projectId]
          );

          if (!reels || reels.rows.length === 0) {
            await ctx.reply(
              "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –≤–∏–¥–µ–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Reels.",
              Markup.inlineKeyboard([
                [Markup.button.callback("üîô –ö –ø—Ä–æ—Å–º–æ—Ç—Ä—É Reels", "back_to_reels")],
              ])
            );
            return;
          }

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          let message = "üìù *Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏*\n\n";
          message += "–í—ã–±–µ—Ä–∏—Ç–µ Reel –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç-–±–æ—Ç–æ–º:\n\n";

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
          const buttons = [];

          for (const reel of reels.rows) {
            const caption = reel.caption
              ? (reel.caption.length > 30 ? reel.caption.substring(0, 30) + "..." : reel.caption)
              : "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è";

            buttons.push([
              Markup.button.callback(
                `üí¨ ${caption}`,
                `chat_with_reel_${reel.instagram_id}`
              ),
            ]);
          }

          // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
          buttons.push([
            Markup.button.callback("üîô –ö –ø—Ä–æ—Å–º–æ—Ç—Ä—É Reels", "back_to_reels"),
          ]);

          const keyboard = Markup.inlineKeyboard(buttons);

          await ctx.reply(message, {
            parse_mode: "Markdown",
            ...keyboard,
          });
        } catch (error) {
          logger.error("[ChatbotWizard] Error showing reels with transcripts:", error);
          await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏.");
          clearSessionState(ctx, "error_loading_reels");
          await safeSceneTransition(ctx, "reels_wizard", "error_loading_reels");
        } finally {
          await ctx.storage.close();
        }
        
        // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
        return;
      },
      
      // –®–∞–≥ 2: –ß–∞—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º Reel
      async (ctx) => {
        logger.info(`[ChatbotWizard] –®–∞–≥ 2: –ß–∞—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º Reel`);
        logger.debug(`[ChatbotWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);
        
        const reelId = ctx.wizard.state.reelId;
        
        if (!reelId) {
          logger.error("[ChatbotWizard] Reel ID is undefined in step 2");
          await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Reel. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–ø–∏—Å–∫—É Reels.");
          return ctx.wizard.selectStep(0);
        }
        
        try {
          await ctx.storage.initialize();

          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Reel
          const reel = await ctx.storage.getReelById(reelId);

          if (!reel) {
            await ctx.reply("Reel –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.");
            return ctx.wizard.selectStep(0);
          }

          if (!reel.transcript) {
            await ctx.reply(
              "–£ —ç—Ç–æ–≥–æ Reel –Ω–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –≤–∏–¥–µ–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Reels.",
              Markup.inlineKeyboard([
                [Markup.button.callback("üîô –ö –ø—Ä–æ—Å–º–æ—Ç—Ä—É Reels", "back_to_reels")],
              ])
            );
            return ctx.wizard.selectStep(0);
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ Reel
          const embedding = await this.embeddingsService.getEmbeddingByReelId(reelId);

          if (!embedding) {
            // –ï—Å–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            await ctx.reply("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ...");

            const embeddingId = await this.embeddingsService.createAndSaveEmbedding(
              reelId,
              reel.transcript
            );

            if (!embeddingId) {
              await ctx.reply(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —á–∞—Ç-–±–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                Markup.inlineKeyboard([
                  [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", "back_to_reels")],
                ])
              );
              return ctx.wizard.selectStep(0);
            }
          }

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          let message = `üí¨ *–ß–∞—Ç —Å –≤–∏–¥–µ–æ*\n\n`;
          message += `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.\n\n`;
          message += `*–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ:*\n${reel.caption || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n\n`;
          message += `–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç.`;

          // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
          const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞", "clear_chat_history")],
            [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", "back_to_reels")],
          ]);

          await ctx.reply(message, {
            parse_mode: "Markdown",
            ...keyboard,
          });
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã
          ctx.scene.session.step = ScraperSceneStep.CHATBOT_CHAT;
        } catch (error) {
          logger.error("[ChatbotWizard] Error starting chat with reel:", error);
          await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —á–∞—Ç–∞ —Å –≤–∏–¥–µ–æ.");
          return ctx.wizard.selectStep(0);
        } finally {
          await ctx.storage.close();
        }
        
        // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return;
      }
    );
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    this.embeddingsService = new EmbeddingsService(storage, apiKey);
    this.chatbotService = new ChatbotService(storage, this.embeddingsService, apiKey);
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    this.registerButtonHandlers();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    this.on("text", this.onText.bind(this));
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
   */
  private registerButtonHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ Reel –¥–ª—è —á–∞—Ç–∞
    this.action(/chat_with_reel_(.+)/, async (ctx) => {
      logger.info(`[ChatbotWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'chat_with_reel' –≤—ã–∑–≤–∞–Ω`);
      await ctx.answerCbQuery();
      
      const match = ctx.match as RegExpMatchArray;
      const reelId = match[1];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID Reel –≤ wizard.state –∏ –≤ —Å–µ—Å—Å–∏–∏
      ctx.wizard.state.reelId = reelId;
      ctx.scene.session.currentReelId = reelId;
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É —á–∞—Ç–∞ —Å Reel
      return ctx.wizard.selectStep(1);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    this.action("clear_chat_history", async (ctx) => {
      logger.info(`[ChatbotWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'clear_chat_history' –≤—ã–∑–≤–∞–Ω`);
      await ctx.answerCbQuery();
      
      const reelId = ctx.wizard.state.reelId;
      
      if (!reelId) {
        await ctx.answerCbQuery("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.");
        return;
      }
      
      try {
        const userId = ctx.from?.id.toString() || "";
        const success = await this.chatbotService.clearChatHistory(userId, reelId);
        
        if (success) {
          await ctx.answerCbQuery("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.");
          await ctx.reply("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.");
        } else {
          await ctx.answerCbQuery("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.");
        }
      } catch (error) {
        logger.error("[ChatbotWizard] Error clearing chat history:", error);
        await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.");
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É Reels
    this.action("back_to_reels", async (ctx) => {
      logger.info(`[ChatbotWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'back_to_reels' –≤—ã–∑–≤–∞–Ω`);
      await ctx.answerCbQuery();
      
      const projectId = ctx.wizard.state.projectId;
      
      // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
      clearSessionState(ctx, "back_to_reels_clicked");
      ctx.scene.session.currentProjectId = projectId;
      await safeSceneTransition(ctx, "reels_wizard", "back_to_reels_clicked");
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onText(ctx: ScraperBotContext) {
    const text = ctx.message.text;
    const reelId = ctx.wizard.state.reelId || ctx.scene.session.currentReelId;
    
    if (!reelId) {
      await ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ Reel –¥–ª—è —á–∞—Ç–∞.",
        Markup.inlineKeyboard([
          [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", "back_to_reels")],
        ])
      );
      return ctx.wizard.selectStep(0);
    }
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
      await ctx.sendChatAction("typing");
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const userId = ctx.from?.id.toString() || "";
      const response = await this.chatbotService.generateResponse(
        userId,
        reelId,
        text
      );
      
      if (response) {
        await ctx.reply(response, {
          parse_mode: "Markdown",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞", "clear_chat_history")],
            [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", "back_to_reels")],
          ]),
        });
      } else {
        await ctx.reply(
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π Reel.",
          Markup.inlineKeyboard([
            [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", "back_to_reels")],
          ])
        );
      }
    } catch (error) {
      logger.error("[ChatbotWizard] Error generating response:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /chatbot
export function setupChatbotWizard(bot: any) {
  bot.command('chatbot', async (ctx: any) => {
    logger.info("[ChatbotWizard] Command /chatbot triggered");
    await ctx.scene.enter('chatbot_wizard');
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ß–∞—Ç-–±–æ—Ç" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
  bot.hears('ü§ñ –ß–∞—Ç-–±–æ—Ç', async (ctx: any) => {
    logger.info("[ChatbotWizard] Button 'ü§ñ –ß–∞—Ç-–±–æ—Ç' clicked");
    await ctx.scene.enter('chatbot_wizard');
  });
}

export default ChatbotWizardScene;
