import { Scenes, Markup } from "telegraf";
import type { ScraperBotContext } from "../types";
import { ScraperSceneStep } from "../types";
import { logger } from "../logger";
import { ReelsFilter } from "../schemas";
import {
  createReelsListKeyboard,
  createReelDetailsKeyboard,
  createReelsFilterKeyboard,
  formatDate,
  formatViews,
} from "./components/reels-keyboard";
import { registerButtons } from "../utils/button-handler";

/**
 * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Å—Ü–µ–Ω—ã
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
function clearSessionState(ctx: ScraperBotContext, reason: string = "general"): void {
  if (ctx.scene.session) {
    logger.info(`[ReelsScene] Clearing session state before leaving (reason: ${reason})`);
    ctx.scene.session.reelsFilter = undefined;
    ctx.scene.session.reelsPage = 1;
    ctx.scene.session.currentReelId = undefined;
    ctx.scene.session.currentSourceType = undefined;
    ctx.scene.session.currentSourceId = undefined;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param targetScene –¶–µ–ª–µ–≤–∞—è —Å—Ü–µ–Ω–∞
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
async function safeSceneTransition(
  ctx: ScraperBotContext,
  targetScene: string = "instagram_scraper_projects",
  reason: string = "general"
): Promise<void> {
  try {
    logger.info(`[ReelsScene] Transitioning to ${targetScene} scene (reason: ${reason})`);
    await ctx.scene.enter(targetScene);
  } catch (error) {
    logger.error(`[ReelsScene] Error entering ${targetScene} scene:`, error);
    await ctx.scene.leave();
  }
}

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Reels
 */
export const reelsScene = new Scenes.BaseScene<ScraperBotContext>(
  "instagram_scraper_reels"
);

// --- Enter Scene Handler ---
export async function handleReelsEnter(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] Enter handler triggered");

  if (!ctx.from) {
    logger.error("[ReelsScene] ctx.from is undefined");
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
    );

    // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
    clearSessionState(ctx, "missing_user");
    await safeSceneTransition(ctx, "instagram_scraper_projects", "missing_user");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º projectId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
  const projectId = ctx.scene.session.currentProjectId;

  if (!projectId) {
    logger.error("[ReelsScene] Project ID is undefined");
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞."
    );
    ctx.scene.enter("instagram_scraper_projects");
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º sourceType –∏ sourceId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
  const state = ctx.scene.state as { sourceType?: "competitor" | "hashtag"; sourceId?: string | number };
  const sourceType = state.sourceType || ctx.scene.session.currentSourceType;
  const sourceId = state.sourceId || ctx.scene.session.currentSourceId;

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–µ—Å—Å–∏–∏
  ctx.scene.session.currentProjectId = projectId;
  if (sourceType) ctx.scene.session.currentSourceType = sourceType;
  if (sourceId) ctx.scene.session.currentSourceId = sourceId;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã
  ctx.scene.session.step = ScraperSceneStep.REELS_LIST;

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  ctx.scene.session.reelsPage = ctx.scene.session.reelsPage || 1;
  ctx.scene.session.reelsPerPage = ctx.scene.session.reelsPerPage || 5;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      logger.error(`[ReelsScene] Project with ID ${projectId} not found`);
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
      );
      ctx.scene.enter("instagram_scraper_projects");
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Reels
    const filter: ReelsFilter = ctx.scene.session.reelsFilter || {
      projectId,
      limit: ctx.scene.session.reelsPerPage,
      offset: (ctx.scene.session.reelsPage - 1) * ctx.scene.session.reelsPerPage,
      orderBy: "published_at",
      orderDirection: "DESC",
    };

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∏ ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ñ–∏–ª—å—Ç—Ä
    if (sourceType && sourceId) {
      filter.sourceType = sourceType;
      filter.sourceId = sourceId;
    }

    // –ü–æ–ª—É—á–∞–µ–º Reels —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
    const reels = await ctx.storage.getReels(filter);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    let totalReels = 0;
    if (ctx.storage.getReelsCount) {
      totalReels = await ctx.storage.getReelsCount({
        projectId,
        sourceType,
        sourceId,
      });
    } else {
      // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ Reels
      totalReels = reels.length;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    const totalPages = Math.ceil(totalReels / ctx.scene.session.reelsPerPage);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    let title = `üé¨ *Reels –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*`;

    if (sourceType && sourceId) {
      if (sourceType === "competitor") {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–µ
        const competitors = await ctx.storage.getCompetitorAccounts(projectId);
        const competitor = competitors.find(c => c.id === Number(sourceId));

        if (competitor) {
          title += `\nüë§ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: *${competitor.username}*`;
        }
      } else if (sourceType === "hashtag") {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ—à—Ç–µ–≥–µ
        const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);
        const hashtag = hashtags?.find(h => h.id === Number(sourceId));

        if (hashtag) {
          title += `\n#Ô∏è‚É£ –•–µ—à—Ç–µ–≥: *#${hashtag.hashtag}*`;
        }
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `${title}\n\n`;

    if (reels.length === 0) {
      message += "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Reels. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.";

      await ctx.reply(message, {
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard([
          [Markup.button.callback("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥", `scrape_project_${projectId}`)],
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
        ])
      });

      return;
    }

    message += `–ù–∞–π–¥–µ–Ω–æ Reels: *${totalReels}*\n`;
    message += `–°—Ç—Ä–∞–Ω–∏—Ü–∞ *${ctx.scene.session.reelsPage}* –∏–∑ *${totalPages}*\n\n`;
    message += "–í—ã–±–µ—Ä–∏—Ç–µ Reel –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:";

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...createReelsListKeyboard(
        reels,
        projectId,
        ctx.scene.session.reelsPage,
        totalPages,
        sourceType as "competitor" | "hashtag" | undefined,
        sourceId
      )
    });
  } catch (error) {
    logger.error("[ReelsScene] Error in enter handler:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );

    // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
    clearSessionState(ctx, "data_loading_error");
    await safeSceneTransition(ctx, "instagram_scraper_projects", "data_loading_error");
  } finally {
    await ctx.storage.close();
  }
}

reelsScene.enter(handleReelsEnter);

// --- Action Handlers ---

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Reel
export async function handleReelDetailsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleReelDetailsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const reelId = match[2];

  if (isNaN(projectId) || !reelId) {
    logger.warn("[ReelsScene] Invalid project ID or reel ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.currentReelId = reelId;
  ctx.scene.session.step = ScraperSceneStep.REEL_DETAILS;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Reel
    let reel = null;
    if (ctx.storage.getReelById) {
      reel = await ctx.storage.getReelById(reelId);
    } else {
      // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º Reel –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
      const reels = await ctx.storage.getReels({ projectId });
      reel = reels.find(r => r.instagram_id === reelId) || null;
    }

    if (!reel) {
      logger.error(`[ReelsScene] Reel with ID ${reelId} not found`);
      await ctx.answerCbQuery("Reel –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.");
      ctx.scene.reenter();
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    let sourceInfo = "";
    if (reel.source_type === "competitor") {
      sourceInfo = `üë§ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: *${reel.author_username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}*`;
    } else if (reel.source_type === "hashtag") {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ—à—Ç–µ–≥–µ
      const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);
      const hashtag = hashtags?.find(h => h.id === Number(reel.source_id));

      if (hashtag) {
        sourceInfo = `#Ô∏è‚É£ –•–µ—à—Ç–µ–≥: *#${hashtag.hashtag}*`;
      } else {
        sourceInfo = `#Ô∏è‚É£ –•–µ—à—Ç–µ–≥: *ID ${reel.source_id}*`;
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Reel
    let message = `üé¨ *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Reel*\n\n`;
    message += sourceInfo ? `${sourceInfo}\n` : "";
    message += `üë§ –ê–≤—Ç–æ—Ä: *${reel.author_username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}*\n`;
    message += `üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: *${formatDate(reel.published_at)}*\n`;
    message += `üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: *${formatViews(reel.views)}*\n`;
    message += `‚ù§Ô∏è –õ–∞–π–∫–∏: *${reel.likes || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}*\n`;
    message += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: *${reel.comments_count || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}*\n`;

    if (reel.duration) {
      message += `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *${reel.duration} —Å–µ–∫.*\n`;
    }

    if (reel.music_title) {
      message += `üéµ –ú—É–∑—ã–∫–∞: *${reel.music_title}*\n`;
    }

    message += `\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n${reel.caption || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ
    if (reel.transcript_status) {
      message += "\n\nüéôÔ∏è *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:* ";

      switch (reel.transcript_status) {
        case "pending":
          message += "–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É";
          break;
        case "processing":
          message += "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
          break;
        case "completed":
          message += "–ó–∞–≤–µ—Ä—à–µ–Ω–∞";
          if (reel.transcript) {
            message += "\n\n*–§—Ä–∞–≥–º–µ–Ω—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:*\n";
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
            const previewText = reel.transcript.length > 100
              ? reel.transcript.substring(0, 100) + "..."
              : reel.transcript;
            message += previewText;
          }
          break;
        case "failed":
          message += "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ";
          break;
        default:
          message += "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if (reel.thumbnail_url) {
      await ctx.replyWithPhoto(reel.thumbnail_url, {
        caption: message,
        parse_mode: "Markdown",
        ...createReelDetailsKeyboard(
          reel,
          projectId,
          ctx.scene.session.currentSourceType,
          ctx.scene.session.currentSourceId
        )
      });
    } else {
      await ctx.reply(message, {
        parse_mode: "Markdown",
        ...createReelDetailsKeyboard(
          reel,
          projectId,
          ctx.scene.session.currentSourceType,
          ctx.scene.session.currentSourceId
        )
      });
    }

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[ReelsScene] Error in handleReelDetailsAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ Reels
export async function handleReelsPageAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleReelsPageAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const page = parseInt(match[2], 10);
  const sourceType = match[3] as "competitor" | "hashtag" | undefined;
  const sourceId = match[4];

  if (isNaN(projectId) || isNaN(page)) {
    logger.warn("[ReelsScene] Invalid project ID or page from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.reelsPage = page;
  if (sourceType) ctx.scene.session.currentSourceType = sourceType;
  if (sourceId) ctx.scene.session.currentSourceId = sourceId;

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }

  ctx.scene.reenter();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É Reels
export async function handleReelsListAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleReelsListAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const sourceType = match[2] as "competitor" | "hashtag" | undefined;
  const sourceId = match[3];

  if (isNaN(projectId)) {
    logger.warn("[ReelsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.REELS_LIST;
  if (sourceType) ctx.scene.session.currentSourceType = sourceType;
  if (sourceId) ctx.scene.session.currentSourceId = sourceId;

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }

  ctx.scene.reenter();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ Reels
export async function handleReelsFilterAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleReelsFilterAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[ReelsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.REELS_FILTER;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      logger.error(`[ReelsScene] Project with ID ${projectId} not found`);
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
      );
      ctx.scene.enter("instagram_scraper_projects");
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üîç *–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è Reels –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n`;
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:";

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      ...createReelsFilterKeyboard(
        projectId,
        ctx.scene.session.currentSourceType,
        ctx.scene.session.currentSourceId
      )
    });

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[ReelsScene] Error in handleReelsFilterAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ Reels –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
export async function handleReelsFilterViewsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleReelsFilterViewsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const minViews = parseInt(match[2], 10);
  const sourceType = match[3] as "competitor" | "hashtag" | undefined;
  const sourceId = match[4];

  if (isNaN(projectId) || isNaN(minViews)) {
    logger.warn("[ReelsScene] Invalid project ID or minViews from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  if (sourceType) ctx.scene.session.currentSourceType = sourceType;
  if (sourceId) ctx.scene.session.currentSourceId = sourceId;

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
  ctx.scene.session.reelsFilter = {
    ...ctx.scene.session.reelsFilter,
    projectId,
    minViews,
    limit: ctx.scene.session.reelsPerPage,
    offset: 0, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
  };

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
  ctx.scene.session.reelsPage = 1;

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery(`–§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω: –ø—Ä–æ—Å–º–æ—Ç—Ä—ã > ${minViews}`);
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É Reels
  ctx.scene.session.step = ScraperSceneStep.REELS_LIST;
  ctx.scene.reenter();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ Reels –ø–æ –¥–∞—Ç–µ
export async function handleReelsFilterDateAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleReelsFilterDateAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const period = match[2]; // "week" –∏–ª–∏ "month"
  const sourceType = match[3] as "competitor" | "hashtag" | undefined;
  const sourceId = match[4];

  if (isNaN(projectId) || !period) {
    logger.warn("[ReelsScene] Invalid project ID or period from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  if (sourceType) ctx.scene.session.currentSourceType = sourceType;
  if (sourceId) ctx.scene.session.currentSourceId = sourceId;

  // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
  const now = new Date();
  let afterDate: string;

  if (period === "week") {
    const weekAgo = new Date(now);
    weekAgo.setDate(weekAgo.getDate() - 7);
    afterDate = weekAgo.toISOString();
  } else if (period === "month") {
    const monthAgo = new Date(now);
    monthAgo.setMonth(monthAgo.getMonth() - 1);
    afterDate = monthAgo.toISOString();
  } else {
    // –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–¥–µ–ª—é
    const weekAgo = new Date(now);
    weekAgo.setDate(weekAgo.getDate() - 7);
    afterDate = weekAgo.toISOString();
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
  ctx.scene.session.reelsFilter = {
    ...ctx.scene.session.reelsFilter,
    projectId,
    afterDate,
    limit: ctx.scene.session.reelsPerPage,
    offset: 0, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
  };

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
  ctx.scene.session.reelsPage = 1;

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery(`–§–∏–ª—å—Ç—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω: –∑–∞ ${period === "week" ? "–Ω–µ–¥–µ–ª—é" : "–º–µ—Å—è—Ü"}`);
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É Reels
  ctx.scene.session.step = ScraperSceneStep.REELS_LIST;
  ctx.scene.reenter();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ Reels
export async function handleReelsSortAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleReelsSortAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const sortField = match[2]; // "views" –∏–ª–∏ "date"
  const sourceType = match[3] as "competitor" | "hashtag" | undefined;
  const sourceId = match[4];

  if (isNaN(projectId) || !sortField) {
    logger.warn("[ReelsScene] Invalid project ID or sort field from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  if (sourceType) ctx.scene.session.currentSourceType = sourceType;
  if (sourceId) ctx.scene.session.currentSourceId = sourceId;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
  let orderBy: string;
  if (sortField === "views") {
    orderBy = "views";
  } else if (sortField === "date") {
    orderBy = "published_at";
  } else {
    // –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    orderBy = "published_at";
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä
  ctx.scene.session.reelsFilter = {
    ...ctx.scene.session.reelsFilter,
    projectId,
    orderBy,
    orderDirection: "DESC",
    limit: ctx.scene.session.reelsPerPage,
    offset: 0, // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
  };

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
  ctx.scene.session.reelsPage = 1;

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery(`–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞: –ø–æ ${sortField === "views" ? "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º" : "–¥–∞—Ç–µ"}`);
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É Reels
  ctx.scene.session.step = ScraperSceneStep.REELS_LIST;
  ctx.scene.reenter();
}

reelsScene.action(/reels_sort_(\d+)_(.+)(?:_(.+)_(.+))?/, handleReelsSortAction);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
export async function handleReelsFilterResetAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleReelsFilterResetAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const sourceType = match[2] as "competitor" | "hashtag" | undefined;
  const sourceId = match[3];

  if (isNaN(projectId)) {
    logger.warn("[ReelsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  if (sourceType) ctx.scene.session.currentSourceType = sourceType;
  if (sourceId) ctx.scene.session.currentSourceId = sourceId;

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
  ctx.scene.session.reelsFilter = {
    projectId,
    limit: ctx.scene.session.reelsPerPage,
    offset: 0,
    orderBy: "published_at",
    orderDirection: "DESC",
  };

  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∏ ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ñ–∏–ª—å—Ç—Ä
  if (sourceType && sourceId) {
    ctx.scene.session.reelsFilter.sourceType = sourceType;
    ctx.scene.session.reelsFilter.sourceId = sourceId;
  }

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
  ctx.scene.session.reelsPage = 1;

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery("–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã");
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É Reels
  ctx.scene.session.step = ScraperSceneStep.REELS_LIST;
  ctx.scene.reenter();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ Reels
export async function handleReelsAnalyticsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleReelsAnalyticsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[ReelsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.REELS_ANALYTICS;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      logger.error(`[ReelsScene] Project with ID ${projectId} not found`);
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
      );
      ctx.scene.enter("instagram_scraper_projects");
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö Reels –ø—Ä–æ–µ–∫—Ç–∞
    const filter: ReelsFilter = {
      projectId,
    };

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∏ ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ñ–∏–ª—å—Ç—Ä
    if (ctx.scene.session.currentSourceType && ctx.scene.session.currentSourceId) {
      filter.sourceType = ctx.scene.session.currentSourceType;
      filter.sourceId = ctx.scene.session.currentSourceId;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Reels –ø—Ä–æ–µ–∫—Ç–∞
    const reels = await ctx.storage.getReels(filter);

    if (reels.length === 0) {
      await ctx.editMessageText(
        `üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Reels –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Reels –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥.`,
        {
          parse_mode: "Markdown",
          reply_markup: Markup.inlineKeyboard([
            [Markup.button.callback("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥", `scrape_project_${projectId}`)],
            [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", `reels_list_${projectId}`)],
            [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
          ]).reply_markup
        }
      );

      if (ctx.callbackQuery) {
        await ctx.answerCbQuery();
      }

      return;
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const totalReels = reels.length;
    const totalViews = reels.reduce((sum, reel) => sum + (reel.views || 0), 0);
    const avgViews = totalViews / totalReels;
    const maxViews = Math.max(...reels.map(reel => reel.views || 0));
    const minViews = Math.min(...reels.filter(reel => reel.views !== undefined).map(reel => reel.views || 0));

    // –ù–∞—Ö–æ–¥–∏–º Reel —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    const mostViewedReel = reels.find(reel => reel.views === maxViews);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    const reelsByDate: { [key: string]: number } = {};
    reels.forEach(reel => {
      const date = new Date(reel.published_at).toLocaleDateString("ru-RU");
      reelsByDate[date] = (reelsByDate[date] || 0) + 1;
    });

    // –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π
    let maxDate = "";
    let maxCount = 0;
    for (const [date, count] of Object.entries(reelsByDate)) {
      if (count > maxCount) {
        maxDate = date;
        maxCount = count;
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    let message = `üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Reels –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n`;

    if (ctx.scene.session.currentSourceType && ctx.scene.session.currentSourceId) {
      if (ctx.scene.session.currentSourceType === "competitor") {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–µ
        const competitors = await ctx.storage.getCompetitorAccounts(projectId);
        const competitor = competitors.find(c => c.id === Number(ctx.scene.session.currentSourceId));

        if (competitor) {
          message += `üë§ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: *${competitor.username}*\n\n`;
        }
      } else if (ctx.scene.session.currentSourceType === "hashtag") {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ—à—Ç–µ–≥–µ
        const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);
        const hashtag = hashtags?.find(h => h.id === Number(ctx.scene.session.currentSourceId));

        if (hashtag) {
          message += `#Ô∏è‚É£ –•–µ—à—Ç–µ–≥: *#${hashtag.hashtag}*\n\n`;
        }
      }
    }

    message += `üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
    message += `- –í—Å–µ–≥–æ Reels: *${totalReels}*\n`;
    message += `- –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(totalViews)}*\n`;
    message += `- –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(Math.round(avgViews))}*\n`;
    message += `- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(maxViews)}*\n`;
    message += `- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: *${formatViews(minViews)}*\n\n`;

    if (mostViewedReel) {
      message += `üîù *–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π Reel:*\n`;
      message += `- –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: *${formatViews(mostViewedReel.views)}*\n`;
      message += `- –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: *${formatDate(mostViewedReel.published_at)}*\n`;
      message += `- –ê–≤—Ç–æ—Ä: *${mostViewedReel.author_username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}*\n`;
      message += `- –û–ø–∏—Å–∞–Ω–∏–µ: ${mostViewedReel.caption ? (mostViewedReel.caption.length > 50 ? mostViewedReel.caption.substring(0, 47) + "..." : mostViewedReel.caption) : "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n\n`;
    }

    message += `üìÖ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º:*\n`;
    message += `- –î–∞—Ç–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–π: *${maxDate}* (${maxCount} Reels)\n\n`;

    message += `–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º Reel –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–ø–∏—Å–∫—É Reels.`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback("üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", `analytics_enter_${projectId}`)],
        [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", `reels_list_${projectId}`)],
        [Markup.button.callback("üîô –ö –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
      ]).reply_markup
    });

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[ReelsScene] Error in handleReelsAnalyticsAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
export async function handleEnterAnalyticsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleEnterAnalyticsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[ReelsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }

  ctx.scene.enter("instagram_scraper_analytics", { projectId });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ Reel
export async function handleTranscribeReelAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleTranscribeReelAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const reelId = match[2];

  if (isNaN(projectId) || !reelId) {
    logger.warn("[ReelsScene] Invalid project ID or reel ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.currentReelId = reelId;
  ctx.scene.session.step = ScraperSceneStep.TRANSCRIBE_REEL;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Reel
    let reel = null;
    if (ctx.storage.getReelById) {
      reel = await ctx.storage.getReelById(reelId);
    } else {
      // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º Reel –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
      const reels = await ctx.storage.getReels({ projectId });
      reel = reels.find(r => r.instagram_id === reelId) || null;
    }

    if (!reel) {
      logger.error(`[ReelsScene] Reel with ID ${reelId} not found`);
      await ctx.answerCbQuery("Reel –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.");
      ctx.scene.reenter();
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    await ctx.reply(
      "üéôÔ∏è *–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –≤–∏–¥–µ–æ*\n\n–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤–∏–¥–µ–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.",
      { parse_mode: "Markdown" }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    if (ctx.storage.updateReel) {
      await ctx.storage.updateReel(reelId, {
        transcript_status: "pending",
        transcript_updated_at: new Date().toISOString(),
      });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä: transcriptService.transcribeReel(reelId);

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery("–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞");
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º Reel
    ctx.scene.session.step = ScraperSceneStep.REEL_DETAILS;
    ctx.scene.reenter();
  } catch (error) {
    logger.error("[ReelsScene] Error in handleTranscribeReelAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
export async function handleCheckTranscriptAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleCheckTranscriptAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const reelId = match[2];

  if (isNaN(projectId) || !reelId) {
    logger.warn("[ReelsScene] Invalid project ID or reel ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.currentReelId = reelId;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Reel
    let reel = null;
    if (ctx.storage.getReelById) {
      reel = await ctx.storage.getReelById(reelId);
    } else {
      // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º Reel –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
      const reels = await ctx.storage.getReels({ projectId });
      reel = reels.find(r => r.instagram_id === reelId) || null;
    }

    if (!reel) {
      logger.error(`[ReelsScene] Reel with ID ${reelId} not found`);
      await ctx.answerCbQuery("Reel –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.");
      ctx.scene.reenter();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    const status = reel.transcript_status || "pending";
    let statusMessage = "";

    switch (status) {
      case "pending":
        statusMessage = "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É";
        break;
      case "processing":
        statusMessage = "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ";
        break;
      case "completed":
        statusMessage = "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞";
        break;
      case "failed":
        statusMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ";
        break;
      default:
        statusMessage = "–°—Ç–∞—Ç—É—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
    }

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery(statusMessage);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º Reel
    ctx.scene.reenter();
  } catch (error) {
    logger.error("[ReelsScene] Error in handleCheckTranscriptAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
export async function handleViewTranscriptAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleViewTranscriptAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const reelId = match[2];

  if (isNaN(projectId) || !reelId) {
    logger.warn("[ReelsScene] Invalid project ID or reel ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.currentReelId = reelId;
  ctx.scene.session.step = ScraperSceneStep.EDIT_TRANSCRIPT;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Reel
    let reel = null;
    if (ctx.storage.getReelById) {
      reel = await ctx.storage.getReelById(reelId);
    } else {
      // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º Reel –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
      const reels = await ctx.storage.getReels({ projectId });
      reel = reels.find(r => r.instagram_id === reelId) || null;
    }

    if (!reel) {
      logger.error(`[ReelsScene] Reel with ID ${reelId} not found`);
      await ctx.answerCbQuery("Reel –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.");
      ctx.scene.reenter();
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    if (!reel.transcript) {
      await ctx.reply(
        "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ Reel –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç."
      );
      ctx.scene.session.step = ScraperSceneStep.REEL_DETAILS;
      ctx.scene.reenter();
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π
    let message = `üìù *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤–∏–¥–µ–æ*\n\n`;
    message += reel.transcript;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ Reel", `reel_details_${projectId}_${reelId}`)],
      ])
    });

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[ReelsScene] Error in handleViewTranscriptAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
export async function handleBackToProjectAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleBackToProjectAction triggered");
  console.log("[DEBUG] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É' –≤—ã–∑–≤–∞–Ω");
  console.log("[DEBUG] match:", ctx.match);

  try {
    const match = ctx.match as unknown as RegExpExecArray;
    const projectId = parseInt(match[1], 10);
    console.log(`[DEBUG] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π projectId: ${projectId}`);

    if (isNaN(projectId)) {
      logger.warn("[ReelsScene] Invalid project ID from action match");
      console.error(`[ERROR] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π projectId: ${match[1]}`);
      if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
      ctx.scene.reenter();
      return;
    }

    if (ctx.callbackQuery) {
      console.log("[DEBUG] –û—Ç–≤–µ—Ç –Ω–∞ callback query");
      await ctx.answerCbQuery();
    }

    console.log(`[DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å projectId: ${projectId}`);
    ctx.scene.enter("instagram_scraper_projects", { projectId });
  } catch (error) {
    console.error("[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É':", error);
    try {
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞").catch(() => {});
      ctx.scene.reenter();
    } catch (e) {
      console.error("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:", e);
    }
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
reelsScene.action(/project_(\d+)/, handleBackToProjectAction);
console.log("[DEBUG] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è project_(\\d+)");

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º Reels
export async function handleCollectionsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleCollectionsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[ReelsScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
  ctx.scene.session.currentProjectId = projectId;

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ü–µ–Ω–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π Reels
  ctx.scene.enter("reels_collection_scene");
}

reelsScene.action(/collections_project_(\d+)/, handleCollectionsAction);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —á–∞—Ç-–±–æ—Ç—É
export async function handleChatWithReelAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ReelsScene] handleChatWithReelAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const reelId = match[2];

  if (isNaN(projectId) || !reelId) {
    logger.warn("[ReelsScene] Invalid project ID or reel ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
    ctx.scene.reenter();
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ–µ–∫—Ç–∞ –∏ Reel –≤ —Å–µ—Å—Å–∏–∏
  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.currentReelId = reelId;

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ü–µ–Ω–µ —á–∞—Ç-–±–æ—Ç–∞
  ctx.scene.enter("chatbot_scene");
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
registerButtons(reelsScene, [
  {
    id: /reel_details_(\d+)_(.+)/,
    handler: handleReelDetailsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–µ—Ç–∞–ª–µ–π Reel. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /reels_page_(\d+)_(\d+)(?:_(.+)_(.+))?/,
    handler: handleReelsPageAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /reels_list_(\d+)(?:_(.+)_(.+))?/,
    handler: handleReelsListAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É Reels. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /reels_filter_(\d+)/,
    handler: handleReelsFilterAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ Reels. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /reels_filter_views_(\d+)_(\d+)(?:_(.+)_(.+))?/,
    handler: handleReelsFilterViewsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /reels_filter_date_(\d+)_(.+)(?:_(.+)_(.+))?/,
    handler: handleReelsFilterDateAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /reels_sort_(\d+)_(.+)_(.+)(?:_(.+)_(.+))?/,
    handler: handleReelsSortAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ Reels. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /reels_filter_reset_(\d+)(?:_(.+)_(.+))?/,
    handler: handleReelsFilterResetAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /reels_analytics_(\d+)/,
    handler: handleReelsAnalyticsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /analytics_enter_(\d+)/,
    handler: handleEnterAnalyticsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /transcribe_reel_(\d+)_(.+)/,
    handler: handleTranscribeReelAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /check_transcript_(\d+)_(.+)/,
    handler: handleCheckTranscriptAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /view_transcript_(\d+)_(.+)/,
    handler: handleViewTranscriptAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /project_(\d+)/,
    handler: handleBackToProjectAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ–µ–∫—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /chat_with_reel_(\d+)_(.+)/,
    handler: handleChatWithReelAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —á–∞—Ç-–±–æ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  }
]);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
export default reelsScene;
