import { Scenes, Markup } from "telegraf";
import type { ScraperBotContext } from "../types";
import { ScraperSceneStep } from "../types";
import { logger } from "../logger";
import { NotificationSettings } from "../schemas";

/**
 * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Å—Ü–µ–Ω—ã
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
function clearSessionState(ctx: ScraperBotContext, reason: string = "general"): void {
  if (ctx.scene.session) {
    logger.info(`[NotificationWizard] Clearing session state before leaving (reason: ${reason})`);
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    ctx.scene.session.step = undefined;
    // –î–ª—è Wizard-—Å—Ü–µ–Ω
    if (ctx.wizard && ctx.wizard.state) {
      ctx.wizard.state = {};
    }
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param targetScene –¶–µ–ª–µ–≤–∞—è —Å—Ü–µ–Ω–∞
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
async function safeSceneTransition(
  ctx: ScraperBotContext,
  targetScene: string = "project_wizard",
  reason: string = "general"
): Promise<void> {
  try {
    logger.info(`[NotificationWizard] Transitioning to ${targetScene} scene (reason: ${reason})`);
    await ctx.scene.enter(targetScene);
  } catch (error) {
    logger.error(`[NotificationWizard] Error entering ${targetScene} scene:`, error);
    await ctx.scene.leave();
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param days –ú–∞—Å—Å–∏–≤ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (1-7, –≥–¥–µ 1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
 * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
 */
function formatDays(days: number[]): string {
  const dayNames = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"];

  if (days.length === 7) {
    return "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ";
  }

  if (days.length === 5 && days.includes(1) && days.includes(2) && days.includes(3) && days.includes(4) && days.includes(5)) {
    return "–ü–æ –±—É–¥–Ω—è–º";
  }

  if (days.length === 2 && days.includes(6) && days.includes(7)) {
    return "–ü–æ –≤—ã—Ö–æ–¥–Ω—ã–º";
  }

  return days.map(day => dayNames[day - 1]).join(", ");
}

/**
 * Wizard-—Å—Ü–µ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 */
export const notificationWizardScene = new Scenes.WizardScene<ScraperBotContext>(
  "notification_wizard",

  // –®–∞–≥ 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async (ctx) => {
    logger.info(`[NotificationWizard] –®–∞–≥ 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    logger.debug(`[NotificationWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);

    if (!ctx.from) {
      logger.error("[NotificationWizard] ctx.from is undefined");
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
      );
      clearSessionState(ctx, "missing_user");
      return ctx.scene.leave();
    }

    try {
      await ctx.storage.initialize();

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await ctx.storage.getUserByTelegramId(ctx.from.id);

      if (!user) {
        logger.error(`[NotificationWizard] User not found for telegram_id: ${ctx.from.id}`);
        await ctx.reply(
          "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        );
        clearSessionState(ctx, "user_not_found");
        return ctx.scene.leave();
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let settings = await ctx.storage.getNotificationSettings(user.id);

      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (!settings) {
        logger.info(`[NotificationWizard] Creating default notification settings for user ${user.id}`);
        settings = await ctx.storage.saveNotificationSettings({
          user_id: user.id,
          new_reels_enabled: true,
          trends_enabled: true,
          weekly_report_enabled: true,
          min_views_threshold: 1000,
          notification_time: "09:00",
          notification_days: [1, 2, 3, 4, 5, 6, 7],
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ wizard.state
      ctx.wizard.state.settings = settings;
      ctx.wizard.state.userId = user.id;

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã
      ctx.scene.session.step = ScraperSceneStep.NOTIFICATION_SETTINGS;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      let message = `üì¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n`;
      message += `üé¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö Reels: ${settings.new_reels_enabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}\n`;
      message += `üìà –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–¥–∞—Ö: ${settings.trends_enabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}\n`;
      message += `üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã: ${settings.weekly_report_enabled ? "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" : "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"}\n\n`;
      message += `üëÅÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${settings.min_views_threshold}\n`;
      message += `‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${settings.notification_time}\n`;
      message += `üìÖ –î–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${formatDays(settings.notification_days)}\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`;

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback(
            `${settings.new_reels_enabled ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å" : "üîî –í–∫–ª—é—á–∏—Ç—å"} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö Reels`,
            `toggle_new_reels_${settings.new_reels_enabled ? "off" : "on"}`
          ),
        ],
        [
          Markup.button.callback(
            `${settings.trends_enabled ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å" : "üîî –í–∫–ª—é—á–∏—Ç—å"} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–¥–∞—Ö`,
            `toggle_trends_${settings.trends_enabled ? "off" : "on"}`
          ),
        ],
        [
          Markup.button.callback(
            `${settings.weekly_report_enabled ? "üîï –û—Ç–∫–ª—é—á–∏—Ç—å" : "üîî –í–∫–ª—é—á–∏—Ç—å"} –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã`,
            `toggle_weekly_report_${settings.weekly_report_enabled ? "off" : "on"}`
          ),
        ],
        [
          Markup.button.callback(
            "üëÅÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤",
            "change_views_threshold"
          ),
        ],
        [
          Markup.button.callback(
            "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "change_notification_time"
          ),
        ],
        [
          Markup.button.callback(
            "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "change_notification_days"
          ),
        ],
        [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "back_to_menu")],
      ]);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      await ctx.reply(message, {
        parse_mode: "Markdown",
        ...keyboard,
      });
    } catch (error) {
      logger.error("[NotificationWizard] Error in step 1:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      );
      clearSessionState(ctx, "error_loading_settings");
      return ctx.scene.leave();
    } finally {
      await ctx.storage.close();
    }

    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    return;
  },

  // –®–∞–≥ 2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  async (ctx) => {
    logger.info(`[NotificationWizard] –®–∞–≥ 2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
    logger.debug(`[NotificationWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if (ctx.message && 'text' in ctx.message) {
      const threshold = parseInt(ctx.message.text.trim(), 10);

      if (isNaN(threshold) || threshold < 0) {
        await ctx.reply(
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):"
        );
        return;
      }

      const userId = ctx.wizard.state.userId;

      if (!userId) {
        logger.error("[NotificationWizard] User ID is undefined in step 2");
        await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
        clearSessionState(ctx, "missing_user_id_step_2");
        return ctx.wizard.selectStep(0);
      }

      try {
        await ctx.storage.initialize();

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await ctx.storage.updateNotificationSettings(userId, {
          min_views_threshold: threshold,
        });

        await ctx.reply(`–ü–æ—Ä–æ–≥ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${threshold}.`);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return ctx.wizard.selectStep(0);
      } catch (error) {
        logger.error("[NotificationWizard] Error updating views threshold:", error);
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        );
        return ctx.wizard.selectStep(0);
      } finally {
        await ctx.storage.close();
      }
    } else {
      await ctx.reply(
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000):"
      );
    }

    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    return;
  },

  // –®–∞–≥ 3: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async (ctx) => {
    logger.info(`[NotificationWizard] –®–∞–≥ 3: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
    logger.debug(`[NotificationWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if (ctx.message && 'text' in ctx.message) {
      const timePattern = /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/;
      const time = ctx.message.text.trim();

      if (!timePattern.test(time)) {
        await ctx.reply(
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):"
        );
        return;
      }

      const userId = ctx.wizard.state.userId;

      if (!userId) {
        logger.error("[NotificationWizard] User ID is undefined in step 3");
        await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
        clearSessionState(ctx, "missing_user_id_step_3");
        return ctx.wizard.selectStep(0);
      }

      try {
        await ctx.storage.initialize();

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await ctx.storage.updateNotificationSettings(userId, {
          notification_time: time,
        });

        await ctx.reply(`–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${time}.`);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return ctx.wizard.selectStep(0);
      } catch (error) {
        logger.error("[NotificationWizard] Error updating notification time:", error);
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        );
        return ctx.wizard.selectStep(0);
      } finally {
        await ctx.storage.close();
      }
    } else {
      await ctx.reply(
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):"
      );
    }

    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    return;
  }
);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ü–µ–Ω—ã
notificationWizardScene.action("back_to_menu", async (ctx) => {
  logger.info(`[NotificationWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'back_to_menu' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã
  clearSessionState(ctx, "back_to_menu_clicked");
  await ctx.scene.leave();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
  await ctx.reply(
    "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    {
      reply_markup: {
        keyboard: [
          ["üìä –ü—Ä–æ–µ–∫—Ç—ã", "üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã"],
          ["#Ô∏è‚É£ –•—ç—à—Ç–µ–≥–∏", "üé¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥"],
          ["üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä Reels", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"],
          ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"],
        ],
        resize_keyboard: true,
      },
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö Reels
notificationWizardScene.action(/toggle_new_reels_(on|off)/, async (ctx) => {
  logger.info(`[NotificationWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'toggle_new_reels' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const match = ctx.match as RegExpExecArray;
  const action = match[1]; // "on" –∏–ª–∏ "off"
  const userId = ctx.wizard.state.userId;

  if (!userId) {
    logger.error("[NotificationWizard] User ID is undefined in toggle_new_reels handler");
    await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
    return ctx.wizard.selectStep(0);
  }

  try {
    await ctx.storage.initialize();

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await ctx.storage.updateNotificationSettings(userId, {
      new_reels_enabled: action === "on",
    });

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await ctx.answerCbQuery(
      `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö Reels ${action === "on" ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã"}`
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    return ctx.wizard.selectStep(0);
  } catch (error) {
    logger.error("[NotificationWizard] Error in toggle_new_reels handler:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
    return ctx.wizard.selectStep(0);
  } finally {
    await ctx.storage.close();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—Ä–µ–Ω–¥–∞—Ö
notificationWizardScene.action(/toggle_trends_(on|off)/, async (ctx) => {
  logger.info(`[NotificationWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'toggle_trends' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const match = ctx.match as RegExpExecArray;
  const action = match[1]; // "on" –∏–ª–∏ "off"
  const userId = ctx.wizard.state.userId;

  if (!userId) {
    logger.error("[NotificationWizard] User ID is undefined in toggle_trends handler");
    await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
    return ctx.wizard.selectStep(0);
  }

  try {
    await ctx.storage.initialize();

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await ctx.storage.updateNotificationSettings(userId, {
      trends_enabled: action === "on",
    });

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await ctx.answerCbQuery(
      `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–¥–∞—Ö ${action === "on" ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã"}`
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    return ctx.wizard.selectStep(0);
  } catch (error) {
    logger.error("[NotificationWizard] Error in toggle_trends handler:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
    return ctx.wizard.selectStep(0);
  } finally {
    await ctx.storage.close();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
notificationWizardScene.action(/toggle_weekly_report_(on|off)/, async (ctx) => {
  logger.info(`[NotificationWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'toggle_weekly_report' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const match = ctx.match as RegExpExecArray;
  const action = match[1]; // "on" –∏–ª–∏ "off"
  const userId = ctx.wizard.state.userId;

  if (!userId) {
    logger.error("[NotificationWizard] User ID is undefined in toggle_weekly_report handler");
    await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
    return ctx.wizard.selectStep(0);
  }

  try {
    await ctx.storage.initialize();

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await ctx.storage.updateNotificationSettings(userId, {
      weekly_report_enabled: action === "on",
    });

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await ctx.answerCbQuery(
      `–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã ${action === "on" ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã"}`
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    return ctx.wizard.selectStep(0);
  } catch (error) {
    logger.error("[NotificationWizard] Error in toggle_weekly_report handler:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
    return ctx.wizard.selectStep(0);
  } finally {
    await ctx.storage.close();
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
notificationWizardScene.action("change_views_threshold", async (ctx) => {
  logger.info(`[NotificationWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'change_views_threshold' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  return ctx.wizard.selectStep(1);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notificationWizardScene.action("change_notification_time", async (ctx) => {
  logger.info(`[NotificationWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'change_notification_time' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  return ctx.wizard.selectStep(2);
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /notifications
export function setupNotificationWizard(bot: any) {
  bot.command('notifications', async (ctx: any) => {
    logger.info("[NotificationWizard] Command /notifications triggered");
    await ctx.scene.enter('notification_wizard');
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
  bot.hears('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', async (ctx: any) => {
    logger.info("[NotificationWizard] Button 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' clicked");
    await ctx.scene.enter('notification_wizard');
  });
}

export default notificationWizardScene;
