import { Scenes, Markup } from "telegraf";
import { ScraperSceneStep, ScraperSceneSessionData, StorageAdapter } from "../types";
import { ReelsCollection, ReelsFilter } from "../schemas";
import { ReelsCollectionService } from "../services/reels-collection-service";
import { logger } from "../logger";

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ Reels
 */
export class ReelsCollectionScene extends Scenes.BaseScene<Scenes.SceneContext> {
  private storage: StorageAdapter;
  private collectionService: ReelsCollectionService;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ü–µ–Ω—ã
   * @param storage –ê–¥–∞–ø—Ç–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   */
  constructor(storage: StorageAdapter) {
    super("reels_collection_scene");
    this.storage = storage;
    this.collectionService = new ReelsCollectionService(storage);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ü–µ–Ω—ã
    this.enter(this.onSceneEnter.bind(this));
    this.leave(this.onSceneLeave.bind(this));

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à–∞–≥–æ–≤ —Å—Ü–µ–Ω—ã
    this.action(/^collection_list_page_(\d+)$/, this.onCollectionListPage.bind(this));
    this.action("create_collection", this.onCreateCollection.bind(this));
    this.action(/^view_collection_(\d+)$/, this.onViewCollection.bind(this));
    this.action(/^process_collection_(\d+)_(.+)$/, this.onProcessCollection.bind(this));
    this.action(/^delete_collection_(\d+)$/, this.onDeleteCollection.bind(this));
    this.action("back_to_project", this.onBackToProject.bind(this));
    this.action("back_to_collections", this.onBackToCollections.bind(this));
    this.action("confirm_delete", this.onConfirmDelete.bind(this));
    this.action("cancel_delete", this.onCancelDelete.bind(this));

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    this.on("text", this.onText.bind(this));
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Å—Ü–µ–Ω—ã
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   * @param reason –ü—Ä–∏—á–∏–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  private clearSessionState(ctx: Scenes.SceneContext, reason: string = "general"): void {
    const session = ctx.scene.session as ScraperSceneSessionData;

    logger.info(`[ReelsCollectionScene] Clearing session state (reason: ${reason})`);

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
    session.currentCollectionId = undefined;
    session.collectionName = undefined;
    session.collectionDescription = undefined;
    session.selectedReelsIds = undefined;
    session.contentFormat = undefined;
    session.contentData = undefined;
    session.step = undefined;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   * @param targetScene –¶–µ–ª–µ–≤–∞—è —Å—Ü–µ–Ω–∞
   * @param reason –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
   * @param state –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ü–µ–ª–µ–≤—É—é —Å—Ü–µ–Ω—É
   */
  private async safeSceneTransition(
    ctx: Scenes.SceneContext,
    targetScene: string = "project_scene",
    reason: string = "general",
    state: Record<string, any> = {}
  ): Promise<void> {
    try {
      logger.info(`[ReelsCollectionScene] Transitioning to ${targetScene} scene (reason: ${reason})`);
      await ctx.scene.enter(targetScene, state);
    } catch (error) {
      logger.error(`[ReelsCollectionScene] Error entering ${targetScene} scene:`, error);
      await ctx.scene.leave();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onSceneEnter(ctx: Scenes.SceneContext) {
    logger.info("[ReelsCollectionScene] Enter handler triggered");
    const session = ctx.scene.session as ScraperSceneSessionData;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã
    session.step = ScraperSceneStep.REELS_COLLECTIONS;

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    await this.showCollectionsList(ctx);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onSceneLeave(ctx: Scenes.SceneContext) {
    logger.info("[ReelsCollectionScene] Leave handler triggered");
    this.clearSessionState(ctx, "scene_leave");
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   * @param page –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  private async showCollectionsList(ctx: Scenes.SceneContext, page: number = 1) {
    const session = ctx.scene.session as ScraperSceneSessionData;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      const collections = await this.collectionService.getCollectionsByProjectId(
        session.currentProjectId || 0
      );

      // –ï—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π –Ω–µ—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (collections.length === 0) {
        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", "create_collection")],
          [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", "back_to_project")]
        ]);

        await ctx.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–π Reels. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!", keyboard);
        return;
      }

      // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
      const itemsPerPage = 5;
      const totalPages = Math.ceil(collections.length / itemsPerPage);
      const currentPage = Math.min(Math.max(page, 1), totalPages);
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = Math.min(startIndex + itemsPerPage, collections.length);
      const pageCollections = collections.slice(startIndex, endIndex);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = "üìã *–ö–æ–ª–ª–µ–∫—Ü–∏–∏ Reels*\n\n";

      pageCollections.forEach((collection, index) => {
        message += `*${startIndex + index + 1}. ${collection.name}*\n`;
        if (collection.description) {
          message += `üìù ${collection.description}\n`;
        }
        message += `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${new Date(collection.created_at || "").toLocaleDateString()}\n`;
        message += `üîÑ –°—Ç–∞—Ç—É—Å: ${collection.is_processed ? "–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞" : "–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"}\n\n`;
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const buttons = [];

      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
      pageCollections.forEach(collection => {
        buttons.push([
          Markup.button.callback(
            `üëÅÔ∏è ${collection.name}`,
            `view_collection_${collection.id}`
          )
        ]);
      });

      // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      const paginationButtons = [];

      if (currentPage > 1) {
        paginationButtons.push(
          Markup.button.callback(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            `collection_list_page_${currentPage - 1}`
          )
        );
      }

      if (currentPage < totalPages) {
        paginationButtons.push(
          Markup.button.callback(
            "‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
            `collection_list_page_${currentPage + 1}`
          )
        );
      }

      if (paginationButtons.length > 0) {
        buttons.push(paginationButtons);
      }

      // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      buttons.push([Markup.button.callback("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", "create_collection")]);
      buttons.push([Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", "back_to_project")]);

      const keyboard = Markup.inlineKeyboard(buttons);

      await ctx.reply(message, {
        parse_mode: "Markdown",
        ...keyboard
      });
    } catch (error) {
      logger.error("[ReelsCollectionScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É
      this.clearSessionState(ctx, "collection_list_error");
      await this.safeSceneTransition(ctx, "project_scene", "collection_list_error");
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onCollectionListPage(ctx: Scenes.SceneContext) {
    const match = ctx.match as RegExpMatchArray;
    const page = parseInt(match[1], 10);

    await this.showCollectionsList(ctx, page);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onCreateCollection(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã
    session.step = ScraperSceneStep.CREATE_COLLECTION;

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:");
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onViewCollection(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;
    const match = ctx.match as RegExpMatchArray;
    const collectionId = parseInt(match[1], 10);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
      const collection = await this.collectionService.getCollectionById(collectionId);

      if (!collection) {
        await ctx.reply("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.");
        await this.showCollectionsList(ctx);
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã –∏ ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      session.step = ScraperSceneStep.COLLECTION_DETAILS;
      session.currentCollectionId = collectionId;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = `üìã *–ö–æ–ª–ª–µ–∫—Ü–∏—è: ${collection.name}*\n\n`;

      if (collection.description) {
        message += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${collection.description}\n\n`;
      }

      message += `üìÖ *–°–æ–∑–¥–∞–Ω–∞:* ${new Date(collection.created_at || "").toLocaleDateString()}\n`;
      message += `üîÑ *–°—Ç–∞—Ç—É—Å:* ${collection.is_processed ? "–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞" : "–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"}\n`;

      if (collection.processing_status) {
        message += `üìä *–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:* ${collection.processing_status}\n`;
      }

      if (collection.content_format) {
        message += `üìÑ *–§–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞:* ${collection.content_format}\n`;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const buttons = [];

      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      if (!collection.is_processed) {
        buttons.push([
          Markup.button.callback("üìù –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç", `process_collection_${collectionId}_text`),
          Markup.button.callback("üìä –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ CSV", `process_collection_${collectionId}_csv`)
        ]);
        buttons.push([
          Markup.button.callback("üìã –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ JSON", `process_collection_${collectionId}_json`)
        ]);
      } else if (collection.content_data) {
        // –ï—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        message += "\n\n*–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:*\n";

        if (collection.content_format === "text") {
          // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
          message += "```\n" + collection.content_data.substring(0, 500) + (collection.content_data.length > 500 ? "...\n(—Å–æ–∫—Ä–∞—â–µ–Ω–æ)" : "") + "\n```";
        } else {
          message += "–î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ " + collection.content_format.toUpperCase();
        }
      }

      // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
      buttons.push([Markup.button.callback("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é", `delete_collection_${collectionId}`)]);
      buttons.push([Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π", "back_to_collections")]);

      const keyboard = Markup.inlineKeyboard(buttons);

      await ctx.reply(message, {
        parse_mode: "Markdown",
        ...keyboard
      });
    } catch (error) {
      logger.error("[ReelsCollectionScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π
      await this.showCollectionsList(ctx);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onProcessCollection(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;
    const match = ctx.match as RegExpMatchArray;
    const collectionId = parseInt(match[1], 10);
    const format = match[2] as "text" | "csv" | "json";

    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã
      session.step = ScraperSceneStep.EXPORT_COLLECTION;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await ctx.reply(`–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}...`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
      const processedCollection = await this.collectionService.processCollection(collectionId, format);

      if (!processedCollection) {
        await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
      await ctx.reply(`–ö–æ–ª–ª–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}!`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      await this.onViewCollection(ctx);
    } catch (error) {
      logger.error("[ReelsCollectionScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π
      await this.showCollectionsList(ctx);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onDeleteCollection(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;
    const match = ctx.match as RegExpMatchArray;
    const collectionId = parseInt(match[1], 10);

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
      const collection = await this.collectionService.getCollectionById(collectionId);

      if (!collection) {
        await ctx.reply("–ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.");
        await this.showCollectionsList(ctx);
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ —Å–µ—Å—Å–∏–∏
      session.currentCollectionId = collectionId;

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "confirm_delete"),
          Markup.button.callback("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", "cancel_delete")
        ]
      ]);

      await ctx.reply(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é "${collection.name}"?`, keyboard);
    } catch (error) {
      logger.error("[ReelsCollectionScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π
      await this.showCollectionsList(ctx);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onConfirmDelete(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;

    try {
      // –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
      const result = await this.collectionService.deleteCollection(session.currentCollectionId || 0);

      if (result) {
        await ctx.reply("–ö–æ–ª–ª–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!");
      } else {
        await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
      await this.showCollectionsList(ctx);
    } catch (error) {
      logger.error("[ReelsCollectionScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π
      await this.showCollectionsList(ctx);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onCancelDelete(ctx: Scenes.SceneContext) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    await this.onViewCollection(ctx);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onBackToProject(ctx: Scenes.SceneContext) {
    logger.info("[ReelsCollectionScene] Back to project button clicked");

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    this.clearSessionState(ctx, "back_to_project_clicked");

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ü–µ–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    await this.safeSceneTransition(ctx, "project_scene", "back_to_project_clicked");
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onBackToCollections(ctx: Scenes.SceneContext) {
    logger.info("[ReelsCollectionScene] Back to collections button clicked");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    await this.showCollectionsList(ctx);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onText(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;
    const text = ctx.message.text;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∞–≥–∞ —Å—Ü–µ–Ω—ã
    switch (session.step) {
      case ScraperSceneStep.CREATE_COLLECTION:
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        session.collectionName = text;

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):");

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
        session.step = ScraperSceneStep.COLLECTION_DETAILS;
        break;

      case ScraperSceneStep.COLLECTION_DETAILS:
        // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –Ω–æ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
        if (session.collectionName && !session.collectionDescription) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
          session.collectionDescription = text === "-" ? undefined : text;

          try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
            const collection = await this.collectionService.createCollection(
              session.currentProjectId || 0,
              session.collectionName,
              session.collectionDescription,
              session.reelsFilter // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä Reels, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            );

            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session.collectionName = undefined;
            session.collectionDescription = undefined;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
            await ctx.reply(`–ö–æ–ª–ª–µ–∫—Ü–∏—è "${collection.name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π
            await this.showCollectionsList(ctx);
          } catch (error) {
            logger.error("[ReelsCollectionScene] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", error);
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");

            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π
            await this.showCollectionsList(ctx);
          }
        }
        break;

      default:
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥
        break;
    }
  }
}
