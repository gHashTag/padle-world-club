import { Scenes, Markup } from "telegraf";
import type { ScraperBotContext } from "../types";
import { ScraperSceneStep } from "../types";
import { logger } from "../logger";
import { ReelsFilter } from "../schemas";
import {
  createReelsListKeyboard,
  createReelDetailsKeyboard,
  createReelsFilterKeyboard,
  formatDate,
  formatViews,
} from "./components/reels-keyboard";

/**
 * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Å—Ü–µ–Ω—ã
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
function clearSessionState(ctx: ScraperBotContext, reason: string = "general"): void {
  if (ctx.scene.session) {
    logger.info(`[ReelsWizard] Clearing session state before leaving (reason: ${reason})`);
    ctx.scene.session.reelsFilter = undefined;
    ctx.scene.session.reelsPage = 1;
    ctx.scene.session.currentReelId = undefined;
    ctx.scene.session.currentSourceType = undefined;
    ctx.scene.session.currentSourceId = undefined;
    // –î–ª—è Wizard-—Å—Ü–µ–Ω
    if (ctx.wizard && ctx.wizard.state) {
      ctx.wizard.state = {};
    }
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
 * @param targetScene –¶–µ–ª–µ–≤–∞—è —Å—Ü–µ–Ω–∞
 * @param reason –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
async function safeSceneTransition(
  ctx: ScraperBotContext,
  targetScene: string = "project_wizard",
  reason: string = "general"
): Promise<void> {
  try {
    logger.info(`[ReelsWizard] Transitioning to ${targetScene} scene (reason: ${reason})`);
    await ctx.scene.enter(targetScene);
  } catch (error) {
    logger.error(`[ReelsWizard] Error entering ${targetScene} scene:`, error);
    await ctx.scene.leave();
  }
}

/**
 * Wizard-—Å—Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Reels
 */
export const reelsWizardScene = new Scenes.WizardScene<ScraperBotContext>(
  "reels_wizard",

  // –®–∞–≥ 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Reels
  async (ctx) => {
    logger.info(`[ReelsWizard] –®–∞–≥ 1: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Reels`);
    logger.debug(`[ReelsWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);

    if (!ctx.from) {
      logger.error("[ReelsWizard] ctx.from is undefined");
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
      );
      clearSessionState(ctx, "missing_user");
      return ctx.scene.leave();
    }

    // –ü–æ–ª—É—á–∞–µ–º projectId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏–∑ wizard.state
    let projectId = ctx.scene.session.currentProjectId;
    if (!projectId && ctx.wizard.state.projectId) {
      projectId = ctx.wizard.state.projectId;
    }

    if (!projectId) {
      logger.error("[ReelsWizard] Project ID is undefined");
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞."
      );
      clearSessionState(ctx, "missing_project_id");
      await safeSceneTransition(ctx, "project_wizard", "missing_project_id");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º sourceType –∏ sourceId –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –∏–∑ wizard.state
    const state = ctx.scene.state as { sourceType?: "competitor" | "hashtag"; sourceId?: string | number };
    let sourceType = state.sourceType || ctx.scene.session.currentSourceType;
    let sourceId = state.sourceId || ctx.scene.session.currentSourceId;

    if (!sourceType && ctx.wizard.state.sourceType) {
      sourceType = ctx.wizard.state.sourceType;
    }
    if (!sourceId && ctx.wizard.state.sourceId) {
      sourceId = ctx.wizard.state.sourceId;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ wizard.state –∏ –≤ —Å–µ—Å—Å–∏–∏
    ctx.wizard.state.projectId = projectId;
    ctx.scene.session.currentProjectId = projectId;
    if (sourceType) {
      ctx.wizard.state.sourceType = sourceType;
      ctx.scene.session.currentSourceType = sourceType;
    }
    if (sourceId) {
      ctx.wizard.state.sourceId = sourceId;
      ctx.scene.session.currentSourceId = sourceId;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ —Å—Ü–µ–Ω—ã
    ctx.scene.session.step = ScraperSceneStep.REELS_LIST;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    ctx.scene.session.reelsPage = ctx.scene.session.reelsPage || 1;
    ctx.scene.session.reelsPerPage = ctx.scene.session.reelsPerPage || 5;

    try {
      await ctx.storage.initialize();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
      const project = await ctx.storage.getProjectById(projectId);

      if (!project) {
        logger.error(`[ReelsWizard] Project with ID ${projectId} not found`);
        await ctx.reply(
          "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
        );
        clearSessionState(ctx, "project_not_found");
        await safeSceneTransition(ctx, "project_wizard", "project_not_found");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ wizard.state
      ctx.wizard.state.projectName = project.name;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Reels
      const filter: ReelsFilter = ctx.scene.session.reelsFilter || {
        projectId,
        limit: ctx.scene.session.reelsPerPage,
        offset: (ctx.scene.session.reelsPage - 1) * ctx.scene.session.reelsPerPage,
        orderBy: "published_at",
        orderDirection: "DESC",
      };

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∏ ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ñ–∏–ª—å—Ç—Ä
      if (sourceType && sourceId) {
        filter.sourceType = sourceType;
        filter.sourceId = sourceId;
      }

      // –ü–æ–ª—É—á–∞–µ–º Reels —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
      const reels = await ctx.storage.getReels(filter);

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      let totalReels = 0;
      if (ctx.storage.getReelsCount) {
        totalReels = await ctx.storage.getReelsCount({
          projectId,
          sourceType,
          sourceId,
        });
      } else {
        // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏–Ω—É –º–∞—Å—Å–∏–≤–∞ Reels
        totalReels = reels.length;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
      const totalPages = Math.ceil(totalReels / ctx.scene.session.reelsPerPage);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
      let title = `üé¨ *Reels –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*`;

      if (sourceType && sourceId) {
        if (sourceType === "competitor") {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–µ
          const competitors = await ctx.storage.getCompetitorAccounts(projectId);
          const competitor = competitors.find(c => c.id === Number(sourceId));

          if (competitor) {
            title += `\nüë§ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: *${competitor.username}*`;
          }
        } else if (sourceType === "hashtag") {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ—à—Ç–µ–≥–µ
          const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);
          const hashtag = hashtags?.find(h => h.id === Number(sourceId));

          if (hashtag) {
            title += `\n#Ô∏è‚É£ –•–µ—à—Ç–µ–≥: *#${hashtag.hashtag}*`;
          }
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = `${title}\n\n`;

      if (reels.length === 0) {
        message += "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Reels. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.";

        await ctx.reply(message, {
          parse_mode: "Markdown",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥", `scrape_project`)],
            [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `back_to_project`)]
          ])
        });

        return;
      }

      message += `–ù–∞–π–¥–µ–Ω–æ Reels: *${totalReels}*\n`;
      message += `–°—Ç—Ä–∞–Ω–∏—Ü–∞ *${ctx.scene.session.reelsPage}* –∏–∑ *${totalPages}*\n\n`;
      message += "–í—ã–±–µ—Ä–∏—Ç–µ Reel –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:";

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      await ctx.reply(message, {
        parse_mode: "Markdown",
        ...createReelsListKeyboard(
          reels,
          projectId,
          ctx.scene.session.reelsPage,
          totalPages,
          sourceType as "competitor" | "hashtag" | undefined,
          sourceId
        )
      });
    } catch (error) {
      logger.error("[ReelsWizard] Error in step 1:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      );
      clearSessionState(ctx, "data_loading_error");
      await safeSceneTransition(ctx, "project_wizard", "data_loading_error");
    } finally {
      await ctx.storage.close();
    }

    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    return;
  },

  // –®–∞–≥ 2: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Reel
  async (ctx) => {
    logger.info(`[ReelsWizard] –®–∞–≥ 2: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Reel`);
    logger.debug(`[ReelsWizard] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.wizard.state:`, ctx.wizard.state);

    const { projectId, reelId } = ctx.wizard.state;

    if (!projectId || !reelId) {
      logger.error("[ReelsWizard] Project ID or Reel ID is undefined");
      await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ Reel. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
      clearSessionState(ctx, "missing_ids_step_2");
      return ctx.wizard.selectStep(0);
    }

    try {
      await ctx.storage.initialize();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Reel
      let reel = null;
      if (ctx.storage.getReelById) {
        reel = await ctx.storage.getReelById(reelId);
      } else {
        // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º Reel –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        const reels = await ctx.storage.getReels({ projectId });
        reel = reels.find(r => r.instagram_id === reelId) || null;
      }

      if (!reel) {
        logger.error(`[ReelsWizard] Reel with ID ${reelId} not found`);
        await ctx.reply("Reel –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.");
        return ctx.wizard.selectStep(0);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
      let sourceInfo = "";
      if (reel.source_type === "competitor") {
        sourceInfo = `üë§ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: *${reel.author_username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}*`;
      } else if (reel.source_type === "hashtag") {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ—à—Ç–µ–≥–µ
        const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);
        const hashtag = hashtags?.find(h => h.id === Number(reel.source_id));

        if (hashtag) {
          sourceInfo = `#Ô∏è‚É£ –•–µ—à—Ç–µ–≥: *#${hashtag.hashtag}*`;
        } else {
          sourceInfo = `#Ô∏è‚É£ –•–µ—à—Ç–µ–≥: *ID ${reel.source_id}*`;
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Reel
      let message = `üé¨ *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Reel*\n\n`;
      message += sourceInfo ? `${sourceInfo}\n` : "";
      message += `üë§ –ê–≤—Ç–æ—Ä: *${reel.author_username || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}*\n`;
      message += `üìÖ –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: *${formatDate(reel.published_at)}*\n`;
      message += `üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: *${formatViews(reel.views)}*\n`;
      message += `‚ù§Ô∏è –õ–∞–π–∫–∏: *${reel.likes || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}*\n`;
      message += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: *${reel.comments_count || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}*\n`;

      if (reel.duration) {
        message += `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *${reel.duration} —Å–µ–∫.*\n`;
      }

      if (reel.music_title) {
        message += `üéµ –ú—É–∑—ã–∫–∞: *${reel.music_title}*\n`;
      }

      message += `\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n${reel.caption || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}`;

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ
      if (reel.transcript_status) {
        message += "\n\nüéôÔ∏è *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:* ";

        switch (reel.transcript_status) {
          case "pending":
            message += "–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É";
            break;
          case "processing":
            message += "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
            break;
          case "completed":
            message += "–ó–∞–≤–µ—Ä—à–µ–Ω–∞";
            if (reel.transcript) {
              message += "\n\n*–§—Ä–∞–≥–º–µ–Ω—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:*\n";
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
              const previewText = reel.transcript.length > 100
                ? reel.transcript.substring(0, 100) + "..."
                : reel.transcript;
              message += previewText;
            }
            break;
          case "failed":
            message += "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ";
            break;
          default:
            message += "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω";
        }
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      if (reel.thumbnail_url) {
        await ctx.replyWithPhoto(reel.thumbnail_url, {
          caption: message,
          parse_mode: "Markdown",
          ...createReelDetailsKeyboard(
            reel,
            projectId,
            ctx.wizard.state.sourceType,
            ctx.wizard.state.sourceId
          )
        });
      } else {
        await ctx.reply(message, {
          parse_mode: "Markdown",
          ...createReelDetailsKeyboard(
            reel,
            projectId,
            ctx.wizard.state.sourceType,
            ctx.wizard.state.sourceId
          )
        });
      }
    } catch (error) {
      logger.error("[ReelsWizard] Error in step 2:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      );
      return ctx.wizard.selectStep(0);
    } finally {
      await ctx.storage.close();
    }

    // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
    return;
  }
);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ü–µ–Ω—ã
reelsWizardScene.action("back_to_project", async (ctx) => {
  logger.info(`[ReelsWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'back_to_project' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
  clearSessionState(ctx, "back_to_project_clicked");
  await safeSceneTransition(ctx, "project_wizard", "back_to_project_clicked");
});

reelsWizardScene.action("scrape_project", async (ctx) => {
  logger.info(`[ReelsWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'scrape_project' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const projectId = ctx.wizard.state.projectId;

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
  clearSessionState(ctx, "scrape_project_clicked");
  ctx.scene.session.currentProjectId = projectId;
  await safeSceneTransition(ctx, "scraping_wizard", "scrape_project_clicked");
});

reelsWizardScene.action(/reel_details_(\d+)_(.+)/, async (ctx) => {
  logger.info(`[ReelsWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'reel_details' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const projectId = parseInt(ctx.match[1], 10);
  const reelId = ctx.match[2];

  if (isNaN(projectId) || !reelId) {
    logger.warn("[ReelsWizard] Invalid project ID or reel ID from action match");
    await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
    return ctx.wizard.selectStep(0);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ wizard.state –∏ –≤ —Å–µ—Å—Å–∏–∏
  ctx.wizard.state.projectId = projectId;
  ctx.wizard.state.reelId = reelId;
  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.currentReelId = reelId;
  ctx.scene.session.step = ScraperSceneStep.REEL_DETAILS;

  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Reel
  return ctx.wizard.selectStep(1);
});

reelsWizardScene.action(/reels_page_(\d+)_(\d+)(?:_(.+)_(.+))?/, async (ctx) => {
  logger.info(`[ReelsWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'reels_page' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const projectId = parseInt(ctx.match[1], 10);
  const page = parseInt(ctx.match[2], 10);
  const sourceType = ctx.match[3] as "competitor" | "hashtag" | undefined;
  const sourceId = ctx.match[4];

  if (isNaN(projectId) || isNaN(page)) {
    logger.warn("[ReelsWizard] Invalid project ID or page from action match");
    await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.");
    return ctx.wizard.selectStep(0);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ wizard.state –∏ –≤ —Å–µ—Å—Å–∏–∏
  ctx.wizard.state.projectId = projectId;
  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.reelsPage = page;

  if (sourceType) {
    ctx.wizard.state.sourceType = sourceType;
    ctx.scene.session.currentSourceType = sourceType;
  }
  if (sourceId) {
    ctx.wizard.state.sourceId = sourceId;
    ctx.scene.session.currentSourceId = sourceId;
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ Reels
  return ctx.wizard.selectStep(0);
});

reelsWizardScene.action(/reels_list_(\d+)(?:_(.+)_(.+))?/, async (ctx) => {
  logger.info(`[ReelsWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'reels_list' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const projectId = parseInt(ctx.match[1], 10);
  const sourceType = ctx.match[2] as "competitor" | "hashtag" | undefined;
  const sourceId = ctx.match[3];

  if (isNaN(projectId)) {
    logger.warn("[ReelsWizard] Invalid project ID from action match");
    await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    return ctx.wizard.selectStep(0);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ wizard.state –∏ –≤ —Å–µ—Å—Å–∏–∏
  ctx.wizard.state.projectId = projectId;
  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.REELS_LIST;

  if (sourceType) {
    ctx.wizard.state.sourceType = sourceType;
    ctx.scene.session.currentSourceType = sourceType;
  }
  if (sourceId) {
    ctx.wizard.state.sourceId = sourceId;
    ctx.scene.session.currentSourceId = sourceId;
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —à–∞–≥—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ Reels
  return ctx.wizard.selectStep(0);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
reelsWizardScene.action(/analytics_enter_(\d+)/, async (ctx) => {
  logger.info(`[ReelsWizard] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'analytics_enter' –≤—ã–∑–≤–∞–Ω`);
  await ctx.answerCbQuery();

  const projectId = parseInt(ctx.match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[ReelsWizard] Invalid project ID from action match");
    await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    return ctx.wizard.selectStep(0);
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É
  clearSessionState(ctx, "analytics_enter_clicked");
  ctx.scene.session.currentProjectId = projectId;
  await safeSceneTransition(ctx, "analytics_wizard", "analytics_enter_clicked");
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /reels
export function setupReelsWizard(bot: any) {
  bot.command('reels', async (ctx: any) => {
    logger.info("[ReelsWizard] Command /reels triggered");
    await ctx.scene.enter('reels_wizard');
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä Reels" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
  bot.hears('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä Reels', async (ctx: any) => {
    logger.info("[ReelsWizard] Button 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä Reels' clicked");
    await ctx.scene.enter('reels_wizard');
  });
}

export default reelsWizardScene;
