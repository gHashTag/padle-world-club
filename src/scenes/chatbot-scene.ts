import { Scenes, Markup } from "telegraf";
import { ScraperSceneStep, ScraperSceneSessionData, StorageAdapter } from "../types";
import { logger } from "../logger";
import { EmbeddingsService } from "../services/embeddings-service";
import { ChatbotService } from "../services/chatbot-service";
import { registerButtons } from "../utils/button-handler";

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞, —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏ –≤–∏–¥–µ–æ
 */
export class ChatbotScene extends Scenes.BaseScene<Scenes.SceneContext> {
  private storage: StorageAdapter;
  private embeddingsService: EmbeddingsService;
  private chatbotService: ChatbotService;

  /**
   * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ü–µ–Ω—ã
   * @param storage –ê–¥–∞–ø—Ç–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   * @param apiKey API –∫–ª—é—á OpenAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  constructor(storage: StorageAdapter, apiKey?: string) {
    super("chatbot_scene");
    this.storage = storage;
    this.embeddingsService = new EmbeddingsService(storage, apiKey);
    this.chatbotService = new ChatbotService(storage, this.embeddingsService, apiKey);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ü–µ–Ω—ã
    this.enter(this.onSceneEnter.bind(this));
    this.leave(this.onSceneLeave.bind(this));

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    registerButtons(this, [
      {
        id: /^chat_with_reel_(\d+)$/,
        handler: this.onChatWithReel.bind(this),
        errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —á–∞—Ç–∞ —Å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        verbose: true
      },
      {
        id: "clear_chat_history",
        handler: this.onClearChatHistory.bind(this),
        errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        verbose: true
      },
      {
        id: "back_to_reel",
        handler: this.onBackToReel.bind(this),
        errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        verbose: true
      },
      {
        id: "back_to_reels",
        handler: this.onBackToReels.bind(this),
        errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        verbose: true
      }
    ]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    this.on("text", this.onText.bind(this));
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onSceneEnter(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;

    // –ï—Å–ª–∏ –µ—Å—Ç—å ID Reel, –Ω–∞—á–∏–Ω–∞–µ–º —á–∞—Ç —Å —ç—Ç–∏–º Reel
    if (session.currentReelId) {
      await this.startChatWithReel(ctx, session.currentReelId);
    } else {
      // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏
      await this.showReelsWithTranscripts(ctx);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω—ã
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onSceneLeave(ctx: Scenes.SceneContext) {
    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á–∞—Ç–æ–º
    const session = ctx.scene.session as ScraperSceneSessionData;
    session.currentReelId = undefined;
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async showReelsWithTranscripts(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;

    try {
      await ctx.storage.initialize();

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏
      const reels = await ctx.storage.executeQuery(
        `SELECT r.id, r.instagram_id, r.caption, r.url, r.transcript
         FROM reels r
         WHERE r.project_id = $1 AND r.transcript IS NOT NULL
         ORDER BY r.published_at DESC
         LIMIT 10`,
        [session.currentProjectId]
      );

      if (!reels || reels.rows.length === 0) {
        await ctx.reply(
          "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –≤–∏–¥–µ–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Reels.",
          Markup.inlineKeyboard([
            [Markup.button.callback("üîô –ö –ø—Ä–æ—Å–º–æ—Ç—Ä—É Reels", "back_to_reels")],
          ])
        );
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = "üìù *Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏*\n\n";
      message += "–í—ã–±–µ—Ä–∏—Ç–µ Reel –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —á–∞—Ç-–±–æ—Ç–æ–º:\n\n";

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const buttons = [];

      for (const reel of reels.rows) {
        const caption = reel.caption
          ? (reel.caption.length > 30 ? reel.caption.substring(0, 30) + "..." : reel.caption)
          : "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è";

        buttons.push([
          Markup.button.callback(
            `üí¨ ${caption}`,
            `chat_with_reel_${reel.instagram_id}`
          ),
        ]);
      }

      // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
      buttons.push([
        Markup.button.callback("üîô –ö –ø—Ä–æ—Å–º–æ—Ç—Ä—É Reels", "back_to_reels"),
      ]);

      const keyboard = Markup.inlineKeyboard(buttons);

      await ctx.reply(message, {
        parse_mode: "Markdown",
        ...keyboard,
      });
    } catch (error) {
      logger.error("[ChatbotScene] Error showing reels with transcripts:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ Reels —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞–º–∏.");
    } finally {
      await ctx.storage.close();
    }
  }

  /**
   * –ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å Reel
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   * @param reelId ID Reel
   */
  private async startChatWithReel(ctx: Scenes.SceneContext, reelId: string) {
    const session = ctx.scene.session as ScraperSceneSessionData;
    session.currentReelId = reelId;

    try {
      await ctx.storage.initialize();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Reel
      const reel = await ctx.storage.getReelById(reelId);

      if (!reel) {
        await ctx.reply("Reel –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.");
        await this.showReelsWithTranscripts(ctx);
        return;
      }

      if (!reel.transcript) {
        await ctx.reply(
          "–£ —ç—Ç–æ–≥–æ Reel –Ω–µ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –≤–∏–¥–µ–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ Reels.",
          Markup.inlineKeyboard([
            [Markup.button.callback("üîô –ö –ø—Ä–æ—Å–º–æ—Ç—Ä—É Reels", "back_to_reels")],
          ])
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ Reel
      const embedding = await this.embeddingsService.getEmbeddingByReelId(reelId);

      if (!embedding) {
        // –ï—Å–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        await ctx.reply("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —á–∞—Ç-–±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ...");

        const embeddingId = await this.embeddingsService.createAndSaveEmbedding(
          reelId,
          reel.transcript
        );

        if (!embeddingId) {
          await ctx.reply(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —á–∞—Ç-–±–æ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            Markup.inlineKeyboard([
              [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", "back_to_reels")],
            ])
          );
          return;
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = `üí¨ *–ß–∞—Ç —Å –≤–∏–¥–µ–æ*\n\n`;
      message += `–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.\n\n`;
      message += `*–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ:*\n${reel.caption || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n\n`;
      message += `–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç.`;

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞", "clear_chat_history")],
        [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", "back_to_reels")],
      ]);

      await ctx.reply(message, {
        parse_mode: "Markdown",
        ...keyboard,
      });
    } catch (error) {
      logger.error("[ChatbotScene] Error starting chat with reel:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —á–∞—Ç–∞ —Å –≤–∏–¥–µ–æ.");
    } finally {
      await ctx.storage.close();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ Reel –¥–ª—è —á–∞—Ç–∞
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onChatWithReel(ctx: Scenes.SceneContext) {
    const match = ctx.match as RegExpMatchArray;
    const reelId = match[1];

    await this.startChatWithReel(ctx, reelId);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onClearChatHistory(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;

    if (!session.currentReelId) {
      await ctx.answerCbQuery("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.");
      return;
    }

    try {
      const userId = ctx.from?.id.toString() || "";
      const success = await this.chatbotService.clearChatHistory(userId, session.currentReelId);

      if (success) {
        await ctx.answerCbQuery("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞.");
        await ctx.reply("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.");
      } else {
        await ctx.answerCbQuery("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.");
      }
    } catch (error) {
      logger.error("[ChatbotScene] Error clearing chat history:", error);
      await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.");
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–µ—Ç–∞–ª—è–º Reel
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onBackToReel(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;

    if (!session.currentReelId || !session.currentProjectId) {
      await ctx.scene.leave();
      await ctx.scene.enter("reels_scene");
      return;
    }

    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
    await ctx.scene.leave();

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–µ—Ç–∞–ª—è–º Reel
    ctx.scene.session.currentReelId = session.currentReelId;
    ctx.scene.session.currentProjectId = session.currentProjectId;
    await ctx.scene.enter("reels_scene");
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É Reels
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onBackToReels(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;

    // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã
    await ctx.scene.leave();

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É Reels
    if (session.currentProjectId) {
      ctx.scene.session.currentProjectId = session.currentProjectId;
    }
    await ctx.scene.enter("reels_scene");
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ü–µ–Ω—ã
   */
  private async onText(ctx: Scenes.SceneContext) {
    const session = ctx.scene.session as ScraperSceneSessionData;
    const text = ctx.message.text;

    if (!session.currentReelId) {
      await ctx.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ Reel –¥–ª—è —á–∞—Ç–∞.",
        Markup.inlineKeyboard([
          [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", "back_to_reels")],
        ])
      );
      return;
    }

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
      await ctx.sendChatAction("typing");

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      const userId = ctx.from?.id.toString() || "";
      const response = await this.chatbotService.generateResponse(
        userId,
        session.currentReelId,
        text
      );

      if (response) {
        await ctx.reply(response, {
          parse_mode: "Markdown",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞", "clear_chat_history")],
            [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", "back_to_reels")],
          ]),
        });
      } else {
        await ctx.reply(
          "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π Reel.",
          Markup.inlineKeyboard([
            [Markup.button.callback("üîô –ö —Å–ø–∏—Å–∫—É Reels", "back_to_reels")],
          ])
        );
      }
    } catch (error) {
      logger.error("[ChatbotScene] Error generating response:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  }
}
