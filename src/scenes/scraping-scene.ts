import { Scenes, Markup } from "telegraf";
import type { ScraperBotContext } from "../types";
import { ScraperSceneStep } from "../types";
import { logger } from "../logger";
import MockScraperService from "../services/mock-scraper-service";
import { registerButtons } from "../utils/button-handler";

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–æ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Instagram
 */
export const scrapingScene = new Scenes.BaseScene<ScraperBotContext>(
  "instagram_scraper_scraping"
);

// --- Enter Scene Handler ---
export async function handleScrapingEnter(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] Enter handler triggered");

  if (!ctx.from) {
    logger.error("[ScrapingScene] ctx.from is undefined");
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
    );
    return ctx.scene.leave();
  }

  // –ü–æ–ª—É—á–∞–µ–º projectId –∏–∑ —Å–µ—Å—Å–∏–∏
  const projectId = ctx.scene.session.currentProjectId;

  if (!projectId) {
    logger.error("[ScrapingScene] Project ID is undefined");
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞."
    );
    ctx.scene.enter("instagram_scraper_projects");
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.SCRAPING_MENU;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      logger.error(`[ScrapingScene] Project with ID ${projectId} not found`);
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
      );
      ctx.scene.enter("instagram_scraper_projects");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitors = await ctx.storage.getCompetitorAccounts(projectId, true);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤
    const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üîç *–°–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n`;

    if (competitors.length === 0 && (!hashtags || hashtags.length === 0)) {
      message += "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.\n";
      message += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ö–µ—à—Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.";

      await ctx.reply(message, {
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard([
          [Markup.button.callback("üë• –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", `competitors_project_${projectId}`)],
          [Markup.button.callback("üìä –î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", `manage_hashtags_${projectId}`)],
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
        ])
      });

      return;
    }

    message += "*–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:*\n\n";

    if (competitors.length > 0) {
      message += `üë• *–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (${competitors.length}):*\n`;
      competitors.slice(0, 5).forEach((competitor, index) => {
        message += `${index + 1}. ${competitor.username}\n`;
      });
      if (competitors.length > 5) {
        message += `...–∏ –µ—â–µ ${competitors.length - 5}\n`;
      }
      message += "\n";
    }

    if (hashtags && hashtags.length > 0) {
      message += `üìä *–•–µ—à—Ç–µ–≥–∏ (${hashtags.length}):*\n`;
      hashtags.slice(0, 5).forEach((hashtag, index) => {
        message += `${index + 1}. #${hashtag.hashtag}\n`;
      });
      if (hashtags.length > 5) {
        message += `...–∏ –µ—â–µ ${hashtags.length - 5}\n`;
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    const keyboard = [];

    if (competitors.length > 0) {
      keyboard.push([Markup.button.callback("üë• –°–∫—Ä–∞–ø–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", `scrape_competitors_${projectId}`)]);
    }

    if (hashtags && hashtags.length > 0) {
      keyboard.push([Markup.button.callback("üìä –°–∫—Ä–∞–ø–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", `scrape_hashtags_${projectId}`)]);
    }

    keyboard.push([Markup.button.callback("üîÑ –°–∫—Ä–∞–ø–∏—Ç—å –≤—Å—ë", `scrape_all_${projectId}`)]);
    keyboard.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]);

    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard(keyboard)
    });
  } catch (error) {
    logger.error("[ScrapingScene] Error in enter handler:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
    await ctx.scene.leave();
  } finally {
    await ctx.storage.close();
  }
}

scrapingScene.enter(handleScrapingEnter);

// --- Action Handlers ---

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
export async function handleScrapeCompetitorsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleScrapeCompetitorsAction triggered");
  console.log("[DEBUG] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∫—Ä–∞–ø–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤' –≤—ã–∑–≤–∞–Ω");
  console.log("[DEBUG] match:", ctx.match);

  try {
    const projectId = parseInt((ctx.match as unknown as RegExpExecArray)[1], 10);
    console.log(`[DEBUG] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π projectId: ${projectId}`);

    if (isNaN(projectId)) {
      logger.warn("[ScrapingScene] Invalid project ID from action match");
      console.error(`[ERROR] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π projectId: ${(ctx.match as unknown as RegExpExecArray)[1]}`);
      if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
      ctx.scene.reenter();
      return;
    }

    console.log(`[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ projectId –≤ —Å–µ—Å—Å–∏–∏: ${projectId}`);
    ctx.scene.session.currentProjectId = projectId;
    ctx.scene.session.step = ScraperSceneStep.SCRAPING_COMPETITORS;

    try {
      await ctx.storage.initialize();

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      console.log(`[DEBUG] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}`);
      const competitors = await ctx.storage.getCompetitorAccounts(projectId, true);
      console.log(`[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitors.length}`);

      if (competitors.length === 0) {
        console.log("[DEBUG] –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        await ctx.answerCbQuery("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.");
        ctx.scene.reenter();
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      let message = "üë• *–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:*\n\n";

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      console.log("[DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤");
      const keyboard = competitors.map((competitor) => [
        Markup.button.callback(
          competitor.username,
          `scrape_competitor_${projectId}_${competitor.id}`
        )
      ]);

      keyboard.push([Markup.button.callback("üîÑ –°–∫—Ä–∞–ø–∏—Ç—å –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", `scrape_all_competitors_${projectId}`)]);
      keyboard.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥", `back_to_scraping_menu`)]);

      console.log("[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π");
      await ctx.editMessageText(message, {
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard(keyboard)
      });

      if (ctx.callbackQuery) {
        console.log("[DEBUG] –û—Ç–≤–µ—Ç –Ω–∞ callback query");
        await ctx.answerCbQuery();
      }
    } catch (error) {
      logger.error("[ScrapingScene] Error in handleScrapeCompetitorsAction:", error);
      console.error("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:", error);
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      );
    } finally {
      console.log("[DEBUG] –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î");
      await ctx.storage.close();
    }
  } catch (error) {
    console.error("[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ '–°–∫—Ä–∞–ø–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤':", error);
    try {
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞").catch(() => {});
    } catch (e) {
      console.error("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:", e);
    }
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å—Ü–µ–Ω–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
console.log("[DEBUG] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å—Ü–µ–Ω–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞");

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
export async function handleScrapeHashtagsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleScrapeHashtagsAction triggered");

  const projectId = parseInt((ctx.match as unknown as RegExpExecArray)[1], 10);
  if (isNaN(projectId)) {
    logger.warn("[ScrapingScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.SCRAPING_HASHTAGS;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤
    const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);

    if (!hashtags || hashtags.length === 0) {
      await ctx.answerCbQuery("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤.");
      ctx.scene.reenter();
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ö–µ—à—Ç–µ–≥–æ–≤
    let message = "üìä *–í—ã–±–µ—Ä–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:*\n\n";

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
    const keyboard = hashtags.map((hashtag) => [
      Markup.button.callback(
        `#${hashtag.hashtag}`,
        `scrape_hashtag_${projectId}_${hashtag.id}`
      )
    ]);

    keyboard.push([Markup.button.callback("üîÑ –°–∫—Ä–∞–ø–∏—Ç—å –≤—Å–µ —Ö–µ—à—Ç–µ–≥–∏", `scrape_all_hashtags_${projectId}`)]);
    keyboard.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥", `back_to_scraping_menu`)]);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard(keyboard)
    });

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[ScrapingScene] Error in handleScrapeHashtagsAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ö–µ—à—Ç–µ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
export async function handleBackToScrapingMenuAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleBackToScrapingMenuAction triggered");
  console.log("[DEBUG] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞' –≤—ã–∑–≤–∞–Ω");

  try {
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }

    console.log("[DEBUG] –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ reenter");
    ctx.scene.reenter();
    return;
  } catch (error) {
    console.error("[ERROR] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞':", error);
    try {
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    } catch (e) {
      console.error("[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:", e);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
export async function handleBackToProjectAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleBackToProjectAction triggered");

  const projectId = ctx.scene.session.currentProjectId;

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }

  if (!projectId) {
    ctx.scene.enter("instagram_scraper_projects");
    return;
  }

  ctx.scene.enter("instagram_scraper_projects", { projectId });
  return;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
export async function handleScrapeCompetitorAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleScrapeCompetitorAction triggered");

  // –ü–æ–ª—É—á–∞–µ–º projectId –∏ competitorId –∏–∑ match
  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const competitorId = parseInt(match[2], 10);

  if (isNaN(projectId) || isNaN(competitorId)) {
    logger.warn("[ScrapingScene] Invalid project ID or competitor ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.SCRAPING_PROGRESS;

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    await ctx.answerCbQuery("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥...");

    const progressMessage = await ctx.reply("‚è≥ *–°–∫—Ä–∞–ø–∏–Ω–≥ Reels –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞...*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", {
      parse_mode: "Markdown"
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–µ
    const competitors = await ctx.storage.getCompetitorAccounts(projectId);
    const competitor = competitors.find(c => c.id === competitorId);

    if (!competitor) {
      await ctx.reply("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.");
      ctx.scene.reenter();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    const scraperService = new MockScraperService(ctx.storage);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥
    const savedCount = await scraperService.scrapeCompetitorReels(projectId, competitorId, {
      maxReels: 10
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    await ctx.telegram.editMessageText(
      ctx.chat?.id,
      progressMessage.message_id,
      undefined,
      `‚úÖ *–°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n–£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} Reels –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ *${competitor.username}*.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Reels".`,
      {
        parse_mode: "Markdown",
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", `show_reels_competitor_${projectId}_${competitorId}`)],
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", `scrape_competitors_${projectId}`)],
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞", "back_to_scraping_menu")]
        ]).reply_markup
      }
    );

    ctx.scene.session.step = ScraperSceneStep.SCRAPING_RESULTS;
  } catch (error) {
    logger.error("[ScrapingScene] Error in handleScrapeCompetitorAction:", error);
    await ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
      Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", `scrape_competitors_${projectId}`)],
        [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞", "back_to_scraping_menu")]
      ])
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞
export async function handleScrapeHashtagAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleScrapeHashtagAction triggered");

  // –ü–æ–ª—É—á–∞–µ–º projectId –∏ hashtagId –∏–∑ match
  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const hashtagId = parseInt(match[2], 10);

  if (isNaN(projectId) || isNaN(hashtagId)) {
    logger.warn("[ScrapingScene] Invalid project ID or hashtag ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Ö–µ—à—Ç–µ–≥–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.SCRAPING_PROGRESS;

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    await ctx.answerCbQuery("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥...");

    const progressMessage = await ctx.reply("‚è≥ *–°–∫—Ä–∞–ø–∏–Ω–≥ Reels –ø–æ —Ö–µ—à—Ç–µ–≥—É...*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", {
      parse_mode: "Markdown"
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ—à—Ç–µ–≥–µ
    const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);
    const hashtag = hashtags?.find(h => h.id === hashtagId);

    if (!hashtag) {
      await ctx.reply("–•–µ—à—Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.");
      ctx.scene.reenter();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    const scraperService = new MockScraperService(ctx.storage);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥
    const savedCount = await scraperService.scrapeHashtagReels(projectId, hashtagId, {
      maxReels: 10
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    await ctx.telegram.editMessageText(
      ctx.chat?.id,
      progressMessage.message_id,
      undefined,
      `‚úÖ *–°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n–£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount} Reels –¥–ª—è —Ö–µ—à—Ç–µ–≥–∞ *#${hashtag.hashtag}*.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Reels".`,
      {
        parse_mode: "Markdown",
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", `show_reels_hashtag_${projectId}_${hashtagId}`)],
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ö–µ—à—Ç–µ–≥–æ–≤", `scrape_hashtags_${projectId}`)],
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞", "back_to_scraping_menu")]
        ]).reply_markup
      }
    );

    ctx.scene.session.step = ScraperSceneStep.SCRAPING_RESULTS;
  } catch (error) {
    logger.error("[ScrapingScene] Error in handleScrapeHashtagAction:", error);
    await ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
      Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ö–µ—à—Ç–µ–≥–æ–≤", `scrape_hashtags_${projectId}`)],
        [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞", "back_to_scraping_menu")]
      ])
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
export async function handleScrapeAllCompetitorsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleScrapeAllCompetitorsAction triggered");

  // –ü–æ–ª—É—á–∞–µ–º projectId –∏–∑ match
  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[ScrapingScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.SCRAPING_PROGRESS;

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    await ctx.answerCbQuery("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...");

    const progressMessage = await ctx.reply("‚è≥ *–°–∫—Ä–∞–ø–∏–Ω–≥ Reels –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", {
      parse_mode: "Markdown"
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitors = await ctx.storage.getCompetitorAccounts(projectId);

    if (competitors.length === 0) {
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.");
      ctx.scene.reenter();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    const scraperService = new MockScraperService(ctx.storage);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    let totalSavedCount = 0;
    let processedCount = 0;

    for (const competitor of competitors) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
      await ctx.telegram.editMessageText(
        ctx.chat?.id,
        progressMessage.message_id,
        undefined,
        `‚è≥ *–°–∫—Ä–∞–ø–∏–Ω–≥ Reels –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...*\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}/${competitors.length}\n–¢–µ–∫—É—â–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç: ${competitor.username}`,
        {
          parse_mode: "Markdown"
        }
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
      const savedCount = await scraperService.scrapeCompetitorReels(projectId, competitor.id, {
        maxReels: 5 // –ú–µ–Ω—å—à–µ Reels –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –±–∞–∑—É
      });

      totalSavedCount += savedCount;
      processedCount++;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    await ctx.telegram.editMessageText(
      ctx.chat?.id,
      progressMessage.message_id,
      undefined,
      `‚úÖ *–°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${competitors.length} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.\n–°–æ–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${totalSavedCount} Reels.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Reels".`,
      {
        parse_mode: "Markdown",
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", `show_reels_project_${projectId}`)],
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞", "back_to_scraping_menu")]
        ]).reply_markup
      }
    );

    ctx.scene.session.step = ScraperSceneStep.SCRAPING_RESULTS;
  } catch (error) {
    logger.error("[ScrapingScene] Error in handleScrapeAllCompetitorsAction:", error);
    await ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
      Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞", "back_to_scraping_menu")]
      ])
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ö–µ—à—Ç–µ–≥–æ–≤
export async function handleScrapeAllHashtagsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleScrapeAllHashtagsAction triggered");

  // –ü–æ–ª—É—á–∞–µ–º projectId –∏–∑ match
  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[ScrapingScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.SCRAPING_PROGRESS;

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    await ctx.answerCbQuery("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –≤—Å–µ—Ö —Ö–µ—à—Ç–µ–≥–æ–≤...");

    const progressMessage = await ctx.reply("‚è≥ *–°–∫—Ä–∞–ø–∏–Ω–≥ Reels –ø–æ –≤—Å–µ–º —Ö–µ—à—Ç–µ–≥–∞–º...*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", {
      parse_mode: "Markdown"
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤
    const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);

    if (!hashtags || hashtags.length === 0) {
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤.");
      ctx.scene.reenter();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    const scraperService = new MockScraperService(ctx.storage);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞
    let totalSavedCount = 0;
    let processedCount = 0;

    for (const hashtag of hashtags) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
      await ctx.telegram.editMessageText(
        ctx.chat?.id,
        progressMessage.message_id,
        undefined,
        `‚è≥ *–°–∫—Ä–∞–ø–∏–Ω–≥ Reels –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º...*\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}/${hashtags.length}\n–¢–µ–∫—É—â–∏–π —Ö–µ—à—Ç–µ–≥: #${hashtag.hashtag}`,
        {
          parse_mode: "Markdown"
        }
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–µ—à—Ç–µ–≥–∞
      const savedCount = await scraperService.scrapeHashtagReels(projectId, hashtag.id, {
        maxReels: 5 // –ú–µ–Ω—å—à–µ Reels –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö–µ—à—Ç–µ–≥–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –±–∞–∑—É
      });

      totalSavedCount += savedCount;
      processedCount++;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    await ctx.telegram.editMessageText(
      ctx.chat?.id,
      progressMessage.message_id,
      undefined,
      `‚úÖ *–°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${hashtags.length} —Ö–µ—à—Ç–µ–≥–æ–≤.\n–°–æ–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${totalSavedCount} Reels.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Reels".`,
      {
        parse_mode: "Markdown",
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", `show_reels_project_${projectId}`)],
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞", "back_to_scraping_menu")]
        ]).reply_markup
      }
    );

    ctx.scene.session.step = ScraperSceneStep.SCRAPING_RESULTS;
  } catch (error) {
    logger.error("[ScrapingScene] Error in handleScrapeAllHashtagsAction:", error);
    await ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
      Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞", "back_to_scraping_menu")]
      ])
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –≤—Å–µ–≥–æ (–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã + —Ö–µ—à—Ç–µ–≥–∏)
export async function handleScrapeAllAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleScrapeAllAction triggered");

  // –ü–æ–ª—É—á–∞–µ–º projectId –∏–∑ match
  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);

  if (isNaN(projectId)) {
    logger.warn("[ScrapingScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.SCRAPING_PROGRESS;

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    await ctx.answerCbQuery("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥...");

    const progressMessage = await ctx.reply("‚è≥ *–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ Reels...*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", {
      parse_mode: "Markdown"
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ —Ö–µ—à—Ç–µ–≥–æ–≤
    const competitors = await ctx.storage.getCompetitorAccounts(projectId);
    const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);

    if ((competitors.length === 0) && (!hashtags || hashtags.length === 0)) {
      await ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ö–µ—à—Ç–µ–≥–æ–≤.");
      ctx.scene.reenter();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    const scraperService = new MockScraperService(ctx.storage);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    let totalSavedCount = 0;
    let totalProcessedCount = 0;
    const totalItems = competitors.length + (hashtags ? hashtags.length : 0);

    // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    for (const competitor of competitors) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
      await ctx.telegram.editMessageText(
        ctx.chat?.id,
        progressMessage.message_id,
        undefined,
        `‚è≥ *–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ Reels...*\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessedCount}/${totalItems}\n–¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç ${competitor.username}`,
        {
          parse_mode: "Markdown"
        }
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
      const savedCount = await scraperService.scrapeCompetitorReels(projectId, competitor.id, {
        maxReels: 3 // –ú–µ–Ω—å—à–µ Reels –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –±–∞–∑—É
      });

      totalSavedCount += savedCount;
      totalProcessedCount++;
    }

    // –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–µ—à—Ç–µ–≥–∏
    if (hashtags && hashtags.length > 0) {
      for (const hashtag of hashtags) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        await ctx.telegram.editMessageText(
          ctx.chat?.id,
          progressMessage.message_id,
          undefined,
          `‚è≥ *–ü–æ–ª–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ Reels...*\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessedCount}/${totalItems}\n–¢–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫: —Ö–µ—à—Ç–µ–≥ #${hashtag.hashtag}`,
          {
            parse_mode: "Markdown"
          }
        );

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ö–µ—à—Ç–µ–≥–∞
        const savedCount = await scraperService.scrapeHashtagReels(projectId, hashtag.id, {
          maxReels: 3 // –ú–µ–Ω—å—à–µ Reels –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –±–∞–∑—É
        });

        totalSavedCount += savedCount;
        totalProcessedCount++;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    await ctx.telegram.editMessageText(
      ctx.chat?.id,
      progressMessage.message_id,
      undefined,
      `‚úÖ *–°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${totalItems} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (${competitors.length} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ ${hashtags ? hashtags.length : 0} —Ö–µ—à—Ç–µ–≥–æ–≤).\n–°–æ–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${totalSavedCount} Reels.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Reels".`,
      {
        parse_mode: "Markdown",
        reply_markup: Markup.inlineKeyboard([
          [Markup.button.callback("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", `show_reels_project_${projectId}`)],
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞", "back_to_scraping_menu")]
        ]).reply_markup
      }
    );

    ctx.scene.session.step = ScraperSceneStep.SCRAPING_RESULTS;
  } catch (error) {
    logger.error("[ScrapingScene] Error in handleScrapeAllAction:", error);
    await ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
      Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞", "back_to_scraping_menu")]
      ])
    );
  } finally {
    await ctx.storage.close();
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
export async function handleShowReelsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleShowReelsAction triggered");

  const match = ctx.match as unknown as RegExpExecArray;
  const projectId = parseInt(match[1], 10);
  const sourceType = match[2] as "competitor" | "hashtag";
  const sourceId = match[3];

  if (isNaN(projectId)) {
    logger.warn("[ScrapingScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;

  if (sourceType && sourceId) {
    ctx.scene.session.currentSourceType = sourceType;
    ctx.scene.session.currentSourceId = sourceId;
  }

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }

  ctx.scene.enter("instagram_scraper_reels", {
    projectId,
    sourceType,
    sourceId
  });
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
registerButtons(scrapingScene, [
  {
    id: /scrape_competitors_(\d+)/,
    handler: handleScrapeCompetitorsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /scrape_hashtags_(\d+)/,
    handler: handleScrapeHashtagsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ —Ö–µ—à—Ç–µ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: "back_to_scraping_menu",
    handler: handleBackToScrapingMenuAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /project_(\d+)/,
    handler: handleBackToProjectAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ–µ–∫—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /scrape_competitor_(\d+)_(\d+)/,
    handler: handleScrapeCompetitorAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /scrape_hashtag_(\d+)_(\d+)/,
    handler: handleScrapeHashtagAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ —Ö–µ—à—Ç–µ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /scrape_all_competitors_(\d+)/,
    handler: handleScrapeAllCompetitorsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /scrape_all_hashtags_(\d+)/,
    handler: handleScrapeAllHashtagsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ –≤—Å–µ—Ö —Ö–µ—à—Ç–µ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /scrape_all_(\d+)/,
    handler: handleScrapeAllAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∞–ø–∏–Ω–≥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /show_reels_(.+)_(.+)_(.+)/,
    handler: handleShowReelsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  },
  {
    id: /show_reels_project_(\d+)/,
    handler: handleShowReelsAction,
    errorMessage: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    verbose: true
  }
]);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
export default scrapingScene;
