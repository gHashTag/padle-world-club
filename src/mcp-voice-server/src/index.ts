#!/usr/bin/env node

/**
 * üé§ MCP Voice Server –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–¥–ª-—Ü–µ–Ω—Ç—Ä–æ–º
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ñ–æ–∫—É—Å–æ–º "Just To Be Done"
 */

import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";
import { z } from "zod";

// –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ BookingService
let bookingServiceInstance: any = null;

// –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const PingToolSchema = z.object({
  message: z.string().optional().default("Hello from Voice Server!"),
});

const ParseCommandToolSchema = z.object({
  text: z.string().min(1, "Text cannot be empty"),
  language: z.enum(["ru-RU", "en-US", "th-TH"]).optional().default("ru-RU"),
});

const VoiceBookingToolSchema = z.object({
  text: z.string().min(1, "Voice command text cannot be empty"),
  userId: z.string().min(1, "User ID is required"),
  sessionId: z.string().min(1, "Session ID is required"),
  language: z.enum(["ru-RU", "en-US", "th-TH"]).optional().default("ru-RU"),
});

const SelfTestToolSchema = z.object({
  testType: z.enum(["ping", "parse_command", "voice_booking", "full_cycle"]).default("ping"),
  testData: z.string().optional().default("Test data"),
});

/**
 * üèì –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
 */
async function handlePing(args: z.infer<typeof PingToolSchema>) {
  const { message } = PingToolSchema.parse(args);

  return {
    success: true,
    message: `üé§ Voice Server is alive! ${message}`,
    timestamp: new Date().toISOString(),
    server: "MCP Voice Server v1.0.0",
  };
}

/**
 * üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ BookingService
 */
async function createBookingService() {
  if (bookingServiceInstance) {
    return bookingServiceInstance;
  }

  try {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const { VoiceBookingService } = await import("../../services/booking-service");
    const { BookingRepository } = await import("../../repositories/booking-repository");
    const { CourtRepository } = await import("../../repositories/court-repository");
    const { UserRepository } = await import("../../repositories/user-repository");
    const { db } = await import("../../db");

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    const bookingRepo = new BookingRepository(db);
    const courtRepo = new CourtRepository(db);
    const userRepo = new UserRepository(db);

    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è –ø–∞–¥–ª-—Ü–µ–Ω—Ç—Ä–∞
    bookingServiceInstance = new VoiceBookingService(
      bookingRepo,
      courtRepo,
      userRepo,
      {
        defaultDuration: 90, // 1.5 —á–∞—Å–∞
        defaultCurrency: "THB",
        defaultPurpose: "free_play",
        pricePerHour: 1500, // 1500 THB –∑–∞ —á–∞—Å
      }
    );

    return bookingServiceInstance;
  } catch (error) {
    console.error("Failed to create BookingService:", error);
    // Fallback –∫ mock —Å–µ—Ä–≤–∏—Å—É
    const { processVoiceBooking } = await import("../../services/voice-ai");
    return { processVoiceBooking };
  }
}

/**
 * üß† –ü–∞—Ä—Å–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
 */
async function handleParseCommand(args: z.infer<typeof ParseCommandToolSchema>) {
  const { text, language } = ParseCommandToolSchema.parse(args);

  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –Ω–∞—à–µ–≥–æ voice-ai —Å–µ—Ä–≤–∏—Å–∞
    const { parseVoiceCommand } = await import("../../services/voice-ai");

    const result = await parseVoiceCommand(text);

    return {
      success: true,
      command: result,
      originalText: text,
      language,
      timestamp: new Date().toISOString(),
    };
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
      originalText: text,
      language,
      timestamp: new Date().toISOString(),
    };
  }
}

/**
 * üé§ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API
 */
async function handleVoiceBooking(args: z.infer<typeof VoiceBookingToolSchema>) {
  const { text, userId, sessionId, language } = VoiceBookingToolSchema.parse(args);

  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ voice-ai —Å–µ—Ä–≤–∏—Å–∞
    const { parseVoiceCommand, textToVoice } = await import("../../services/voice-ai");

    // 1. –ü–∞—Ä—Å–∏–º –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    const command = await parseVoiceCommand(text);
    if (!command) {
      return {
        success: false,
        error: "Voice command not recognized",
        suggestion: "Try saying: 'Book a court for tomorrow at 2 PM'",
        originalText: text,
        userId,
        sessionId,
        language,
        timestamp: new Date().toISOString(),
      };
    }

    // 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π BookingService
    const bookingService = await createBookingService();

    // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    const booking = await bookingService.processVoiceBooking(command, userId);

    // 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
    const audioResponse = await textToVoice(booking.message, {
      emotion: booking.success ? "excited" : "calm",
    });

    // 5. –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    console.error(`üìù Voice Booking: ${userId} - ${command.command} - ${booking.success}`);

    return {
      success: booking.success,
      bookingId: booking.bookingId,
      message: booking.message,
      audioResponse: audioResponse.audioUrl,
      nextSteps: booking.nextSteps,
      availableSlots: booking.availableSlots,
      command: command,
      originalText: text,
      userId,
      sessionId,
      language,
      timestamp: new Date().toISOString(),
    };
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
      originalText: text,
      userId,
      sessionId,
      language,
      timestamp: new Date().toISOString(),
    };
  }
}

/**
 * üß™ –°–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞
 */
async function handleSelfTest(args: z.infer<typeof SelfTestToolSchema>) {
  const { testType, testData } = SelfTestToolSchema.parse(args);
  const startTime = Date.now();

  try {
    let result: any;

    switch (testType) {
      case "ping":
        result = await handlePing({ message: "Self-test ping" });
        break;

      case "parse_command":
        result = await handleParseCommand({
          text: testData || "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
          language: "ru-RU"
        });
        break;

      case "voice_booking":
        result = await handleVoiceBooking({
          text: testData || "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
          userId: "test-user-123",
          sessionId: "test-session-456",
          language: "ru-RU"
        });
        break;

      case "full_cycle":
        // –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: ping -> parse -> booking
        const pingResult = await handlePing({ message: "Full cycle test" });
        const parseResult = await handleParseCommand({
          text: testData || "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
          language: "ru-RU"
        });
        const bookingResult = await handleVoiceBooking({
          text: testData || "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
          userId: "test-user-123",
          sessionId: "test-session-456",
          language: "ru-RU"
        });

        result = {
          ping: pingResult,
          parse: parseResult,
          booking: bookingResult,
          allSuccessful: pingResult.success && parseResult.success && bookingResult.success
        };
        break;

      default:
        throw new Error(`Unknown test type: ${testType}`);
    }

    const responseTime = Date.now() - startTime;

    return {
      success: true,
      testType,
      result,
      performance: {
        responseTime,
        timestamp: new Date().toISOString(),
      },
      server: "MCP Voice Server v1.0.0",
    };
  } catch (error) {
    const responseTime = Date.now() - startTime;

    return {
      success: false,
      testType,
      error: error instanceof Error ? error.message : "Unknown error",
      performance: {
        responseTime,
        timestamp: new Date().toISOString(),
      },
      server: "MCP Voice Server v1.0.0",
    };
  }
}

/**
 * üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞
 */
async function createVoiceServer() {
  const server = new Server(
    {
      name: "padle-voice-server",
      version: "1.0.0",
    },
    {
      capabilities: {
        tools: {},
      },
    }
  );

  // üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  server.setRequestHandler(ListToolsRequestSchema, async () => {
    return {
      tools: [
        {
          name: "ping",
          description: "üèì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Voice Server",
          inputSchema: {
            type: "object",
            properties: {
              message: {
                type: "string",
                description: "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                default: "Hello from Voice Server!",
              },
            },
          },
        },
        {
          name: "parse_voice_command",
          description: "üß† –ü–∞—Ä—Å–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ç–æ–≤",
          inputSchema: {
            type: "object",
            properties: {
              text: {
                type: "string",
                description: "–¢–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞",
              },
              language: {
                type: "string",
                enum: ["ru-RU", "en-US", "th-TH"],
                description: "–Ø–∑—ã–∫ –∫–æ–º–∞–Ω–¥—ã",
                default: "ru-RU",
              },
            },
            required: ["text"],
          },
        },
        {
          name: "voice_booking",
          description: "üé§ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ç–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞",
          inputSchema: {
            type: "object",
            properties: {
              text: {
                type: "string",
                description: "–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
              },
              userId: {
                type: "string",
                description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
              },
              sessionId: {
                type: "string",
                description: "ID —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
              },
              language: {
                type: "string",
                enum: ["ru-RU", "en-US", "th-TH"],
                description: "–Ø–∑—ã–∫ –∫–æ–º–∞–Ω–¥—ã",
                default: "ru-RU",
              },
            },
            required: ["text", "userId", "sessionId"],
          },
        },
        {
          name: "self_test",
          description: "üß™ –°–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π",
          inputSchema: {
            type: "object",
            properties: {
              testType: {
                type: "string",
                enum: ["ping", "parse_command", "voice_booking", "full_cycle"],
                description: "–¢–∏–ø —Ç–µ—Å—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
                default: "ping",
              },
              testData: {
                type: "string",
                description: "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏",
                default: "Test data",
              },
            },
          },
        },
      ],
    };
  });

  // üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  server.setRequestHandler(CallToolRequestSchema, async (request) => {
    const { name, arguments: args } = request.params;

    try {
      switch (name) {
        case "ping":
          return {
            content: [
              {
                type: "text",
                text: JSON.stringify(await handlePing(args), null, 2),
              },
            ],
          };

        case "parse_voice_command":
          return {
            content: [
              {
                type: "text",
                text: JSON.stringify(await handleParseCommand(args), null, 2),
              },
            ],
          };

        case "voice_booking":
          return {
            content: [
              {
                type: "text",
                text: JSON.stringify(await handleVoiceBooking(args), null, 2),
              },
            ],
          };

        case "self_test":
          return {
            content: [
              {
                type: "text",
                text: JSON.stringify(await handleSelfTest(args), null, 2),
              },
            ],
          };

        default:
          throw new Error(`Unknown tool: ${name}`);
      }
    } catch (error) {
      return {
        content: [
          {
            type: "text",
            text: JSON.stringify({
              success: false,
              error: error instanceof Error ? error.message : "Unknown error",
              tool: name,
              timestamp: new Date().toISOString(),
            }, null, 2),
          },
        ],
        isError: true,
      };
    }
  });

  return server;
}

/**
 * üéØ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
 */
async function main() {
  try {
    console.error("üé§ Starting MCP Voice Server...");
    
    const server = await createVoiceServer();
    const transport = new StdioServerTransport();
    
    console.error("‚úÖ Voice Server initialized successfully");
    console.error("üîó Connecting to transport...");
    
    await server.connect(transport);
    
    console.error("üöÄ MCP Voice Server is running!");
    console.error("üìã Available tools: ping, parse_voice_command, voice_booking, self_test");
    
  } catch (error) {
    console.error("‚ùå Failed to start Voice Server:", error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    console.error("üí• Fatal error:", error);
    process.exit(1);
  });
}

export { createVoiceServer, handlePing, handleParseCommand, handleVoiceBooking, handleSelfTest };
