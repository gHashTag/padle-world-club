/**
 * üïâÔ∏è Obsidian Sync Middleware
 * Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç Obsidian
 */

import { Request, Response, NextFunction } from "express";
import { z } from "zod";

// –°—Ö–µ–º–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ Obsidian
export const obsidianSyncRequestSchema = z.object({
  table: z.string(),
  action: z.enum(["update", "create", "delete"]),
  data: z.record(z.any()),
  metadata: z.object({
    sync_id: z.string(),
    timestamp: z.string().datetime(),
    source: z.literal("obsidian"),
    user_agent: z.string().optional(),
  }),
});

export interface ObsidianSyncRequest extends Request {
  obsidianSync?: {
    table: string;
    action: "update" | "create" | "delete";
    data: Record<string, any>;
    metadata: {
      sync_id: string;
      timestamp: string;
      source: "obsidian";
      user_agent?: string;
    };
  };
}

/**
 * Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç Obsidian
 */
export const validateObsidianSync = (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Obsidian-Sync
    const isObsidianSync = req.headers["x-obsidian-sync"];

    if (!isObsidianSync) {
      return next(); // –ù–µ –∑–∞–ø—Ä–æ—Å –æ—Ç Obsidian, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const validatedData = obsidianSyncRequestSchema.parse(req.body);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫ –∑–∞–ø—Ä–æ—Å—É
    (req as ObsidianSyncRequest).obsidianSync = validatedData;

    next();
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({
        success: false,
        message: "Invalid Obsidian sync request format",
        errors: error.errors,
      });
    }

    return res.status(500).json({
      success: false,
      message: "Error processing Obsidian sync request",
      error: error instanceof Error ? error.message : "Unknown error",
    });
  }
};

/**
 * Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export const logObsidianSync = (
  req: ObsidianSyncRequest,
  _res: Response,
  next: NextFunction
) => {
  if (req.obsidianSync) {
    console.log(
      `üîÑ Obsidian Sync: ${req.obsidianSync.action} ${req.obsidianSync.table}`,
      {
        sync_id: req.obsidianSync.metadata.sync_id,
        timestamp: req.obsidianSync.metadata.timestamp,
        data_keys: Object.keys(req.obsidianSync.data),
      }
    );
  }

  next();
};

/**
 * Middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è Obsidian
 */
export const obsidianCors = (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Obsidian (–æ–±—ã—á–Ω–æ localhost)
  const obsidianOrigins = [
    "app://obsidian.md",
    "capacitor://localhost",
    "http://localhost",
    "https://localhost",
  ];

  const origin = req.headers.origin;

  if (origin && obsidianOrigins.some((allowed) => origin.startsWith(allowed))) {
    res.header("Access-Control-Allow-Origin", origin);
  }

  res.header(
    "Access-Control-Allow-Methods",
    "GET, POST, PUT, PATCH, DELETE, OPTIONS"
  );
  res.header(
    "Access-Control-Allow-Headers",
    "Content-Type, Authorization, X-Obsidian-Sync"
  );
  res.header("Access-Control-Allow-Credentials", "true");

  if (req.method === "OPTIONS") {
    res.status(200).end();
    return;
  }

  next();
};

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Obsidian
 */
export const createObsidianResponse = (
  data: any,
  success: boolean = true,
  message?: string
) => {
  return {
    success,
    data,
    message,
    timestamp: new Date().toISOString(),
    source: "padle-world-club-api",
  };
};

/**
 * Middleware –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è Obsidian
 */
export const formatObsidianResponse = (
  req: ObsidianSyncRequest,
  res: Response,
  next: NextFunction
) => {
  if (req.obsidianSync) {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ json
    const originalJson = res.json;

    res.json = function (body: any) {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Obsidian
      const obsidianFormattedResponse = createObsidianResponse(
        body.data || body,
        body.success !== false,
        body.message
      );

      return originalJson.call(this, obsidianFormattedResponse);
    };
  }

  next();
};
