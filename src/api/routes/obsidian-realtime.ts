/**
 * üîÑ Real-time Obsidian Sync Routes
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */

import { Router, Request, Response } from "express";
import { z } from "zod";
import { db } from "../../db";
import { user } from "../../db/schema";
import { eq } from "drizzle-orm";
import fs from "fs/promises";
import path from "path";

const router = Router();

// –°—Ö–µ–º–∞ –¥–ª—è webhook –¥–∞–Ω–Ω—ã—Ö
const webhookSchema = z.object({
  table: z.string(),
  action: z.enum(["INSERT", "UPDATE", "DELETE"]),
  data: z.record(z.any()),
  timestamp: z.string().optional(),
});

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º Obsidian
const OBSIDIAN_DB_PATH = path.join(process.cwd(), "oxygen-world", "Database");

/**
 * üîó Webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç PostgreSQL
 */
router.post("/webhook", async (req: Request, res: Response) => {
  try {
    console.log("üîî –ü–æ–ª—É—á–µ–Ω webhook:", req.body);
    
    const { table, action, data } = webhookSchema.parse(req.body);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É users –¥–ª—è –Ω–∞—á–∞–ª–∞
    if (table === "user") {
      await syncUserToObsidian(action, data);
    }
    
    res.json({ 
      success: true, 
      message: `Sync completed for ${table}`,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ webhook:", error);
    res.status(400).json({ 
      success: false, 
      error: error instanceof Error ? error.message : "Unknown error" 
    });
  }
});

/**
 * üìä Endpoint –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
router.post("/sync-users", async (req: Request, res: Response) => {
  try {
    console.log("üîÑ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
    
    if (!db) {
      throw new Error("Database not connected");
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    const users = await db.select().from(user).limit(10);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const userData of users) {
      await syncUserToObsidian("INSERT", userData);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    await updateUsersTable(users);
    
    res.json({ 
      success: true, 
      message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`,
      users: users.length,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", error);
    res.status(500).json({ 
      success: false, 
      error: error instanceof Error ? error.message : "Unknown error" 
    });
  }
});

/**
 * üß™ –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.post("/test-create-user", async (req: Request, res: Response) => {
  try {
    if (!db) {
      throw new Error("Database not connected");
    }
    
    const testUser = {
      username: `test_user_${Date.now()}`,
      firstName: "Test",
      lastName: "User",
      email: `test${Date.now()}@example.com`,
      phone: "+66-89-999-0000",
      userRole: "player" as const,
      currentRating: 1500,
      bonusPoints: 0,
      memberId: `TEST${Date.now()}`,
    };
    
    console.log("üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", testUser);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const [newUser] = await db.insert(user).values(testUser).returning();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Obsidian
    await syncUserToObsidian("INSERT", newUser);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
    const allUsers = await db.select().from(user).limit(10);
    await updateUsersTable(allUsers);
    
    res.json({ 
      success: true, 
      message: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω",
      user: newUser,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    res.status(500).json({ 
      success: false, 
      error: error instanceof Error ? error.message : "Unknown error" 
    });
  }
});

/**
 * üë§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Obsidian
 */
async function syncUserToObsidian(action: string, userData: any) {
  try {
    const fileName = `User-${userData.firstName}-${userData.lastName}.md`;
    const filePath = path.join(OBSIDIAN_DB_PATH, fileName);
    
    if (action === "DELETE") {
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
      try {
        await fs.unlink(filePath);
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${fileName}`);
      } catch (error) {
        console.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${fileName}`);
      }
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const content = generateUserMarkdown(userData);
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await fs.mkdir(OBSIDIAN_DB_PATH, { recursive: true });
    
    await fs.writeFile(filePath, content, "utf8");
    console.log(`‚úÖ ${action === "INSERT" ? "–°–æ–∑–¥–∞–Ω" : "–û–±–Ω–æ–≤–ª–µ–Ω"} —Ñ–∞–π–ª: ${fileName}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error);
    throw error;
  }
}

/**
 * üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è markdown –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function generateUserMarkdown(userData: any): string {
  const roleEmoji = {
    player: "üéæ",
    admin: "üë®‚Äçüíº", 
    club_staff: "üë∑",
    trainer: "üéì"
  }[userData.userRole] || "üë§";
  
  return `---
title: "${userData.firstName} ${userData.lastName}"
username: "${userData.username}"
first_name: "${userData.firstName}"
last_name: "${userData.lastName}"
email: "${userData.email}"
phone: "${userData.phone || ""}"
user_role: "${userData.userRole}"
current_rating: ${userData.currentRating || 0}
bonus_points: ${userData.bonusPoints || 0}
member_id: "${userData.memberId || ""}"
status: "active"
tags: [user, ${userData.userRole}, realtime_sync]
created_at: "${new Date().toISOString().split("T")[0]}"
sync_source: "realtime_webhook"
last_sync: "${new Date().toISOString()}"
---

# ${roleEmoji} ${userData.firstName} ${userData.lastName}

## –ü—Ä–æ—Ñ–∏–ª—å ${userData.userRole === "admin" ? "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" : userData.userRole === "player" ? "–∏–≥—Ä–æ–∫–∞" : "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"}

- **–õ–æ–≥–∏–Ω**: \`= this.username\`
- **–†–µ–π—Ç–∏–Ω–≥**: \`= this.current_rating\` ‚≠ê
- **–†–æ–ª—å**: \`= this.user_role\`
- **–ë–æ–Ω—É—Å—ã**: \`= this.bonus_points\` –±–∞–ª–ª–æ–≤
- **Email**: \`= this.email\`
- **–¢–µ–ª–µ—Ñ–æ–Ω**: \`= this.phone\`

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- –ß–ª–µ–Ω –∫–ª—É–±–∞ —Å: \`= this.created_at\`
- ID —É—á–∞—Å—Ç–Ω–∏–∫–∞: \`= this.member_id\`
- –°—Ç–∞—Ç—É—Å: \`= this.status\`
- –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: \`= this.last_sync\`

## üîó **–°–≤—è–∑–∏ –≤ "–í—Ç–æ—Ä–æ–º –ú–æ–∑–≥–µ"**

### üß† **–ú–æ–¥–µ–ª—å**
- [[Technical/Models/üß† MODEL - USER (Central Neuron)|üë• USER (Central Neuron)]] - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –Ω–µ–π—Ä–æ–Ω

## üîó **–°–≤—è–∑–∞–Ω–Ω—ã–µ –î–∞–Ω–Ω—ã–µ**

### üë• **–î—Ä—É–≥–∏–µ –ò–≥—Ä–æ–∫–∏**
- [[User-David-Smith|üë§ David Smith - –¢–æ–ø –∏–≥—Ä–æ–∫]]
- [[User-Anna-Johnson|üë§ Anna Johnson - VIP –¢—Ä–µ–Ω–µ—Ä]]

### üéæ **–ö–æ—Ä—Ç—ã**
- [[Court-Tennis|üéæ Tennis Court - –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä—Ç]]
- [[Court-Padel|üèì Padel Court - –ü—Ä–µ–º–∏—É–º –∫–æ—Ä—Ç]]

### üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞**
- [[üë• Users Data - Oxygen Padel Club Thailand|üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏]]
- [[üè† MAIN DASHBOARD|üè† –ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥]]

### üß† **"–í—Ç–æ—Ä–æ–π –ú–æ–∑–≥" –°–µ—Ä–≤–µ—Ä–∞**
- [[Technical/Models/üß† MODELS NAVIGATOR - –í—Å–µ 31 –ú–æ–¥–µ–ª—å|üß† –ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –í—Å–µ–º 31 –ú–æ–¥–µ–ª–∏]]
- [[üß† NEURAL NETWORK VISUALIZATION - Complete Connections Map|üß† –ö–∞—Ä—Ç–∞ –°–≤—è–∑–µ–π]]

---

*üì° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Real-time Webhook*
*üß† –ß–∞—Å—Ç—å "–í—Ç–æ—Ä–æ–≥–æ –ú–æ–∑–≥–∞" –°–µ—Ä–≤–µ—Ä–∞*
*üèùÔ∏è Phangan Padel Tennis Club Member*`;
}

/**
 * üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
async function updateUsersTable(users: any[]) {
  try {
    const filePath = path.join(OBSIDIAN_DB_PATH, "üë• Users Data - Real-time Sync.md");
    
    const content = `---
title: "üë• Users Data - Real-time Sync"
tags: [database, users, realtime]
last_sync: "${new Date().toISOString()}"
total_users: ${users.length}
---

# üë• Users Data - Real-time Sync

> **üîÑ Real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞**  
> –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleString()}  
> –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **${users.length}**

## üìä –°–ø–∏—Å–æ–∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

| üë§ –ò–º—è | üîë –õ–æ–≥–∏–Ω | üé≠ –†–æ–ª—å | ‚≠ê –†–µ–π—Ç–∏–Ω–≥ | üìß Email |
|--------|----------|---------|------------|----------|
${users.map(u => 
  `| [[User-${u.firstName}-${u.lastName}\\|${u.firstName} ${u.lastName}]] | ${u.username} | ${u.userRole} | ${u.currentRating || 0} | ${u.email} |`
).join('\n')}

## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**: ${users.length}
- **–ò–≥—Ä–æ–∫–æ–≤**: ${users.filter(u => u.userRole === 'player').length}
- **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤**: ${users.filter(u => u.userRole === 'admin').length}
- **–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤**: ${users.filter(u => u.userRole === 'club_staff').length}

## üîÑ Real-time Endpoints

- **Webhook**: \`POST /api/obsidian-realtime/webhook\`
- **–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è**: \`POST /api/obsidian-realtime/sync-users\`
- **–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è**: \`POST /api/obsidian-realtime/test-create-user\`

---

*üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –ë–î*`;

    await fs.writeFile(filePath, content, "utf8");
    console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:", error);
  }
}

export default router;
