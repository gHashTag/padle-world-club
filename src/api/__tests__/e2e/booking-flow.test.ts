/**
 * E2E —Ç–µ—Å—Ç: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ç–∞
 */

import { describe, it, expect } from 'vitest';
import request from 'supertest';
import { setupE2ETests, app, authHelper, testDataFactory } from './setup';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ E2E –æ–∫—Ä—É–∂–µ–Ω–∏—è
setupE2ETests();

describe('E2E: Booking Flow', () => {
  it('–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ç–∞', async () => {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üîÑ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    const adminData = testDataFactory.createTestUser('admin');
    const playerData = testDataFactory.createTestUser('player');
    const coachData = testDataFactory.createTestUser('coach');

    const { token: adminToken } = await authHelper.registerUser(adminData);
    const { user: player, token: playerToken } = await authHelper.registerUser(playerData);
    const { user: coach, token: coachToken } = await authHelper.registerUser(coachData);

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã');

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ –∏ –∫–æ—Ä—Ç–∞
    console.log('üîÑ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏ –∏ –∫–æ—Ä—Ç–∞...');

    const venueData = testDataFactory.createTestVenue();
    const venueResponse = await request(app)
      .post('/api/venues')
      .set('Authorization', `Bearer ${adminToken}`)
      .send(venueData)
      .expect(201);

    const venue = venueResponse.body.data;

    const courtData = testDataFactory.createTestCourt(venue.id);
    const courtResponse = await request(app)
      .post('/api/courts')
      .set('Authorization', `Bearer ${adminToken}`)
      .send(courtData)
      .expect(201);

    const court = courtResponse.body.data;

    console.log('‚úÖ –ü–ª–æ—â–∞–¥–∫–∞ –∏ –∫–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω—ã');

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üîÑ –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');

    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(14, 0, 0, 0); // 14:00

    const endTime = new Date(tomorrow);
    endTime.setHours(15, 30, 0, 0); // 15:30 (1.5 —á–∞—Å–∞)

    const bookingData = {
      courtId: court.id,
      bookedByUserId: player.id,
      startTime: tomorrow.toISOString(),
      endTime: endTime.toISOString(),
      durationMinutes: 90,
      totalAmount: 75.00,
      bookingPurpose: 'free_play',
      notes: 'E2E test booking'
    };

    const createBookingResponse = await request(app)
      .post('/api/bookings')
      .set('Authorization', `Bearer ${playerToken}`)
      .send(bookingData)
      .expect(201);

    expect(createBookingResponse.body.success).toBe(true);
    expect(createBookingResponse.body.data.status).toBe('pending_payment');

    const booking = createBookingResponse.body.data;
    console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', booking.id);

    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    console.log('üîÑ –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏...');

    const getBookingResponse = await request(app)
      .get(`/api/bookings/${booking.id}`)
      .set('Authorization', `Bearer ${playerToken}`)
      .expect(200);

    expect(getBookingResponse.body.success).toBe(true);
    expect(getBookingResponse.body.data.id).toBe(booking.id);

    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞');

    // 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    console.log('üîÑ –®–∞–≥ 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');

    const participantData = {
      userId: coach.id,
      role: 'coach',
      notes: 'Professional coach for the session'
    };

    const addParticipantResponse = await request(app)
      .post(`/api/bookings/${booking.id}/participants`)
      .set('Authorization', `Bearer ${coachToken}`)
      .send(participantData)
      .expect(201);

    expect(addParticipantResponse.body.success).toBe(true);

    console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é');

    // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    console.log('üîÑ –®–∞–≥ 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');

    const getParticipantsResponse = await request(app)
      .get(`/api/bookings/${booking.id}/participants`)
      .set('Authorization', `Bearer ${playerToken}`)
      .expect(200);

    expect(getParticipantsResponse.body.success).toBe(true);
    expect(getParticipantsResponse.body.data).toHaveLength(1);
    expect(getParticipantsResponse.body.data[0].userId).toBe(coach.id);

    console.log('‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω');

    // 7. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üîÑ –®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...');

    const paymentData = {
      bookingId: booking.id,
      amount: 75.00,
      currency: 'USD',
      paymentMethod: 'credit_card',
      description: 'Payment for court booking'
    };

    const createPaymentResponse = await request(app)
      .post('/api/payments')
      .set('Authorization', `Bearer ${playerToken}`)
      .send(paymentData)
      .expect(201);

    expect(createPaymentResponse.body.success).toBe(true);
    expect(createPaymentResponse.body.data.status).toBe('pending');

    const payment = createPaymentResponse.body.data;
    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', payment.id);

    // 8. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏)
    console.log('üîÑ –®–∞–≥ 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...');

    const updatePaymentResponse = await request(app)
      .put(`/api/payments/${payment.id}/status`)
      .set('Authorization', `Bearer ${adminToken}`)
      .send({ status: 'completed' })
      .expect(200);

    expect(updatePaymentResponse.body.success).toBe(true);
    expect(updatePaymentResponse.body.data.status).toBe('completed');

    console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');

    // 9. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üîÑ –®–∞–≥ 9: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');

    const confirmBookingResponse = await request(app)
      .post(`/api/bookings/${booking.id}/confirm`)
      .set('Authorization', `Bearer ${coachToken}`)
      .send({
        paymentConfirmed: true,
        notes: 'Booking confirmed after payment'
      })
      .expect(200);

    expect(confirmBookingResponse.body.success).toBe(true);
    expect(confirmBookingResponse.body.data.status).toBe('confirmed');

    console.log('‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');

    // 10. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîÑ –®–∞–≥ 10: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...');

    const getBookingsResponse = await request(app)
      .get('/api/bookings')
      .query({
        bookedByUserId: player.id,
        status: 'confirmed'
      })
      .set('Authorization', `Bearer ${playerToken}`)
      .expect(200);

    expect(getBookingsResponse.body.success).toBe(true);
    expect(getBookingsResponse.body.data.data.some((b: any) => b.id === booking.id)).toBe(true);

    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—É—á–µ–Ω');

    // 11. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–Ω—è—Ç)
    console.log('üîÑ –®–∞–≥ 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ç–∞...');

    const availabilityResponse = await request(app)
      .get(`/api/courts/${court.id}/availability`)
      .query({
        date: tomorrow.toISOString().split('T')[0],
        startTime: '14:00',
        endTime: '15:30'
      })
      .set('Authorization', `Bearer ${playerToken}`)
      .expect(200);

    expect(availabilityResponse.body.success).toBe(true);
    // –ö–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ –≤—Ä–µ–º—è
    expect(availabilityResponse.body.data.available).toBe(false);

    console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ—Ä—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ - –∫–æ—Ä—Ç –∑–∞–Ω—è—Ç');

    console.log('üéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  });

  it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', async () => {
    console.log('üîÑ –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏...');

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const adminData = testDataFactory.createTestUser('admin');
    const player1Data = testDataFactory.createTestUser('player');
    const player2Data = testDataFactory.createTestUser('player');

    const { token: adminToken } = await authHelper.registerUser(adminData);
    const { user: player1, token: player1Token } = await authHelper.registerUser(player1Data);
    const { user: player2, token: player2Token } = await authHelper.registerUser(player2Data);

    const venueData = testDataFactory.createTestVenue();
    const venueResponse = await request(app)
      .post('/api/venues')
      .set('Authorization', `Bearer ${adminToken}`)
      .send(venueData)
      .expect(201);

    const courtData = testDataFactory.createTestCourt(venueResponse.body.data.id);
    const courtResponse = await request(app)
      .post('/api/courts')
      .set('Authorization', `Bearer ${adminToken}`)
      .send(courtData)
      .expect(201);

    const court = courtResponse.body.data;

    // –ü–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(14, 0, 0, 0);

    const endTime = new Date(tomorrow);
    endTime.setHours(15, 30, 0, 0);

    const booking1Data = {
      courtId: court.id,
      bookedByUserId: player1.id,
      startTime: tomorrow.toISOString(),
      endTime: endTime.toISOString(),
      durationMinutes: 90,
      totalAmount: 75.00,
      bookingPurpose: 'free_play'
    };

    await request(app)
      .post('/api/bookings')
      .set('Authorization', `Bearer ${player1Token}`)
      .send(booking1Data)
      .expect(201);

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const conflictingStartTime = new Date(tomorrow);
    conflictingStartTime.setHours(15, 0, 0, 0); // –ü–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤—ã–º

    const conflictingEndTime = new Date(tomorrow);
    conflictingEndTime.setHours(16, 30, 0, 0);

    const booking2Data = {
      courtId: court.id,
      bookedByUserId: player2.id,
      startTime: conflictingStartTime.toISOString(),
      endTime: conflictingEndTime.toISOString(),
      durationMinutes: 90,
      totalAmount: 75.00,
      bookingPurpose: 'free_play'
    };

    const conflictResponse = await request(app)
      .post('/api/bookings')
      .set('Authorization', `Bearer ${player2Token}`)
      .send(booking2Data)
      .expect(409);

    expect(conflictResponse.body.success).toBe(false);
    expect(conflictResponse.body.message).toContain('–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

    console.log('‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  });
});
