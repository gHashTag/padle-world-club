/**
 * E2E —Ç–µ—Å—Ç: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

import { describe, it, expect } from 'vitest';
import request from 'supertest';
import { setupE2ETests, app, testDataFactory } from './setup';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ E2E –æ–∫—Ä—É–∂–µ–Ω–∏—è
setupE2ETests();

describe('E2E: User Registration and Authentication Flow', () => {
  it('–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = testDataFactory.createTestUser('player', {
      firstName: 'John',
      lastName: 'Doe'
    });

    console.log('üîÑ –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    // 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const registerResponse = await request(app)
      .post('/api/users/auth/register')
      .send(userData)
      .expect(201);

    expect(registerResponse.body.success).toBe(true);
    expect(registerResponse.body.data).toHaveProperty('user');
    expect(registerResponse.body.data).toHaveProperty('token');
    expect(registerResponse.body.data.user.username).toBe(userData.username);
    expect(registerResponse.body.data.user.email).toBe(userData.email);
    expect(registerResponse.body.data.user.userRole).toBe('player');

    const registeredUser = registerResponse.body.data.user;
    const registrationToken = registerResponse.body.data.token;

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registeredUser.username);

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    console.log('üîÑ –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

    const protectedResponse = await request(app)
      .get('/api/users/auth/me')
      .set('Authorization', `Bearer ${registrationToken}`)
      .expect(200);

    expect(protectedResponse.body.success).toBe(true);
    expect(protectedResponse.body.data.id).toBe(registeredUser.id);

    console.log('‚úÖ –¢–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

    // 4. –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–ª–æ–≥–∞—É—Ç)
    console.log('üîÑ –®–∞–≥ 3: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');

    const logoutResponse = await request(app)
      .post('/api/users/auth/logout')
      .set('Authorization', `Bearer ${registrationToken}`)
      .expect(200);

    expect(logoutResponse.body.success).toBe(true);

    console.log('‚úÖ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω');

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω—ã –Ω–µ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑ blacklist

    // 6. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    console.log('üîÑ –®–∞–≥ 4: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...');

    const loginResponse = await request(app)
      .post('/api/users/auth/login')
      .send({
        username: userData.username,
        password: userData.password
      })
      .expect(200);

    expect(loginResponse.body.success).toBe(true);
    expect(loginResponse.body.data).toHaveProperty('user');
    expect(loginResponse.body.data).toHaveProperty('token');
    expect(loginResponse.body.data.user.username).toBe(userData.username);

    const loginToken = loginResponse.body.data.token;

    console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    console.log('üîÑ –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');

    const newTokenResponse = await request(app)
      .get('/api/users/auth/me')
      .set('Authorization', `Bearer ${loginToken}`)
      .expect(200);

    expect(newTokenResponse.body.success).toBe(true);
    expect(newTokenResponse.body.data.username).toBe(userData.username);

    console.log('‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

    // 8. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîÑ –®–∞–≥ 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è...');

    const updateData = {
      firstName: 'John Updated',
      lastName: 'Doe Updated'
    };

    const updateResponse = await request(app)
      .put(`/api/users/users/${registeredUser.id}`)
      .set('Authorization', `Bearer ${loginToken}`)
      .send(updateData)
      .expect(200);

    expect(updateResponse.body.success).toBe(true);
    expect(updateResponse.body.data.firstName).toBe('John Updated');
    expect(updateResponse.body.data.lastName).toBe('Doe Updated');

    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
    console.log('üîÑ –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è...');

    const updatedProfileResponse = await request(app)
      .get('/api/users/auth/me')
      .set('Authorization', `Bearer ${loginToken}`)
      .expect(200);

    expect(updatedProfileResponse.body.data.firstName).toBe('John Updated');
    expect(updatedProfileResponse.body.data.lastName).toBe('Doe Updated');

    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

    console.log('üéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  });

  it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞', async () => {
    console.log('üîÑ –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞...');

    // –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const invalidLoginResponse = await request(app)
      .post('/api/users/auth/login')
      .send({
        username: 'nonexistent_user',
        password: 'wrongpassword'
      })
      .expect(401);

    expect(invalidLoginResponse.body.success).toBe(false);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(invalidLoginResponse.body.error).toBeDefined();

    console.log('‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  });

  it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ø—ã—Ç–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏', async () => {
    console.log('üîÑ –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

    const userData = testDataFactory.createTestUser('player');

    // –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    await request(app)
      .post('/api/users/auth/register')
      .send(userData)
      .expect(201);

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ç–µ–º –∂–µ username
    const duplicateResponse = await request(app)
      .post('/api/users/auth/register')
      .send(userData)
      .expect(409);

    expect(duplicateResponse.body.success).toBe(false);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    expect(duplicateResponse.body.error).toBeDefined();

    console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  });
});
