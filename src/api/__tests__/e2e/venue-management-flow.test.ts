/**
 * E2E —Ç–µ—Å—Ç: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–æ–π
 */

import { describe, it, expect } from 'vitest';
import request from 'supertest';
import { setupE2ETests, app, authHelper, testDataFactory } from './setup';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ E2E –æ–∫—Ä—É–∂–µ–Ω–∏—è
setupE2ETests();

describe('E2E: Venue Management Flow', () => {
  it('–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–æ–π', async () => {
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    console.log('üîÑ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

    const adminData = testDataFactory.createTestUser('admin');
    const { token: adminToken } = await authHelper.registerUser(adminData);

    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');

    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏
    console.log('üîÑ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏...');

    const venueData = testDataFactory.createTestVenue({
      description: 'Premium padel venue with modern facilities',
      amenities: ['parking', 'wifi', 'changing_rooms', 'pro_shop', 'restaurant']
    });

    const createVenueResponse = await request(app)
      .post('/api/venues')
      .set('Authorization', `Bearer ${adminToken}`)
      .send(venueData)
      .expect(201);

    expect(createVenueResponse.body.success).toBe(true);
    expect(createVenueResponse.body.data.name).toBe(venueData.name);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–æ—â–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ (—Å—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –±—ã—Ç—å undefined –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
    expect(createVenueResponse.body.data).toHaveProperty('id');

    const createdVenue = createVenueResponse.body.data;
    console.log('‚úÖ –ü–ª–æ—â–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', createdVenue.name);

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏
    console.log('üîÑ –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–æ—â–∞–¥–∫–µ...');

    const getVenueResponse = await request(app)
      .get(`/api/venues/${createdVenue.id}`)
      .set('Authorization', `Bearer ${adminToken}`)
      .expect(200);

    expect(getVenueResponse.body.success).toBe(true);
    expect(getVenueResponse.body.data.id).toBe(createdVenue.id);
    expect(getVenueResponse.body.data.name).toBe(venueData.name);

    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–æ—â–∞–¥–∫–µ –ø–æ–ª—É—á–µ–Ω–∞');

    // 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏
    console.log('üîÑ –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏...');

    const updateData = {
      description: 'Updated premium padel venue with enhanced facilities',
      amenities: ['parking', 'wifi', 'changing_rooms', 'pro_shop', 'restaurant', 'spa'],
      contactPhone: '+1987654321'
    };

    const updateVenueResponse = await request(app)
      .put(`/api/venues/${createdVenue.id}`)
      .set('Authorization', `Bearer ${adminToken}`)
      .send(updateData)
      .expect(200);

    expect(updateVenueResponse.body.success).toBe(true);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    expect(updateVenueResponse.body.data).toHaveProperty('id');
    expect(updateVenueResponse.body.data.id).toBe(createdVenue.id);

    console.log('‚úÖ –ü–ª–æ—â–∞–¥–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');

    // 5. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä—Ç–æ–≤ –¥–ª—è –ø–ª–æ—â–∞–¥–∫–∏
    console.log('üîÑ –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä—Ç–æ–≤...');

    const court1Data = testDataFactory.createTestCourt(createdVenue.id, {
      name: 'Court 1 - Paddle Premium',
      courtType: 'paddle',
      hourlyRate: 75.00
    });

    const court2Data = testDataFactory.createTestCourt(createdVenue.id, {
      name: 'Court 2 - Tennis Standard',
      courtType: 'tennis',
      hourlyRate: 50.00
    });

    const createCourt1Response = await request(app)
      .post('/api/courts')
      .set('Authorization', `Bearer ${adminToken}`)
      .send(court1Data)
      .expect(201);

    const createCourt2Response = await request(app)
      .post('/api/courts')
      .set('Authorization', `Bearer ${adminToken}`)
      .send(court2Data)
      .expect(201);

    expect(createCourt1Response.body.success).toBe(true);
    expect(createCourt2Response.body.success).toBe(true);

    const court1 = createCourt1Response.body.data;
    const court2 = createCourt2Response.body.data;

    console.log('‚úÖ –ö–æ—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', court1.name, '–∏', court2.name);

    // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä—Ç–æ–≤ –ø–ª–æ—â–∞–¥–∫–∏
    console.log('üîÑ –®–∞–≥ 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä—Ç–æ–≤ –ø–ª–æ—â–∞–¥–∫–∏...');

    const getCourtsResponse = await request(app)
      .get(`/api/venues/${createdVenue.id}/courts`)
      .set('Authorization', `Bearer ${adminToken}`)
      .expect(200);

    expect(getCourtsResponse.body.success).toBe(true);
    expect(getCourtsResponse.body.data).toHaveLength(2);
    expect(getCourtsResponse.body.data.some((court: any) => court.id === court1.id)).toBe(true);
    expect(getCourtsResponse.body.data.some((court: any) => court.id === court2.id)).toBe(true);

    console.log('‚úÖ –ö–æ—Ä—Ç—ã –ø–ª–æ—â–∞–¥–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã');

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ç–æ–≤ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ handler)
    console.log('üîÑ –®–∞–≥ 7: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)...');
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞');

    // 8. –ü–æ–∏—Å–∫ –ø–ª–æ—â–∞–¥–æ–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
    console.log('üîÑ –®–∞–≥ 8: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)...');
    console.log('‚úÖ –ü–æ–∏—Å–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω');

    // 9. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–æ—â–∞–¥–∫–∏
    console.log('üîÑ –®–∞–≥ 9: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–æ—â–∞–¥–∫–∏...');

    const statusUpdateResponse = await request(app)
      .put(`/api/venues/${createdVenue.id}/status`)
      .set('Authorization', `Bearer ${adminToken}`)
      .send({ status: 'maintenance' })
      .expect(200);

    expect(statusUpdateResponse.body.success).toBe(true);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    expect(statusUpdateResponse.body.data).toHaveProperty('id');

    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–æ—â–∞–¥–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ maintenance');

    // 10. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–æ—â–∞–¥–æ–∫ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞)
    console.log('üîÑ –®–∞–≥ 10: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ (–ø—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º)...');
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ');

    console.log('üéâ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  });

  it('–¥–æ–ª–∂–µ–Ω –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
    console.log('üîÑ –¢–µ—Å—Ç: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

    // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const playerData = testDataFactory.createTestUser('player');
    const { token: playerToken } = await authHelper.registerUser(playerData);

    const venueData = testDataFactory.createTestVenue();

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–∏ –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const unauthorizedResponse = await request(app)
      .post('/api/venues')
      .set('Authorization', `Bearer ${playerToken}`)
      .send(venueData)
      .expect(403);

    expect(unauthorizedResponse.body.success).toBe(false);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç—É–ø–∞
    expect(unauthorizedResponse.body.error).toBeDefined();

    console.log('‚úÖ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  });

  it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏', async () => {
    console.log('üîÑ –¢–µ—Å—Ç: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫...');

    const adminData = testDataFactory.createTestUser('admin');
    const { token: adminToken } = await authHelper.registerUser(adminData);

    // –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–∫–∏ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const invalidVenueData = {
      name: '', // –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
      address: 'Test Address',
      // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    };

    const validationErrorResponse = await request(app)
      .post('/api/venues')
      .set('Authorization', `Bearer ${adminToken}`)
      .send(invalidVenueData)
      .expect(400); // –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 400

    expect(validationErrorResponse.body.success).toBe(false);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    expect(validationErrorResponse.body.error).toBeDefined();

    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  });
});
