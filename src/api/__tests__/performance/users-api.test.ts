/**
 * Performance Tests for Users API
 * –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ API
 */

import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import {
  setupPerformanceTests,
  autocannonConfig,
  PerformanceDataFactory,
  performanceAuthHelper,
  analyzePerformanceResult,
  type PerformanceResult
} from './setup';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ performance –æ–∫—Ä—É–∂–µ–Ω–∏—è
setupPerformanceTests();

describe('Performance: Users API', () => {
  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ performance —Ç–µ—Å—Ç—ã –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞

  beforeAll(async () => {
    console.log('üöÄ Performance tests initialized');
  });

  afterAll(async () => {
    console.log('üõë Performance tests completed');
  });

  it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', async () => {
    console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è performance testing setup...');

    // –°–∏–º—É–ª–∏—Ä—É–µ–º performance –º–µ—Ç—Ä–∏–∫–∏
    const mockResult = {
      requests: { total: 100, average: 25.5 },
      latency: { average: 45.2, p99: 120.8 },
      errors: 0,
      '2xx': 100,
    };

    console.log('üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã performance —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${mockResult.requests.total}`);
    console.log(`   RPS: ${mockResult.requests.average.toFixed(2)}`);
    console.log(`   –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${mockResult.latency.average.toFixed(2)}ms`);
    console.log(`   P99 –∑–∞–¥–µ—Ä–∂–∫–∞: ${mockResult.latency.p99.toFixed(2)}ms`);
    console.log(`   –û—à–∏–±–∫–∏: ${mockResult.errors}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã–µ (2xx): ${mockResult['2xx']}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ performance —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞
    expect(autocannonConfig).toBeDefined();
    expect(PerformanceDataFactory.createTestUser).toBeDefined();
    expect(performanceAuthHelper).toBeDefined();
    expect(analyzePerformanceResult).toBeDefined();

    console.log('‚úÖ Performance testing infrastructure –≥–æ—Ç–æ–≤–∞');
  }, 10000);

  it('–¥–æ–ª–∂–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', async () => {
    console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ autocannon...');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
    const configs = [
      { name: 'Light', config: autocannonConfig.light },
      { name: 'Medium', config: autocannonConfig.medium },
      { name: 'Heavy', config: autocannonConfig.heavy },
      { name: 'Stress', config: autocannonConfig.stress },
    ];

    console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    configs.forEach(({ name, config }) => {
      console.log(`   ${name}: ${config.connections} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, ${config.duration}—Å, pipelining: ${config.pipelining}`);
    });

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const userData = PerformanceDataFactory.createTestUser('player');
    console.log('üë§ –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
      username: userData.username,
      email: userData.email,
      role: userData.role,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã
    configs.forEach(({ config }) => {
      expect(config.connections).toBeGreaterThan(0);
      expect(config.duration).toBeGreaterThan(0);
      expect(config.pipelining).toBeGreaterThan(0);
    });

    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞');
  }, 10000);

  it('–¥–æ–ª–∂–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', async () => {
    console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
    const mockResult = {
      requests: { total: 1000, average: 45.2 },
      latency: { average: 85.5, p99: 250.8, p97_5: 220.3 },
      throughput: { average: 42.1, mean: 42.1, stddev: 5.2, min: 35.0, max: 48.5 },
      errors: 5,
      timeouts: 0,
      duration: 10,
      start: new Date(),
      finish: new Date(),
      connections: 10,
      pipelining: 1,
      non2xx: 5,
      '1xx': 0,
      '2xx': 995,
      '3xx': 0,
      '4xx': 3,
      '5xx': 2,
    } as PerformanceResult;

    console.log('üìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${mockResult.requests.total}`);
    console.log(`   RPS: ${mockResult.requests.average.toFixed(2)}`);
    console.log(`   –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${mockResult.latency.average.toFixed(2)}ms`);
    console.log(`   P99 –∑–∞–¥–µ—Ä–∂–∫–∞: ${mockResult.latency.p99.toFixed(2)}ms`);
    console.log(`   –û—à–∏–±–∫–∏: ${mockResult.errors}`);
    console.log(`   –£—Å–ø–µ—à–Ω—ã–µ (2xx): ${mockResult['2xx']}`);

    const analysis = analyzePerformanceResult(mockResult);
    console.log('üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', analysis.summary);

    if (analysis.recommendations.length > 0) {
      console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      analysis.recommendations.forEach(rec => console.log(`   - ${rec}`));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    expect(analysis.summary.totalRequests).toBe(1000);
    expect(analysis.summary.errorRate).toBe(0.5); // 5/1000 * 100
    expect(analysis.summary.successRate).toBe(99.5); // 995/1000 * 100
    expect(analysis.performance.good).toBe(true); // P99 < 500ms

    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  }, 10000);
});
