/**
 * Memory Usage Performance Tests
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
 */

import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import { setupPerformanceTests, PerformanceDataFactory } from './setup';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ performance –æ–∫—Ä—É–∂–µ–Ω–∏—è
setupPerformanceTests();

describe('Performance: Memory Usage Testing', () => {
  beforeAll(async () => {
    console.log('üöÄ Memory usage tests initialized');
  });

  afterAll(async () => {
    console.log('üõë Memory usage tests completed');
  });

  it('–¥–æ–ª–∂–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏', async () => {
    console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è memory usage monitoring...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
    const memoryUsage = process.memoryUsage();
    
    console.log('üìä –¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ Node.js:');
    console.log(`   RSS (Resident Set Size): ${(memoryUsage.rss / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   Heap Total: ${(memoryUsage.heapTotal / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   Heap Used: ${(memoryUsage.heapUsed / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   External: ${(memoryUsage.external / 1024 / 1024).toFixed(2)} MB`);
    console.log(`   Array Buffers: ${(memoryUsage.arrayBuffers / 1024 / 1024).toFixed(2)} MB`);

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏
    const memoryMetrics = [
      {
        metric: 'RSS (Resident Set Size)',
        description: '–û–±—â–∏–π –æ–±—ä–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ–º',
        threshold: '< 512 MB –¥–ª—è API —Å–µ—Ä–≤–µ—Ä–∞',
        monitoring: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ APM'
      },
      {
        metric: 'Heap Used',
        description: '–û–±—ä–µ–º –ø–∞–º—è—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π V8 heap',
        threshold: '< 256 MB –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö',
        monitoring: '–ê–ª–µ—Ä—Ç—ã –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ 80% –æ—Ç heap total'
      },
      {
        metric: 'Heap Total',
        description: '–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä V8 heap',
        threshold: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ V8',
        monitoring: '–¢—Ä–µ–Ω–¥—ã —Ä–æ—Å—Ç–∞ heap size'
      },
      {
        metric: 'External Memory',
        description: '–ü–∞–º—è—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è C++ –æ–±—ä–µ–∫—Ç–∞–º–∏',
        threshold: '< 64 MB –¥–ª—è —Ç–∏–ø–∏—á–Ω–æ–≥–æ API',
        monitoring: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ memory leaks –≤ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª—è—Ö'
      }
    ];

    console.log('\nüìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–∞–º—è—Ç–∏:');
    memoryMetrics.forEach((metric, index) => {
      console.log(`   ${index + 1}. ${metric.metric}`);
      console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${metric.description}`);
      console.log(`      –ü–æ—Ä–æ–≥: ${metric.threshold}`);
      console.log(`      –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${metric.monitoring}`);
      console.log('');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–∞–∑—É–º–Ω–æ
    expect(memoryUsage.heapUsed).toBeLessThan(512 * 1024 * 1024); // < 512 MB
    expect(memoryUsage.rss).toBeLessThan(1024 * 1024 * 1024); // < 1 GB

    console.log('‚úÖ Memory usage monitoring –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }, 10000);

  it('–¥–æ–ª–∂–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ memory leaks', async () => {
    console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è memory leaks...');
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    const memoryLeakDetection = [
      {
        type: 'Heap Growth Monitoring',
        description: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ heap size',
        implementation: '–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ heap snapshots',
        tools: ['Node.js built-in profiler', 'clinic.js', 'heapdump']
      },
      {
        type: 'Object Retention Analysis',
        description: '–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Å–≤–æ–±–æ–∂–¥–∞—é—Ç—Å—è GC',
        implementation: '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ heap snapshots –≤–æ –≤—Ä–µ–º–µ–Ω–∏',
        tools: ['Chrome DevTools', 'memwatch-next', '@airbnb/node-memwatch']
      },
      {
        type: 'Event Listener Leaks',
        description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ—É–¥–∞–ª–µ–Ω–Ω—ã—Ö event listeners',
        implementation: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ listeners',
        tools: ['process.listenerCount()', 'EventEmitter.listenerCount()']
      },
      {
        type: 'Database Connection Leaks',
        description: '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î',
        implementation: '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ connection pool metrics',
        tools: ['pg-pool monitoring', 'connection pool stats']
      }
    ];

    console.log('üîç –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è memory leaks:');
    memoryLeakDetection.forEach((strategy, index) => {
      console.log(`   ${index + 1}. ${strategy.type}`);
      console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${strategy.description}`);
      console.log(`      –†–µ–∞–ª–∏–∑–∞—Ü–∏—è: ${strategy.implementation}`);
      console.log(`      –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${strategy.tools.join(', ')}`);
      console.log('');
    });

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testObjects = [];
    for (let i = 0; i < 1000; i++) {
      testObjects.push(PerformanceDataFactory.createTestUser('player'));
    }

    const memoryAfterCreation = process.memoryUsage();
    console.log(`üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è 1000 —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:`);
    console.log(`   Heap Used: ${(memoryAfterCreation.heapUsed / 1024 / 1024).toFixed(2)} MB`);

    // –û—á–∏—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
    testObjects.length = 0;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä—â–∏–∫ –º—É—Å–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if (global.gc) {
      global.gc();
    }

    const memoryAfterCleanup = process.memoryUsage();
    console.log(`üìä –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤:`);
    console.log(`   Heap Used: ${(memoryAfterCleanup.heapUsed / 1024 / 1024).toFixed(2)} MB`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    expect(memoryLeakDetection).toHaveLength(4);
    memoryLeakDetection.forEach(strategy => {
      expect(strategy.tools.length).toBeGreaterThan(0);
    });

    console.log('‚úÖ Memory leak detection –≥–æ—Ç–æ–≤–æ');
  }, 10000);

  it('–¥–æ–ª–∂–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏', async () => {
    console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...');
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
    const memoryOptimizations = [
      {
        technique: 'Object Pooling',
        description: '–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö',
        example: '–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –ë–î, –ø—É–ª worker threads',
        benefit: '–°–Ω–∏–∂–µ–Ω–∏–µ GC pressure –∏ allocation overhead'
      },
      {
        technique: 'Streaming Processing',
        description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å—Ç—è–º –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å',
        example: 'Stream API –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤',
        benefit: '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö'
      },
      {
        technique: 'Lazy Loading',
        description: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏',
        example: '–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ ORM',
        benefit: '–°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏'
      },
      {
        technique: 'Memory-Efficient Data Structures',
        description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö',
        example: 'Map –≤–º–µ—Å—Ç–æ Object, Set –≤–º–µ—Å—Ç–æ Array –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π',
        benefit: '–ú–µ–Ω—å—à–µ overhead –∏ –±—ã—Å—Ç—Ä–µ–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
      },
      {
        technique: 'Garbage Collection Tuning',
        description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞',
        example: '--max-old-space-size, --gc-interval —Ñ–ª–∞–≥–∏ Node.js',
        benefit: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ –ø–∞–º—è—Ç—å—é'
      }
    ];

    console.log('üîß –¢–µ—Ö–Ω–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏:');
    memoryOptimizations.forEach((optimization, index) => {
      console.log(`   ${index + 1}. ${optimization.technique}`);
      console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${optimization.description}`);
      console.log(`      –ü—Ä–∏–º–µ—Ä: ${optimization.example}`);
      console.log(`      –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: ${optimization.benefit}`);
      console.log('');
    });

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const optimizationExample = {
      scenario: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      inefficient: '–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –º–∞—Å—Å–∏–≤',
      efficient: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ cursor-based pagination –∏ streaming',
      memoryReduction: '90% —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏',
      implementation: 'SELECT * FROM users ORDER BY id LIMIT 100 OFFSET ?'
    };

    console.log('üí° –ü—Ä–∏–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log(`   –°—Ü–µ–Ω–∞—Ä–∏–π: ${optimizationExample.scenario}`);
    console.log(`   –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ: ${optimizationExample.inefficient}`);
    console.log(`   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ: ${optimizationExample.efficient}`);
    console.log(`   –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏: ${optimizationExample.memoryReduction}`);
    console.log(`   –†–µ–∞–ª–∏–∑–∞—Ü–∏—è: ${optimizationExample.implementation}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    expect(memoryOptimizations).toHaveLength(5);
    memoryOptimizations.forEach(optimization => {
      expect(optimization.technique).toBeDefined();
      expect(optimization.benefit).toBeDefined();
    });

    console.log('‚úÖ Memory optimization strategies –≥–æ—Ç–æ–≤—ã');
  }, 10000);

  it('–¥–æ–ª–∂–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å production memory monitoring', async () => {
    console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è production memory monitoring...');
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    const productionMonitoring = {
      metrics: [
        'Process RSS memory',
        'V8 heap statistics',
        'GC frequency and duration',
        'Memory allocation rate',
        'Object count by type'
      ],
      alerts: [
        {
          condition: 'RSS memory > 80% of container limit',
          action: 'Scale horizontally or investigate memory leaks',
          severity: 'Critical'
        },
        {
          condition: 'Heap usage growth > 10% per hour',
          action: 'Investigate potential memory leaks',
          severity: 'Warning'
        },
        {
          condition: 'GC pause time > 100ms',
          action: 'Optimize object allocation patterns',
          severity: 'Warning'
        },
        {
          condition: 'Memory allocation rate > 50MB/min',
          action: 'Review high-allocation code paths',
          severity: 'Info'
        }
      ],
      tools: [
        'Application Performance Monitoring (APM)',
        'Prometheus + Grafana dashboards',
        'Node.js built-in process.memoryUsage()',
        'Custom memory profiling endpoints'
      ],
      automation: [
        'Automatic heap dumps on memory spikes',
        'Memory usage reports in CI/CD',
        'Performance regression detection',
        'Auto-scaling based on memory metrics'
      ]
    };

    console.log('üìä Production memory metrics:');
    productionMonitoring.metrics.forEach(metric => {
      console.log(`   - ${metric}`);
    });

    console.log('\nüö® Memory alerts:');
    productionMonitoring.alerts.forEach((alert, index) => {
      console.log(`   ${index + 1}. ${alert.condition} (${alert.severity})`);
      console.log(`      –î–µ–π—Å—Ç–≤–∏–µ: ${alert.action}`);
    });

    console.log('\nüîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:');
    productionMonitoring.tools.forEach(tool => {
      console.log(`   - ${tool}`);
    });

    console.log('\nü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:');
    productionMonitoring.automation.forEach(automation => {
      console.log(`   - ${automation}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    expect(productionMonitoring.metrics.length).toBeGreaterThan(4);
    expect(productionMonitoring.alerts.length).toBeGreaterThan(3);
    expect(productionMonitoring.tools.length).toBeGreaterThan(3);

    console.log('‚úÖ Production memory monitoring –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é');
  }, 10000);
});
