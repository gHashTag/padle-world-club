/**
 * Performance Tests for Venues API
 * –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–ª–æ—â–∞–¥–æ–∫
 */

import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import {
  setupPerformanceTests,
  autocannonConfig,
  PerformanceDataFactory,
  analyzePerformanceResult
} from './setup';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ performance –æ–∫—Ä—É–∂–µ–Ω–∏—è
setupPerformanceTests();

describe('Performance: Venues API', () => {
  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ performance —Ç–µ—Å—Ç—ã –¥–ª—è Venues API

  beforeAll(async () => {
    console.log('üöÄ Venues Performance tests initialized');
  });

  afterAll(async () => {
    console.log('üõë Venues Performance tests completed');
  });

  it('–¥–æ–ª–∂–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–æ—â–∞–¥–æ–∫', async () => {
    console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–æ—â–∞–¥–æ–∫...');

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const venueData = PerformanceDataFactory.createTestVenue();
    const courtData = PerformanceDataFactory.createTestCourt('test-venue-id');
    const bookingData = PerformanceDataFactory.createTestBooking('test-court-id', 'test-user-id');

    console.log('üèüÔ∏è –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏:', {
      name: venueData.name,
      city: venueData.city,
      country: venueData.country,
      coordinates: [venueData.latitude, venueData.longitude],
    });

    console.log('üéæ –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä—Ç–∞:', {
      name: courtData.name,
      courtType: courtData.courtType,
      hourlyRate: courtData.hourlyRate,
    });

    console.log('üìÖ –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      durationMinutes: bookingData.durationMinutes,
      totalAmount: bookingData.totalAmount,
      bookingPurpose: bookingData.bookingPurpose,
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    expect(venueData.name).toContain('Performance Test Venue');
    expect(courtData.courtType).toMatch(/^(paddle|tennis)$/);
    expect(bookingData.totalAmount).toBeGreaterThan(0);

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–æ—â–∞–¥–æ–∫ –≥–æ—Ç–æ–≤—ã');
  }, 10000);

  it('–¥–æ–ª–∂–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', async () => {
    console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const scenarios = [
      {
        name: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏',
        method: 'POST',
        endpoint: '/api/venues',
        expectedRPS: '5-15',
        expectedLatency: '< 3s',
        description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏'
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–æ—â–∞–¥–æ–∫',
        method: 'GET',
        endpoint: '/api/venues',
        expectedRPS: '30-100',
        expectedLatency: '< 1s',
        description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–ª–æ—â–∞–¥–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏'
      },
      {
        name: '–ü–æ–∏—Å–∫ –ø–ª–æ—â–∞–¥–æ–∫ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏',
        method: 'GET',
        endpoint: '/api/venues/search/location',
        expectedRPS: '20-50',
        expectedLatency: '< 1.5s',
        description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–ª–æ—â–∞–¥–æ–∫ —Ä—è–¥–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'
      },
      {
        name: '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–ª–æ—â–∞–¥–∫–∏',
        method: 'GET',
        endpoint: '/api/venues/:id',
        expectedRPS: '50-150',
        expectedLatency: '< 500ms',
        description: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–æ—â–∞–¥–∫–µ'
      }
    ];

    console.log('üìä –°—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Venues API:');
    scenarios.forEach((scenario, index) => {
      console.log(`   ${index + 1}. ${scenario.name}`);
      console.log(`      ${scenario.method} ${scenario.endpoint}`);
      console.log(`      –û–∂–∏–¥–∞–µ–º—ã–π RPS: ${scenario.expectedRPS}`);
      console.log(`      –û–∂–∏–¥–∞–µ–º–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: ${scenario.expectedLatency}`);
      console.log(`      –û–ø–∏—Å–∞–Ω–∏–µ: ${scenario.description}`);
      console.log('');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    expect(scenarios).toHaveLength(4);
    scenarios.forEach(scenario => {
      expect(scenario.name).toBeDefined();
      expect(scenario.method).toMatch(/^(GET|POST|PUT|DELETE)$/);
      expect(scenario.endpoint).toMatch(/^\/api\//);
    });

    console.log('‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã');
  }, 10000);

  it('–¥–æ–ª–∂–µ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', async () => {
    console.log('üîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production testing...');

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º, —á—Ç–æ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const readyChecks = [
      {
        component: 'Autocannon',
        status: true, // autocannon —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ npm
        description: 'HTTP load testing tool —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤'
      },
      {
        component: 'Test Data Factory',
        status: typeof PerformanceDataFactory.createTestVenue === 'function',
        description: '–§–∞–±—Ä–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞'
      },
      {
        component: 'Performance Analysis',
        status: typeof analyzePerformanceResult === 'function',
        description: '–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤'
      },
      {
        component: 'Configuration Profiles',
        status: Object.keys(autocannonConfig).length >= 4,
        description: '–ü—Ä–æ—Ñ–∏–ª–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ (light, medium, heavy, stress) –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'
      }
    ];

    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
    readyChecks.forEach(check => {
      const statusIcon = check.status ? '‚úÖ' : '‚ùå';
      console.log(`   ${statusIcon} ${check.component}: ${check.description}`);
    });

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    const exampleTest = {
      name: 'Production Load Test Example',
      target: 'https://api.padle-world-club.com',
      scenarios: [
        { endpoint: '/api/venues', method: 'GET', expectedRPS: 100 },
        { endpoint: '/api/venues/:id', method: 'GET', expectedRPS: 200 },
        { endpoint: '/api/venues', method: 'POST', expectedRPS: 10 },
      ],
      duration: '5m',
      rampUp: '30s',
      maxUsers: 50,
    };

    console.log('üéØ –ü—Ä–∏–º–µ—Ä production –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:');
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${exampleTest.name}`);
    console.log(`   –¶–µ–ª—å: ${exampleTest.target}`);
    console.log(`   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${exampleTest.duration}`);
    console.log(`   –†–∞–∑–æ–≥—Ä–µ–≤: ${exampleTest.rampUp}`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${exampleTest.maxUsers}`);
    console.log('   –°—Ü–µ–Ω–∞—Ä–∏–∏:');
    exampleTest.scenarios.forEach((scenario, index) => {
      console.log(`     ${index + 1}. ${scenario.method} ${scenario.endpoint} (${scenario.expectedRPS} RPS)`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    readyChecks.forEach(check => {
      expect(check.status).toBe(true);
    });

    console.log('‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ performance testing –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
  }, 10000);
});
