/**
 * Database Seeding Script
 * –ù–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç-–±–æ—Ç–∞
 */

import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import { faker } from "@faker-js/faker";
import * as schema from "../db/schema";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ faker –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
faker.setDefaultRefDate('2024-01-01T00:00:00.000Z');

const DATABASE_URL = process.env.DATABASE_URL || "postgresql://postgres:password@localhost:5432/padle_world_club";

async function seedDatabase() {
  console.log("üå± –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...");

  const client = postgres(DATABASE_URL);
  const db = drizzle(client, { schema });

  try {
    // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log("üë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
    const users = await createUsers(db);

    // 2. –°–æ–∑–¥–∞–µ–º –ø–ª–æ—â–∞–¥–∫–∏
    console.log("üè¢ –°–æ–∑–¥–∞–µ–º –ø–ª–æ—â–∞–¥–∫–∏...");
    const venues = await createVenues(db);

    // 3. –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ç—ã
    console.log("üéæ –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ç—ã...");
    const courts = await createCourts(db, venues);

    // 4. –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log("üìÖ –°–æ–∑–¥–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...");
    const bookings = await createBookings(db, users, courts);

    // 5. –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    console.log("üë• –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π...");
    await createBookingParticipants(db, bookings, users);

    // 6. –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
    console.log("üí≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏...");
    await createPayments(db, bookings, users);

    // 7. –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
    console.log("üéÆ –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏...");
    const gameSessions = await createGameSessions(db, courts, users);

    // 8. –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
    console.log("üèÉ –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏...");
    await createGamePlayers(db, gameSessions, users);

    // 9. –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    console.log("üìä –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞...");
    await createRatingChanges(db, users, gameSessions);

    // 10. –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã
    console.log("üèÜ –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã...");
    await createTournaments(db, venues);

    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!");

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
    throw error;
  } finally {
    await client.end();
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function createUsers(db: any) {
  const users = [];

  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
  users.push({
    username: "admin",
    passwordHash: "$2b$10$admin.hash.example",
    firstName: "–ê–¥–º–∏–Ω",
    lastName: "–°–∏—Å—Ç–µ–º—ã",
    email: "admin@padle-club.com",
    phone: "+7-900-123-45-67",
    memberId: "ADMIN001",
    userRole: "admin" as const,
    currentRating: 2000.0,
    bonusPoints: 1000,
    isAccountVerified: true,
    homeVenueId: null,
  });

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–æ–≤
  for (let i = 0; i < 5; i++) {
    users.push({
      username: `coach_${i + 1}`,
      passwordHash: "$2b$10$coach.hash.example",
      firstName: faker.person.firstName(),
      lastName: faker.person.lastName(),
      email: faker.internet.email(),
      phone: faker.phone.number(),
      memberId: `COACH${String(i + 1).padStart(3, '0')}`,
      userRole: "coach" as const,
      currentRating: faker.number.float({ min: 1800, max: 2200 }),
      bonusPoints: faker.number.int({ min: 100, max: 500 }),
      isAccountVerified: true,
      gender: faker.helpers.arrayElement(["male", "female"]),
      dateOfBirth: faker.date.birthdate({ min: 25, max: 50, mode: 'age' }),
    });
  }

  // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
  for (let i = 0; i < 50; i++) {
    users.push({
      username: `player_${i + 1}`,
      passwordHash: "$2b$10$player.hash.example",
      firstName: faker.person.firstName(),
      lastName: faker.person.lastName(),
      email: faker.internet.email(),
      phone: faker.phone.number(),
      memberId: `PLAYER${String(i + 1).padStart(3, '0')}`,
      userRole: "player" as const,
      currentRating: faker.number.float({ min: 1200, max: 1800 }),
      bonusPoints: faker.number.int({ min: 0, max: 200 }),
      isAccountVerified: faker.datatype.boolean(),
      gender: faker.helpers.arrayElement(["male", "female"]),
      dateOfBirth: faker.date.birthdate({ min: 18, max: 65, mode: 'age' }),
    });
  }

  const insertedUsers = await db.insert(schema.users).values(users).returning();
  console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertedUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  return insertedUsers;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–æ–∫
async function createVenues(db: any) {
  const venues = [];

  const venueNames = [
    "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞–¥–¥–ª-–∫–ª—É–±",
    "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –û–ª–∏–º–ø",
    "–§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä –≠–Ω–µ—Ä–≥–∏—è",
    "–ö–ª—É–± –ß–µ–º–ø–∏–æ–Ω",
    "–°–ø–æ—Ä—Ç-–ø–∞—Ä–∫ –ü–æ–±–µ–¥–∞"
  ];

  for (let i = 0; i < venueNames.length; i++) {
    venues.push({
      name: venueNames[i],
      description: `–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–æ—Ä—Ç–∞–º–∏ –¥–ª—è –ø–∞–¥–¥–ª-—Ç–µ–Ω–Ω–∏—Å–∞`,
      address: faker.location.streetAddress(),
      city: "–ú–æ—Å–∫–≤–∞",
      country: "–†–æ—Å—Å–∏—è",
      phone: faker.phone.number(),
      email: faker.internet.email(),
      website: faker.internet.url(),
      workingHours: "08:00-23:00",
      amenities: ["–†–∞–∑–¥–µ–≤–∞–ª–∫–∏", "–î—É—à–µ–≤—ã–µ", "–ö–∞—Ñ–µ", "–ü–∞—Ä–∫–æ–≤–∫–∞", "Wi-Fi"],
      isActive: true,
    });
  }

  const insertedVenues = await db.insert(schema.venues).values(venues).returning();
  console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertedVenues.length} –ø–ª–æ—â–∞–¥–æ–∫`);
  return insertedVenues;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä—Ç–æ–≤
async function createCourts(db: any, venues: any[]) {
  const courts = [];

  for (const venue of venues) {
    // –°–æ–∑–¥–∞–µ–º 3-6 –∫–æ—Ä—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–æ—â–∞–¥–∫–∏
    const courtCount = faker.number.int({ min: 3, max: 6 });

    for (let i = 1; i <= courtCount; i++) {
      courts.push({
        venueId: venue.id,
        name: `–ö–æ—Ä—Ç ${i}`,
        courtType: faker.helpers.arrayElement(["indoor", "outdoor"]),
        surface: faker.helpers.arrayElement(["artificial_grass", "concrete", "clay"]),
        hourlyRate: faker.number.float({ min: 1500, max: 3000 }),
        isActive: faker.datatype.boolean({ probability: 0.9 }),
        description: `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Ä—Ç –¥–ª—è –ø–∞–¥–¥–ª-—Ç–µ–Ω–Ω–∏—Å–∞`,
      });
    }
  }

  const insertedCourts = await db.insert(schema.courts).values(courts).returning();
  console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertedCourts.length} –∫–æ—Ä—Ç–æ–≤`);
  return insertedCourts;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
async function createBookings(db: any, users: any[], courts: any[]) {
  const bookings = [];

  for (let i = 0; i < 100; i++) {
    const startTime = faker.date.future();
    const endTime = new Date(startTime.getTime() + 2 * 60 * 60 * 1000); // +2 —á–∞—Å–∞

    bookings.push({
      courtId: faker.helpers.arrayElement(courts).id,
      userId: faker.helpers.arrayElement(users).id,
      startTime,
      endTime,
      totalPrice: faker.number.float({ min: 3000, max: 6000 }),
      status: faker.helpers.arrayElement(["confirmed", "pending", "cancelled", "completed"]),
      notes: faker.lorem.sentence(),
    });
  }

  const insertedBookings = await db.insert(schema.bookings).values(bookings).returning();
  console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertedBookings.length} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π`);
  return insertedBookings;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
async function createBookingParticipants(db: any, bookings: any[], users: any[]) {
  const participants = [];

  for (const booking of bookings) {
    // –î–æ–±–∞–≤–ª—è–µ–º 1-3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫ –∫–∞–∂–¥–æ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    const participantCount = faker.number.int({ min: 1, max: 3 });

    for (let i = 0; i < participantCount; i++) {
      participants.push({
        bookingId: booking.id,
        userId: faker.helpers.arrayElement(users).id,
        role: faker.helpers.arrayElement(["player", "guest"]),
        joinedAt: faker.date.recent(),
      });
    }
  }

  const insertedParticipants = await db.insert(schema.bookingParticipants).values(participants).returning();
  console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertedParticipants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π`);
  return insertedParticipants;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
async function createPayments(db: any, bookings: any[], _users: any[]) {
  const payments = [];

  for (const booking of bookings) {
    if (booking.status === "confirmed" || booking.status === "completed") {
      payments.push({
        bookingId: booking.id,
        userId: booking.userId,
        amount: booking.totalPrice,
        paymentMethod: faker.helpers.arrayElement(["card", "cash", "bank_transfer", "bonus_points"]),
        status: faker.helpers.arrayElement(["completed", "pending", "failed"]),
        transactionId: faker.string.uuid(),
        paidAt: faker.date.recent(),
      });
    }
  }

  const insertedPayments = await db.insert(schema.payments).values(payments).returning();
  console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertedPayments.length} –ø–ª–∞—Ç–µ–∂–µ–π`);
  return insertedPayments;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
async function createGameSessions(db: any, courts: any[], users: any[]) {
  const gameSessions = [];

  for (let i = 0; i < 80; i++) {
    const startTime = faker.date.recent();
    const endTime = new Date(startTime.getTime() + 90 * 60 * 1000); // +1.5 —á–∞—Å–∞

    gameSessions.push({
      courtId: faker.helpers.arrayElement(courts).id,
      organizerId: faker.helpers.arrayElement(users).id,
      startTime,
      endTime,
      gameType: faker.helpers.arrayElement(["singles", "doubles"]),
      skillLevel: faker.helpers.arrayElement(["beginner", "intermediate", "advanced", "professional"]),
      maxPlayers: faker.helpers.arrayElement([2, 4]),
      currentPlayers: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤
      status: faker.helpers.arrayElement(["scheduled", "in_progress", "completed", "cancelled"]),
      isRanked: faker.datatype.boolean(),
      notes: faker.lorem.sentence(),
    });
  }

  const insertedGameSessions = await db.insert(schema.gameSessions).values(gameSessions).returning();
  console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertedGameSessions.length} –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π`);
  return insertedGameSessions;
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏
async function createGamePlayers(db: any, gameSessions: any[], users: any[]) {
  const gamePlayers = [];

  for (const session of gameSessions) {
    const playerCount = Math.min(session.maxPlayers, faker.number.int({ min: 2, max: session.maxPlayers }));

    for (let i = 0; i < playerCount; i++) {
      gamePlayers.push({
        gameSessionId: session.id,
        userId: faker.helpers.arrayElement(users).id,
        team: faker.helpers.arrayElement(["team_a", "team_b"]),
        position: faker.helpers.arrayElement(["left", "right"]),
        score: session.status === "completed" ? faker.number.int({ min: 0, max: 6 }) : null,
        joinedAt: faker.date.recent(),
      });
    }
  }

  const insertedGamePlayers = await db.insert(schema.gamePlayers).values(gamePlayers).returning();
  console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${insertedGamePlayers.length} –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏`);
  return insertedGamePlayers;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥–∞
async function createRatingChanges(db: any, users: any[], gameSessions: any[]) {
  const ratingChanges = [];

  const completedSessions = gameSessions.filter(s => s.status === "completed" && s.isRanked);

  for (const session of completedSessions) {
    // –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è 2-4 –∏–≥—Ä–æ–∫–æ–≤
    const playerCount = faker.number.int({ min: 2, max: 4 });

    for (let i = 0; i < playerCount; i++) {
      ratingChanges.push({
        userId: faker.helpers.arrayElement(users).id,
        gameSessionId: session.id,
        oldRating: faker.number.float({ min: 1200, max: 2000 }),
        newRating: faker.number.float({ min: 1200, max: 2000 }),
        ratingChange: faker.number.float({ min: -50, max: 50 }),
        reason: "game_result",
      });
    }
  }

  const insertedRatingChanges = await db.insert(schema.ratingChanges).values(ratingChanges).returning();
  console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertedRatingChanges.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥–∞`);
  return insertedRatingChanges;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
async function createTournaments(db: any, venues: any[]) {
  const tournaments = [];

  for (let i = 0; i < 10; i++) {
    const startDate = faker.date.future();
    const endDate = new Date(startDate.getTime() + 7 * 24 * 60 * 60 * 1000); // +7 –¥–Ω–µ–π

    tournaments.push({
      name: `–¢—É—Ä–Ω–∏—Ä ${faker.company.name()}`,
      description: faker.lorem.paragraph(),
      venueId: faker.helpers.arrayElement(venues).id,
      startDate,
      endDate,
      registrationDeadline: new Date(startDate.getTime() - 3 * 24 * 60 * 60 * 1000), // -3 –¥–Ω—è
      maxParticipants: faker.number.int({ min: 16, max: 64 }),
      currentParticipants: 0,
      entryFee: faker.number.float({ min: 2000, max: 10000 }),
      prizePool: faker.number.float({ min: 50000, max: 200000 }),
      tournamentType: faker.helpers.arrayElement(["single_elimination", "double_elimination", "round_robin"]),
      skillLevel: faker.helpers.arrayElement(["open", "beginner", "intermediate", "advanced"]),
      status: faker.helpers.arrayElement(["upcoming", "registration_open", "in_progress", "completed"]),
      rules: faker.lorem.paragraph(),
    });
  }

  const insertedTournaments = await db.insert(schema.tournaments).values(tournaments).returning();
  console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${insertedTournaments.length} —Ç—É—Ä–Ω–∏—Ä–æ–≤`);
  return insertedTournaments;
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  seedDatabase()
    .then(() => {
      console.log("üéâ –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("üí• –û—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
}
