/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Drizzle
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç spawn –¥–ª—è –∑–∞–ø—É—Å–∫–∞ drizzle-kit push –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–≤–µ—á–∞–µ—Ç "Yes"
 */

import { spawn } from 'child_process';

async function autoMigrate() {
  console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

  return new Promise<void>((resolve, reject) => {
    // –ó–∞–ø—É—Å–∫–∞–µ–º drizzle-kit push
    const drizzleProcess = spawn('npx', ['drizzle-kit', 'push'], {
      stdio: ['pipe', 'pipe', 'inherit']
    });

    let output = '';
    let hasPrompt = false;

    // –°–ª—É—à–∞–µ–º –≤—ã–≤–æ–¥
    drizzleProcess.stdout?.on('data', (data) => {
      const text = data.toString();
      output += text;
      process.stdout.write(text);

      // –ò—â–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      if (text.includes('Yes, I want to execute all statements') && !hasPrompt) {
        hasPrompt = true;
        console.log('\nü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º "Yes, I want to execute all statements"');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫—É –≤–Ω–∏–∑ –∏ Enter –¥–ª—è –≤—ã–±–æ—Ä–∞ "Yes"
        setTimeout(() => {
          drizzleProcess.stdin?.write('\x1B[B'); // –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
          setTimeout(() => {
            drizzleProcess.stdin?.write('\r'); // Enter
          }, 100);
        }, 500);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    drizzleProcess.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
        resolve();
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: ${code}`);
        reject(new Error(`Migration failed with code ${code}`));
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    drizzleProcess.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ drizzle-kit:', error);
      reject(error);
    });

    // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
    setTimeout(() => {
      if (!drizzleProcess.killed) {
        console.log('‚è∞ –¢–∞–π–º–∞—É—Ç - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å');
        drizzleProcess.kill();
        reject(new Error('Migration timeout'));
      }
    }, 120000); // 2 –º–∏–Ω—É—Ç—ã
  });
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  autoMigrate()
    .then(() => {
      console.log('üéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: npm run seed:db');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• –û—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}
