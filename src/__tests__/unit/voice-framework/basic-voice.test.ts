/**
 * üé§ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

import { describe, it, expect } from "vitest";

describe("Voice Framework - Basic Tests", () => {
  describe("üü¢ GREEN: –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π", () => {
    it("–¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å voice-ai –º–æ–¥—É–ª—å", async () => {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø—É—Ç—è–º–∏
      const voiceAi = await import("../../../services/voice-ai");
      
      expect(voiceAi.voiceToText).toBeDefined();
      expect(voiceAi.textToVoice).toBeDefined();
      expect(voiceAi.parseVoiceCommand).toBeDefined();
      expect(voiceAi.processVoiceBooking).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å voice-tools –º–æ–¥—É–ª—å", async () => {
      const voiceTools = await import("../../../mcp-voice-server/voice-tools");
      
      expect(voiceTools.voiceBookingTool).toBeDefined();
      expect(voiceTools.voiceAnalyticsTool).toBeDefined();
      expect(voiceTools.voiceTestTool).toBeDefined();
      expect(voiceTools.createMCPVoiceServer).toBeDefined();
    });
  });

  describe("üü¢ GREEN: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å voice-ai", () => {
    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É", async () => {
      const { parseVoiceCommand } = await import("../../../services/voice-ai");
      
      const result = await parseVoiceCommand("–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00");
      
      expect(result).not.toBeNull();
      expect(result?.command).toBe("book_court");
    });

    it("–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å", async () => {
      const { textToVoice } = await import("../../../services/voice-ai");
      
      const result = await textToVoice("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
      
      expect(result.audioUrl).toBeDefined();
      expect(result.audioUrl).toContain("https://");
      expect(result.format).toBe("mp3");
    });

    it("–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç", async () => {
      const { voiceToText } = await import("../../../services/voice-ai");
      
      const audioBuffer = new ArrayBuffer(1024);
      const result = await voiceToText(audioBuffer);
      
      expect(result.text).toBeDefined();
      expect(result.confidence).toBeGreaterThan(0.8);
      expect(result.language).toMatch(/^(ru-RU|en-US|th-TH)$/);
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", async () => {
      const { processVoiceBooking } = await import("../../../services/voice-ai");
      
      const request = {
        command: "book_court" as const,
        date: "2024-12-27",
        time: "14:00"
      };
      
      const result = await processVoiceBooking(request, "user-123");
      
      expect(result.success).toBe(true);
      expect(result.bookingId).toBeDefined();
      expect(result.message).toContain("–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω");
    });
  });

  describe("üü¢ GREEN: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å voice-tools", () => {
    it("–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å MCP Voice Server", async () => {
      const { createMCPVoiceServer } = await import("../../../mcp-voice-server/voice-tools");
      
      const server = createMCPVoiceServer();
      
      expect(server.tools).toHaveLength(3);
      expect(server.tools.map(t => t.name)).toEqual([
        "voice_booking_tool",
        "voice_analytics_tool", 
        "voice_test_tool"
      ]);
      expect(server.handleToolCall).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ tool", async () => {
      const { voiceBookingTool } = await import("../../../mcp-voice-server/voice-tools");
      
      const args = {
        text: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        userId: "user-123",
        sessionId: "session-456"
      };
      
      const result = await voiceBookingTool(args);
      
      expect(result.success).toBe(true);
      expect(result.bookingId).toBeDefined();
      expect(result.audioResponse).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–µ—Ä–µ–∑ tool", async () => {
      const { voiceAnalyticsTool } = await import("../../../mcp-voice-server/voice-tools");
      
      const args = {
        metricType: "usage" as const
      };
      
      const result = await voiceAnalyticsTool(args);
      
      expect(result.success).toBe(true);
      expect(result.data.totalInteractions).toBeGreaterThan(0);
      expect(result.data.topCommands).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ tool", async () => {
      const { voiceTestTool } = await import("../../../mcp-voice-server/voice-tools");
      
      const args = {
        testType: "command_parsing" as const,
        inputData: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
      };
      
      const result = await voiceTestTool(args);
      
      expect(result.success).toBe(true);
      expect(result.testType).toBe("command_parsing");
      expect(result.result).not.toBeNull();
    });
  });

  describe("üü¢ GREEN: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã", () => {
    it("–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è", async () => {
      const { voiceTestTool } = await import("../../../mcp-voice-server/voice-tools");
      
      const args = {
        testType: "full_cycle" as const,
        inputData: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
      };
      
      const result = await voiceTestTool(args);
      
      expect(result.success).toBe(true);
      expect(result.result.command).toBeDefined();
      expect(result.result.booking).toBeDefined();
      expect(result.result.audioResponse).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", async () => {
      const { voiceBookingTool } = await import("../../../mcp-voice-server/voice-tools");
      
      const invalidArgs = {
        text: "",
        userId: "",
        sessionId: "session-456"
      };
      
      const result = await voiceBookingTool(invalidArgs);
      
      expect(result.success).toBe(false);
      expect(result.message).toContain("–û—à–∏–±–∫–∞");
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", async () => {
      const { parseVoiceCommand } = await import("../../../services/voice-ai");
      
      const result = await parseVoiceCommand("–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?");
      
      expect(result).toBeNull();
    });
  });
});
