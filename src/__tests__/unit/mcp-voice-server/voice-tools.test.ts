/**
 * üé§ Unit —Ç–µ—Å—Ç—ã –¥–ª—è MCP Voice Server Tools
 * TDD –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Claude –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

import { describe, it, expect, beforeAll, afterAll, vi } from "vitest";
import {
  voiceBookingTool,
  voiceAnalyticsTool,
  voiceTestTool,
  createMCPVoiceServer,
  type VoiceBookingToolArgs,
  type VoiceAnalyticsToolArgs,
  type VoiceTestToolArgs,
} from "../../../mcp-voice-server/voice-tools";

describe("MCP Voice Server Tools - TDD", () => {
  let originalEnv: typeof process.env;

  beforeAll(() => {
    originalEnv = { ...process.env };
    process.env.NODE_ENV = "test";
  });

  afterAll(() => {
    process.env = originalEnv;
  });

  describe("üü¢ GREEN: voice_booking_tool - –≥–æ–ª–æ—Å–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Claude", () => {
    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", async () => {
      const args: VoiceBookingToolArgs = {
        text: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –Ω–∞ –¥–≤–∞ —á–∞—Å–∞",
        userId: "user-123",
        sessionId: "session-456",
      };

      const result = await voiceBookingTool(args);

      expect(result.success).toBe(true);
      expect(result.bookingId).toEqual(expect.stringContaining("booking-"));
      expect(result.message).toContain("–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω");
      expect(result.audioResponse).toEqual(expect.stringContaining("https://"));
      expect(result.nextSteps).toEqual(
        expect.arrayContaining([expect.any(String)])
      );
    });

    it("–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", async () => {
      const invalidArgs = {
        text: "", // –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        userId: "",
        sessionId: "session-456",
      };

      const result = await voiceBookingTool(
        invalidArgs as VoiceBookingToolArgs
      );

      expect(result.success).toBe(false);
      expect(result.message).toContain("–û—à–∏–±–∫–∞");
    });

    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", async () => {
      const args: VoiceBookingToolArgs = {
        text: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        userId: "user-123",
        sessionId: "session-456",
      };

      const result = await voiceBookingTool(args);

      expect(result.success).toBe(true);
      expect(result.bookingId).toBeDefined();
      expect(result.audioResponse).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", async () => {
      const commands = [
        "Book a court for tomorrow at 2 PM",
        "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
      ];

      for (const text of commands) {
        const args: VoiceBookingToolArgs = {
          text,
          userId: "user-123",
          sessionId: "session-456",
        };

        const result = await voiceBookingTool(args);
        expect(result.success).toBe(true);
      }
    });

    it("–¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏", async () => {
      const sessionId = "session-789";
      const args: VoiceBookingToolArgs = {
        text: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        userId: "user-123",
        sessionId,
      };

      const result = await voiceBookingTool(args);

      expect(result.success).toBe(true);
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    });
  });

  describe("üü¢ GREEN: voice_analytics_tool - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π", () => {
    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", async () => {
      const args: VoiceAnalyticsToolArgs = {
        metricType: "usage",
      };

      const result = await voiceAnalyticsTool(args);

      expect(result.success).toBe(true);
      expect(result.data.totalInteractions).toBeGreaterThan(0);
      expect(result.data.topCommands).toEqual(
        expect.arrayContaining([
          expect.objectContaining({
            command: expect.any(String),
            count: expect.any(Number),
          }),
        ])
      );
    });

    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", async () => {
      const args: VoiceAnalyticsToolArgs = {
        metricType: "accuracy",
      };

      const result = await voiceAnalyticsTool(args);

      expect(result.success).toBe(true);
      expect(result.data.averageAccuracy).toBeGreaterThan(0);
      expect(result.data.averageAccuracy).toBeLessThanOrEqual(1);
    });

    it("–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", async () => {
      const args: VoiceAnalyticsToolArgs = {
        metricType: "satisfaction",
      };

      const result = await voiceAnalyticsTool(args);

      expect(result.success).toBe(true);
      expect(result.data.satisfactionScore).toBeGreaterThan(0);
      expect(result.data.satisfactionScore).toBeLessThanOrEqual(5);
    });

    it("–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", async () => {
      const args: VoiceAnalyticsToolArgs = {
        metricType: "usage",
        userId: "user-123",
      };

      const result = await voiceAnalyticsTool(args);

      expect(result.success).toBe(true);
      expect(result.data.userStats).toEqual(
        expect.arrayContaining([
          expect.objectContaining({
            userId: "user-123",
            interactions: expect.any(Number),
          }),
        ])
      );
    });
  });

  describe("üü¢ GREEN: voice_test_tool - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π", () => {
    it("–¥–æ–ª–∂–µ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç", async () => {
      const args: VoiceTestToolArgs = {
        testType: "speech_to_text",
        inputData: new ArrayBuffer(1024),
        options: { language: "ru-RU" },
      };

      const result = await voiceTestTool(args);

      expect(result.success).toBe(true);
      expect(result.testType).toBe("speech_to_text");
      expect(result.performance.responseTime).toBeGreaterThan(0);
      expect(result.performance.accuracy).toBeGreaterThan(0.8);
    });

    it("–¥–æ–ª–∂–µ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å", async () => {
      const args: VoiceTestToolArgs = {
        testType: "text_to_speech",
        inputData: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ—á—å",
        options: { voice: "maria" },
      };

      const result = await voiceTestTool(args);

      expect(result.success).toBe(true);
      expect(result.testType).toBe("text_to_speech");
      expect(result.performance.accuracy).toBe(1.0);
    });

    it("–¥–æ–ª–∂–µ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥", async () => {
      const args: VoiceTestToolArgs = {
        testType: "command_parsing",
        inputData: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
      };

      const result = await voiceTestTool(args);

      expect(result.success).toBe(true);
      expect(result.testType).toBe("command_parsing");
      expect(result.result).not.toBeNull();
    });

    it("–¥–æ–ª–∂–µ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è", async () => {
      const args: VoiceTestToolArgs = {
        testType: "full_cycle",
        inputData: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
      };

      const result = await voiceTestTool(args);

      expect(result.success).toBe(true);
      expect(result.testType).toBe("full_cycle");
      expect(result.result.command).toBeDefined();
      expect(result.result.booking).toBeDefined();
      expect(result.result.audioResponse).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", async () => {
      const args: VoiceTestToolArgs = {
        testType: "speech_to_text",
        inputData: "invalid data type", // –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
      };

      const result = await voiceTestTool(args);

      expect(result.success).toBe(false);
      expect(result.errors).toBeDefined();
      expect(result.errors?.length).toBeGreaterThan(0);
    });
  });

  describe("üü¢ GREEN: Integration Tests - MCP Voice Server", () => {
    it("–¥–æ–ª–∂–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ voice tools", async () => {
      const server = createMCPVoiceServer();

      expect(server.tools).toHaveLength(3);
      expect(server.tools.map((t) => t.name)).toEqual([
        "voice_booking_tool",
        "voice_analytics_tool",
        "voice_test_tool",
      ]);
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", async () => {
      const server = createMCPVoiceServer();

      const promises = [
        server.handleToolCall("voice_booking_tool", {
          text: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
          userId: "user-1",
          sessionId: "session-1",
        }),
        server.handleToolCall("voice_analytics_tool", {
          metricType: "usage",
        }),
        server.handleToolCall("voice_test_tool", {
          testType: "command_parsing",
          inputData: "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã",
        }),
      ];

      const results = await Promise.all(promises);

      expect(results).toHaveLength(3);
      results.forEach((result) => {
        expect(result.success).toBe(true);
      });
    });

    it("–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –æ—à–∏–±–∫–∏ Claude –≤ –ø–æ–Ω—è—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ", async () => {
      const server = createMCPVoiceServer();

      await expect(server.handleToolCall("unknown_tool", {})).rejects.toThrow(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
      );
    });

    it("–¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è debugging", async () => {
      const server = createMCPVoiceServer();
      const consoleSpy = vi.spyOn(console, "log").mockImplementation(() => {});

      await server.handleToolCall("voice_booking_tool", {
        text: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        userId: "user-123",
        sessionId: "session-456",
      });

      expect(consoleSpy).toHaveBeenCalledWith(
        "üìù Voice Interaction Logged:",
        expect.objectContaining({
          userId: "user-123",
          command: "book_court",
          success: true,
        })
      );

      consoleSpy.mockRestore();
    });
  });
});
