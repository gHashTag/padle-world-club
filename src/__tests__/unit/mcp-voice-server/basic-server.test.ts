/**
 * üé§ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è MCP Voice Server
 * TDD –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞ - "Just To Be Done"
 */

import { describe, it, expect } from "vitest";

describe("MCP Voice Server - Basic Tests", () => {
  describe("üü¢ GREEN: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞", () => {
    it("–¥–æ–ª–∂–µ–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞", async () => {
      // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø—É—Ç—è–º–∏
      const serverModule = await import("../../../mcp-voice-server/src/index");

      expect(serverModule.createVoiceServer).toBeDefined();
      expect(serverModule.handlePing).toBeDefined();
      expect(serverModule.handleParseCommand).toBeDefined();
      expect(serverModule.handleVoiceBooking).toBeDefined();
      expect(serverModule.handleSelfTest).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ping –∫–æ–º–∞–Ω–¥—É", async () => {
      const { handlePing } = await import("../../../mcp-voice-server/src/index");
      
      const result = await handlePing({ message: "Test ping" });
      
      expect(result.success).toBe(true);
      expect(result.message).toContain("Voice Server is alive!");
      expect(result.message).toContain("Test ping");
      expect(result.timestamp).toBeDefined();
      expect(result.server).toBe("MCP Voice Server v1.0.0");
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ping —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º", async () => {
      const { handlePing } = await import("../../../mcp-voice-server/src/index");
      
      const result = await handlePing({});
      
      expect(result.success).toBe(true);
      expect(result.message).toContain("Hello from Voice Server!");
      expect(result.timestamp).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –ø–∞—Ä—Å–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É", async () => {
      const { handleParseCommand } = await import("../../../mcp-voice-server/src/index");
      
      const result = await handleParseCommand({
        text: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        language: "ru-RU"
      });
      
      expect(result.success).toBe(true);
      expect(result.command).not.toBeNull();
      expect(result.command?.command).toBe("book_court");
      expect(result.originalText).toBe("–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00");
      expect(result.language).toBe("ru-RU");
      expect(result.timestamp).toBeDefined();
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É", async () => {
      const { handleParseCommand } = await import("../../../mcp-voice-server/src/index");
      
      const result = await handleParseCommand({
        text: "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?",
        language: "ru-RU"
      });
      
      expect(result.success).toBe(true);
      expect(result.command).toBeNull();
      expect(result.originalText).toBe("–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?");
    });

    it("–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —è–∑—ã–∫", async () => {
      const { handleParseCommand } = await import("../../../mcp-voice-server/src/index");
      
      const result = await handleParseCommand({
        text: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
      });
      
      expect(result.success).toBe(true);
      expect(result.language).toBe("ru-RU");
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", async () => {
      const { handleParseCommand } = await import("../../../mcp-voice-server/src/index");
      
      try {
        await handleParseCommand({
          text: "", // –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
          language: "ru-RU"
        });
        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, —Ç–æ –æ—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–æ—à–µ–Ω–∞
        expect(true).toBe(false);
      } catch (error) {
        expect(error).toBeDefined();
      }
    });

    it("–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å MCP —Å–µ—Ä–≤–µ—Ä", async () => {
      const { createVoiceServer } = await import("../../../mcp-voice-server/src/index");

      const server = await createVoiceServer();

      expect(server).toBeDefined();
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã
      expect(typeof server.setRequestHandler).toBe("function");
      expect(typeof server.connect).toBe("function");
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", async () => {
      const { handleVoiceBooking } = await import("../../../mcp-voice-server/src/index");

      const result = await handleVoiceBooking({
        text: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        userId: "user-123",
        sessionId: "session-456",
        language: "ru-RU"
      });

      expect(result.success).toBe(true);
      expect(result.bookingId).toBeDefined();
      expect(result.message).toContain("–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω");
      expect(result.audioResponse).toBeDefined();
      expect(result.audioResponse).toContain("https://");
      expect(result.command?.command).toBe("book_court");
      expect(result.userId).toBe("user-123");
      expect(result.sessionId).toBe("session-456");
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ voice_booking", async () => {
      const { handleVoiceBooking } = await import("../../../mcp-voice-server/src/index");

      const result = await handleVoiceBooking({
        text: "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?",
        userId: "user-123",
        sessionId: "session-456",
        language: "ru-RU"
      });

      expect(result.success).toBe(false);
      expect(result.error).toBe("Voice command not recognized");
      expect(result.suggestion).toContain("Try saying");
    });

    it("–¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã voice_booking", async () => {
      const { handleVoiceBooking } = await import("../../../mcp-voice-server/src/index");

      try {
        await handleVoiceBooking({
          text: "", // –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
          userId: "user-123",
          sessionId: "session-456"
        });
        expect(true).toBe(false); // –Ω–µ –¥–æ–ª–∂–Ω–æ –¥–æ–π—Ç–∏ —Å—é–¥–∞
      } catch (error) {
        expect(error).toBeDefined();
      }
    });

    it("–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ping", async () => {
      const { handleSelfTest } = await import("../../../mcp-voice-server/src/index");

      const result = await handleSelfTest({
        testType: "ping",
        testData: "Self-test data"
      });

      expect(result.success).toBe(true);
      expect(result.testType).toBe("ping");
      expect(result.result.success).toBe(true);
      expect(result.result.message).toContain("Voice Server is alive!");
      expect(result.performance.responseTime).toBeGreaterThan(0);
    });

    it("–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ parse_command", async () => {
      const { handleSelfTest } = await import("../../../mcp-voice-server/src/index");

      const result = await handleSelfTest({
        testType: "parse_command",
        testData: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
      });

      expect(result.success).toBe(true);
      expect(result.testType).toBe("parse_command");
      expect(result.result.success).toBe(true);
      expect(result.result.command?.command).toBe("book_court");
    });

    it("–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ voice_booking", async () => {
      const { handleSelfTest } = await import("../../../mcp-voice-server/src/index");

      const result = await handleSelfTest({
        testType: "voice_booking",
        testData: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
      });

      expect(result.success).toBe(true);
      expect(result.testType).toBe("voice_booking");
      expect(result.result.success).toBe(true);
      expect(result.result.bookingId).toBeDefined();
      expect(result.result.message).toContain("–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω");
    });

    it("–¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", async () => {
      const { handleSelfTest } = await import("../../../mcp-voice-server/src/index");

      const result = await handleSelfTest({
        testType: "full_cycle",
        testData: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
      });

      expect(result.success).toBe(true);
      expect(result.testType).toBe("full_cycle");
      expect(result.result.ping.success).toBe(true);
      expect(result.result.parse.success).toBe(true);
      expect(result.result.booking.success).toBe(true);
      expect(result.result.allSuccessful).toBe(true);
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏", async () => {
      const { handleSelfTest } = await import("../../../mcp-voice-server/src/index");

      const result = await handleSelfTest({
        testType: "unknown_test" as any,
        testData: "Test data"
      });

      expect(result.success).toBe(false);
      expect(result.error).toContain("Unknown test type");
    });
  });

  describe("üü¢ GREEN: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã", () => {
    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —è–∑—ã–∫–∏ –∫–æ–º–∞–Ω–¥", async () => {
      const { handleParseCommand } = await import("../../../mcp-voice-server/src/index");
      
      const commands = [
        { text: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00", language: "ru-RU" as const },
        { text: "Book a court for tomorrow at 2 PM", language: "en-US" as const },
        { text: "‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏ï‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 14:00", language: "th-TH" as const },
      ];
      
      for (const cmd of commands) {
        const result = await handleParseCommand(cmd);
        expect(result.success).toBe(true);
        expect(result.language).toBe(cmd.language);
        expect(result.command?.command).toBe("book_court");
      }
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏", async () => {
      const { handleParseCommand } = await import("../../../mcp-voice-server/src/index");
      
      const result = await handleParseCommand({
        text: "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        language: "ru-RU"
      });
      
      expect(result.success).toBe(true);
      expect(result.command?.command).toBe("check_availability");
    });

    it("–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã", async () => {
      const { handleParseCommand } = await import("../../../mcp-voice-server/src/index");
      
      const result = await handleParseCommand({
        text: "–û—Ç–º–µ–Ω–∏ –º–æ—é –±—Ä–æ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
        language: "ru-RU"
      });
      
      expect(result.success).toBe(true);
      expect(result.command?.command).toBe("cancel_booking");
    });

    it("–¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–∞—Ö", async () => {
      const { handlePing, handleParseCommand } = await import("../../../mcp-voice-server/src/index");
      
      const pingResult = await handlePing({ message: "Test" });
      const parseResult = await handleParseCommand({
        text: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç timestamp
      expect(pingResult.timestamp).toBeDefined();
      expect(parseResult.timestamp).toBeDefined();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç timestamp
      expect(new Date(pingResult.timestamp).getTime()).toBeGreaterThan(0);
      expect(new Date(parseResult.timestamp).getTime()).toBeGreaterThan(0);
    });
  });
});
