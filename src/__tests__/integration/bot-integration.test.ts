import { describe, it, expect, beforeEach } from "bun:test";
import { jest } from "@jest/globals";
import { Telegraf } from "telegraf";
import { setupInstagramScraperBot } from "../../../index";
import { ScraperBotContext, StorageAdapter, InstagramScraperBotConfig } from "@/types";
import { createMockStorageAdapter } from "../helpers/types";
import { createMockUser, createMockProject, createMockCompetitor, createMockHashtag } from "../helpers/mocks";

describe("Instagram Scraper Bot Integration Tests", () => {
  let bot: Telegraf<ScraperBotContext>;
  let storageAdapter: StorageAdapter;
  let config: InstagramScraperBotConfig;
  let botApi: any;

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testUser = createMockUser({
    id: 1,
    telegram_id: 123456789,
    username: "testuser"
  });

  const testProjects = [
    createMockProject({
      id: 1,
      user_id: 1,
      name: "Test Project 1"
    }),
    createMockProject({
      id: 2,
      user_id: 1,
      name: "Test Project 2"
    })
  ];

  const testCompetitors = [
    createMockCompetitor({
      id: 1,
      project_id: 1,
      username: "competitor1",
      instagram_url: "https://instagram.com/competitor1"
    }),
    createMockCompetitor({
      id: 2,
      project_id: 1,
      username: "competitor2",
      instagram_url: "https://instagram.com/competitor2"
    })
  ];

  const testHashtags = [
    createMockHashtag({
      id: 1,
      project_id: 1,
      hashtag: "test1"
    }),
    createMockHashtag({
      id: 2,
      project_id: 1,
      hashtag: "test2"
    })
  ];

  beforeEach(() => {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    bot = {
      use: jest.fn(),
      command: jest.fn(),
      hears: jest.fn(),
      launch: jest.fn(),
      catch: jest.fn(),
    } as unknown as Telegraf<ScraperBotContext>;

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ StorageAdapter
    storageAdapter = createMockStorageAdapter();

    config = {
      telegramBotToken: "test-token",
      apifyClientToken: "test-apify-token",
    } as InstagramScraperBotConfig;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    botApi = setupInstagramScraperBot(bot, storageAdapter, config);
  });

  it("should allow navigation from projects to competitors scene", async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    (storageAdapter.findUserByTelegramIdOrCreate as any).mockImplementation(() => Promise.resolve(testUser));
    (storageAdapter.getProjectsByUserId as any).mockImplementation(() => Promise.resolve(testProjects));
    (storageAdapter.getProjectById as any).mockImplementation(() => Promise.resolve(testProjects[0]));
    (storageAdapter.getCompetitorAccounts as any).mockImplementation(() => Promise.resolve(testCompetitors));

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const ctx = {
      from: { id: 123456789 },
      scene: {
        enter: jest.fn(),
        leave: jest.fn(),
        reenter: jest.fn(),
        session: {},
      },
      reply: jest.fn().mockImplementation(() => Promise.resolve()),
      storage: storageAdapter,
      scraperConfig: config,
    } as unknown as ScraperBotContext;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –±–æ—Ç–∞
    expect(botApi.enterProjectScene()).toBe("instagram_scraper_projects");
    expect(botApi.enterCompetitorScene()).toBe("instagram_scraper_competitors");

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –ø—Ä–æ–µ–∫—Ç–æ–≤
    await ctx.scene.enter(botApi.enterProjectScene());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã
    expect(ctx.scene.enter).toHaveBeenCalledWith("instagram_scraper_projects");

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    await ctx.scene.enter(botApi.enterCompetitorScene());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã
    expect(ctx.scene.enter).toHaveBeenCalledWith("instagram_scraper_competitors");
  });

  it("should allow navigation from competitors to hashtags scene", async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    (storageAdapter.getUserByTelegramId as any).mockImplementation(() => Promise.resolve(testUser));
    (storageAdapter.getProjectsByUserId as any).mockImplementation(() => Promise.resolve([testProjects[0]]));
    (storageAdapter.getCompetitorAccounts as any).mockImplementation(() => Promise.resolve(testCompetitors));
    (storageAdapter.getHashtagsByProjectId as any).mockImplementation(() => Promise.resolve(testHashtags));

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const ctx = {
      from: { id: 123456789 },
      scene: {
        enter: jest.fn(),
        leave: jest.fn(),
        reenter: jest.fn(),
        session: {
          currentProjectId: 1,
        },
      },
      reply: jest.fn().mockImplementation(() => Promise.resolve()),
      storage: storageAdapter,
      scraperConfig: config,
    } as unknown as ScraperBotContext;

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    await ctx.scene.enter(botApi.enterCompetitorScene());

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã
    expect(ctx.scene.enter).toHaveBeenCalledWith("instagram_scraper_competitors");

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —Ö—ç—à—Ç–µ–≥–æ–≤
    const hashtagSceneName = "instagram_scraper_hashtags";
    await ctx.scene.enter(hashtagSceneName, { projectId: 1 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    expect(ctx.scene.enter).toHaveBeenCalledWith("instagram_scraper_hashtags", { projectId: 1 });
  });

  it("should handle full flow from projects to competitors to hashtags", async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    (storageAdapter.findUserByTelegramIdOrCreate as any).mockImplementation(() => Promise.resolve(testUser));
    (storageAdapter.getProjectsByUserId as any).mockImplementation(() => Promise.resolve(testProjects));
    (storageAdapter.getProjectById as any).mockImplementation(() => Promise.resolve(testProjects[0]));
    (storageAdapter.getCompetitorAccounts as any).mockImplementation(() => Promise.resolve(testCompetitors));
    (storageAdapter.getHashtagsByProjectId as any).mockImplementation(() => Promise.resolve(testHashtags));

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const ctx = {
      from: { id: 123456789 },
      scene: {
        enter: jest.fn(),
        leave: jest.fn(),
        reenter: jest.fn(),
        session: {},
      },
      reply: jest.fn().mockImplementation(() => Promise.resolve()),
      storage: storageAdapter,
      scraperConfig: config,
    } as unknown as ScraperBotContext;

    // 1. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ–µ–∫—Ç–æ–≤
    const projectsSceneName = botApi.enterProjectScene();
    await ctx.scene.enter(projectsSceneName);
    expect(ctx.scene.enter).toHaveBeenCalledWith("instagram_scraper_projects");

    // 2. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º
    ctx.scene.session.currentProjectId = 1;
    const competitorSceneName = botApi.enterCompetitorScene();
    await ctx.scene.enter(competitorSceneName);
    expect(ctx.scene.enter).toHaveBeenCalledWith("instagram_scraper_competitors");

    // 3. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ö—ç—à—Ç–µ–≥–∞–º
    const hashtagSceneName = "instagram_scraper_hashtags";
    await ctx.scene.enter(hashtagSceneName, { projectId: 1 });
    expect(ctx.scene.enter).toHaveBeenCalledWith("instagram_scraper_hashtags", { projectId: 1 });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –±–æ—Ç–∞
    const menuButtons = botApi.getMenuButtons();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è
    expect(menuButtons.length).toBeGreaterThanOrEqual(3);
    expect(menuButtons[0]).toEqual(["üìä –ü—Ä–æ–µ–∫—Ç—ã", "üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã"]);
    expect(menuButtons[1]).toEqual(["#Ô∏è‚É£ –•—ç—à—Ç–µ–≥–∏", "üé¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥"]);

    const commands = botApi.getCommands();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –¥–≤–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è
    expect(commands.length).toBeGreaterThanOrEqual(5);
    expect(commands[0]).toEqual({ command: "projects", description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏" });
    expect(commands[1]).toEqual({ command: "competitors", description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏" });
  });
});
