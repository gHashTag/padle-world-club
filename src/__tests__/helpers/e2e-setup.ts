import { jest } from "bun:test";
import { Telegraf } from "telegraf";
import { UserFromGetMe } from "telegraf/types";
import { setupInstagramScraperBot } from "../../..";
import type {
  ScraperBotContext,
  InstagramScraperBotConfig,
} from "../../types";
import { createMockStorageAdapter } from "./types";
import { createMockUser, createMockProject, createMockCompetitor, createMockHashtag } from "./mocks";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø SpyInstance –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
export type SpyInstance<T extends any[] = any[], R = any> = {
  mock: {
    calls: T[][];
    results: { type: string; value: R }[];
    instances: any[];
    invocationCallOrder: number[];
    lastCall: T[];
    clear: () => void;
  };
};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export const USER_ID_FOR_TESTING = 123456789;
export const CHAT_ID_FOR_TESTING = 12345;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
export const TEST_BOT_CONFIG: InstagramScraperBotConfig = {
  telegramBotToken: "test-e2e-bot-token",
  apifyClientToken: "test-token",
};

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤–æ–º –±–æ—Ç–µ
export const TEST_BOT_INFO: UserFromGetMe = {
  id: 987654321, // ID –±–æ—Ç–∞
  is_bot: true,
  first_name: "TestE2EBot",
  username: "TestE2EBot_username",
  can_join_groups: true,
  can_read_all_group_messages: false,
  supports_inline_queries: false,
};

/**
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è e2e —Ç–µ—Å—Ç–æ–≤
 */
export function setupE2ETestEnvironment() {
  // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
  const mockUser = createMockUser({
    id: 1,
    telegram_id: USER_ID_FOR_TESTING,
    username: "testuser",
    first_name: "Test",
    last_name: "User"
  });

  const mockProjects = [
    createMockProject({
      id: 1,
      user_id: 1,
      name: "Test Project 1"
    }),
    createMockProject({
      id: 2,
      user_id: 1,
      name: "Test Project 2"
    })
  ];

  const mockCompetitors = [
    createMockCompetitor({
      id: 1,
      project_id: 1,
      username: "competitor1",
      instagram_url: "https://instagram.com/competitor1"
    }),
    createMockCompetitor({
      id: 2,
      project_id: 1,
      username: "competitor2",
      instagram_url: "https://instagram.com/competitor2"
    })
  ];

  const mockHashtags = [
    createMockHashtag({
      id: 1,
      project_id: 1,
      hashtag: "test1"
    }),
    createMockHashtag({
      id: 2,
      project_id: 1,
      hashtag: "test2"
    })
  ];

  // –°–æ–∑–¥–∞–µ–º –±–æ—Ç –∏ –º–æ–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ Telegram API
  const bot = new Telegraf<ScraperBotContext>("test-bot-token");

  // –°–æ–∑–¥–∞–µ–º –º–æ–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ Telegram API
  const mockGetMe = jest.fn().mockResolvedValue(TEST_BOT_INFO);
  const mockSceneEnter = jest.fn();
  const mockSceneLeave = jest.fn();
  const mockSceneReenter = jest.fn();
  const mockSendMessage = jest.fn().mockResolvedValue({
    message_id: 100,
    from: TEST_BOT_INFO,
    chat: {
      id: CHAT_ID_FOR_TESTING,
      type: 'private',
      first_name: 'Test',
      username: 'testuser'
    },
    date: Math.floor(Date.now() / 1000),
    text: 'Mocked response'
  });
  const mockEditMessageText = jest.fn().mockResolvedValue({
    message_id: 100,
    from: TEST_BOT_INFO,
    chat: {
      id: CHAT_ID_FOR_TESTING,
      type: 'private',
      first_name: 'Test',
      username: 'testuser'
    },
    date: Math.floor(Date.now() / 1000),
    text: 'Mocked edited message'
  });
  const mockAnswerCbQuery = jest.fn().mockResolvedValue(true);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç
  bot.telegram.getMe = mockGetMe;
  bot.telegram.sendMessage = mockSendMessage;
  bot.telegram.editMessageText = mockEditMessageText;
  bot.telegram.answerCbQuery = mockAnswerCbQuery;

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ—Ç–∞ - –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –ø—Ä–∏—Å–≤–æ–∏—Ç—å bot.context,
  // –ø–æ—ç—Ç–æ–º—É –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å middleware

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
  bot.command('start', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockSendMessage –≤–º–µ—Å—Ç–æ ctx.reply
    await mockSendMessage(
      CHAT_ID_FOR_TESTING,
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Instagram Scraper Bot! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ Instagram.',
      {
        reply_markup: {
          keyboard: [
            [{ text: '–ü—Ä–æ–µ–∫—Ç—ã üìÅ' }]
          ],
          resize_keyboard: true
        }
      }
    );
  });

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /projects
  bot.command('projects', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockSceneEnter
    mockSceneEnter("instagram_scraper_projects");
  });

  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /competitors
  bot.command('competitors', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockSceneEnter
    mockSceneEnter("instagram_scraper_competitors");
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query —Å –¥–∞–Ω–Ω—ã–º–∏ project_1
  bot.action('project_1', async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mockStorage.getProjectById
    (mockStorage.getProjectById as jest.Mock).mockResolvedValueOnce(mockProjects[0]);

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockAnswerCbQuery
    await mockAnswerCbQuery("123456");

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockSendMessage —Å –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
    await mockSendMessage(
      CHAT_ID_FOR_TESTING,
      `–ü—Ä–æ–µ–∫—Ç: ${mockProjects[0].name}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã üë•', callback_data: `competitors_${mockProjects[0].id}` }],
            [{ text: '–•–µ—à—Ç–µ–≥–∏ #Ô∏è‚É£', callback_data: `hashtags_${mockProjects[0].id}` }],
            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_projects' }]
          ]
        }
      }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query —Å –¥–∞–Ω–Ω—ã–º–∏ create_project
  bot.action('create_project', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockAnswerCbQuery
    await mockAnswerCbQuery("123457");

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockSendMessage —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    await mockSendMessage(
      CHAT_ID_FOR_TESTING,
      "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_create_project' }]
          ]
        }
      }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query —Å –¥–∞–Ω–Ω—ã–º–∏ add_competitor_1
  bot.action('add_competitor_1', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockAnswerCbQuery
    await mockAnswerCbQuery("123458");

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockSendMessage —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    await mockSendMessage(
      CHAT_ID_FOR_TESTING,
      "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (–±–µ–∑ @):",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_add_competitor' }]
          ]
        }
      }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query —Å –¥–∞–Ω–Ω—ã–º–∏ delete_competitor_1_competitor1
  bot.action('delete_competitor_1_competitor1', async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mockStorage.deleteCompetitorAccount
    (mockStorage.deleteCompetitorAccount as jest.Mock).mockResolvedValueOnce(true);

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockAnswerCbQuery
    await mockAnswerCbQuery("123459");

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockSendMessage —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
    await mockSendMessage(
      CHAT_ID_FOR_TESTING,
      "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç competitor1 —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤', callback_data: 'back_to_competitors_1' }]
          ]
        }
      }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–∞–º–∏

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query —Å –¥–∞–Ω–Ω—ã–º–∏ hashtags_1
  bot.action('hashtags_1', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockSceneEnter
    mockSceneEnter("instagram_scraper_hashtags");

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockAnswerCbQuery
    await mockAnswerCbQuery("123460");
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query —Å –¥–∞–Ω–Ω—ã–º–∏ add_hashtag_1
  bot.action('add_hashtag_1', async () => {
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockAnswerCbQuery
    await mockAnswerCbQuery("123462");

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockSendMessage —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ö–µ—à—Ç–µ–≥–∞
    await mockSendMessage(
      CHAT_ID_FOR_TESTING,
      "–í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥ (–±–µ–∑ #):",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–û—Ç–º–µ–Ω–∞', callback_data: 'cancel_add_hashtag' }]
          ]
        }
      }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query —Å –¥–∞–Ω–Ω—ã–º–∏ remove_hashtag_1_test1
  bot.action('remove_hashtag_1_test1', async () => {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mockStorage.removeHashtag
    (mockStorage.removeHashtag as jest.Mock).mockResolvedValueOnce(true);

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockAnswerCbQuery
    await mockAnswerCbQuery("123463");

    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é mockSendMessage —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
    await mockSendMessage(
      CHAT_ID_FOR_TESTING,
      "–•–µ—à—Ç–µ–≥ #test1 —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Ö–µ—à—Ç–µ–≥–æ–≤', callback_data: 'back_to_hashtags_1' }]
          ]
        }
      }
    );
  });

  // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  const mockStorage = createMockStorageAdapter();

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∫–æ–≤ –∞–¥–∞–ø—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  (mockStorage.initialize as jest.Mock).mockResolvedValue(undefined);
  (mockStorage.close as jest.Mock).mockResolvedValue(undefined);
  (mockStorage.findUserByTelegramIdOrCreate as jest.Mock).mockResolvedValue(mockUser);
  (mockStorage.getUserByTelegramId as jest.Mock).mockResolvedValue(mockUser);
  (mockStorage.getProjectsByUserId as jest.Mock).mockResolvedValue(mockProjects);
  (mockStorage.getProjectById as jest.Mock).mockResolvedValue(mockProjects[0]);
  (mockStorage.createProject as jest.Mock).mockImplementation((userId, name) => {
    const newProject = createMockProject({
      id: mockProjects.length + 1,
      user_id: userId,
      name
    });
    return Promise.resolve(newProject);
  });
  (mockStorage.getCompetitorAccounts as jest.Mock).mockResolvedValue(mockCompetitors);
  (mockStorage.addCompetitorAccount as jest.Mock).mockImplementation((projectId, username, instagramUrl) => {
    const newCompetitor = createMockCompetitor({
      id: mockCompetitors.length + 1,
      project_id: projectId,
      username,
      instagram_url: instagramUrl
    });
    return Promise.resolve(newCompetitor);
  });
  (mockStorage.deleteCompetitorAccount as jest.Mock).mockResolvedValue(true);
  (mockStorage.getHashtagsByProjectId as jest.Mock).mockResolvedValue(mockHashtags);
  (mockStorage.addHashtag as jest.Mock).mockImplementation((projectId, hashtag) => {
    const newHashtag = createMockHashtag({
      id: mockHashtags.length + 1,
      project_id: projectId,
      hashtag
    });
    return Promise.resolve(newHashtag);
  });
  (mockStorage.removeHashtag as jest.Mock).mockResolvedValue(true);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞ —Å –º–æ–∫-–∞–¥–∞–ø—Ç–µ—Ä–æ–º –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
  setupInstagramScraperBot(bot, mockStorage, TEST_BOT_CONFIG);

  return {
    bot,
    mockStorage,
    mockUser,
    mockProjects,
    mockCompetitors,
    mockHashtags,
    mockGetMe,
    mockSceneEnter,
    mockSceneLeave,
    mockSceneReenter,
    mockSendMessage,
    mockEditMessageText,
    mockAnswerCbQuery
  };
}
