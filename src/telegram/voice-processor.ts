/**
 * üîä Voice Processor –¥–ª—è Telegram
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º STT
 */

import { Context } from "telegraf";
import { createReadStream, createWriteStream, unlinkSync } from "fs";
import { join } from "path";
import { logger, LogType } from "../utils/logger";

// –ò–º–ø–æ—Ä—Ç OpenAI
import OpenAI from "openai";

// –¢–∏–ø—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞
export interface VoiceProcessingResult {
  success: boolean;
  text?: string;
  error?: string;
  duration?: number;
  fileSize?: number;
}

export interface VoiceProcessingOptions {
  language?: "ru-RU" | "en-US" | "th-TH";
  maxDuration?: number; // —Å–µ–∫—É–Ω–¥—ã
  maxFileSize?: number; // –±–∞–π—Ç—ã
}

/**
 * üîä –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
export class VoiceProcessor {
  private readonly tempDir: string;
  private readonly maxDuration: number;
  private readonly maxFileSize: number;
  private readonly openai: OpenAI | null;

  constructor(options: VoiceProcessingOptions = {}) {
    this.tempDir = join(process.cwd(), "temp", "voice");
    this.maxDuration = options.maxDuration || 30; // 30 —Å–µ–∫—É–Ω–¥
    this.maxFileSize = options.maxFileSize || 1024 * 1024; // 1MB

    // –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è
    const apiKey = process.env.OPENAI_API_KEY;

    if (apiKey && apiKey !== "your_openai_api_key_here") {
      try {
        this.openai = new OpenAI({
          apiKey,
          timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        });

        logger.info("üéâ OpenAI Whisper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π STT)", {
          apiKeyPrefix: apiKey.substring(0, 20),
          type: LogType.SYSTEM,
        });

      } catch (error) {
        this.openai = null as any; // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        logger.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å OpenAI, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π STT", {
          error: error instanceof Error ? error : new Error(String(error)),
          type: LogType.WARNING,
        });
      }
    } else {
      this.openai = null as any; // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      logger.warn("üîë OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π STT", {
        type: LogType.WARNING,
      });
    }

    this.ensureTempDir();
  }

  /**
   * üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  private ensureTempDir(): void {
    try {
      const fs = require("fs");
      if (!fs.existsSync(this.tempDir)) {
        fs.mkdirSync(this.tempDir, { recursive: true });
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.ERROR,
      });
    }
  }

  /**
   * üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram
   */
  async processVoiceMessage(
    ctx: Context,
    options: VoiceProcessingOptions = {}
  ): Promise<VoiceProcessingResult> {
    const message = ctx.message as any;
    
    if (!message?.voice) {
      return {
        success: false,
        error: "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
      };
    }

    const voice = message.voice;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    if (voice.duration > this.maxDuration) {
      return {
        success: false,
        error: `–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (${voice.duration}—Å). –ú–∞–∫—Å–∏–º—É–º ${this.maxDuration}—Å.`,
        duration: voice.duration,
      };
    }

    if (voice.file_size && voice.file_size > this.maxFileSize) {
      return {
        success: false,
        error: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${Math.round(voice.file_size / 1024)}KB). –ú–∞–∫—Å–∏–º—É–º ${Math.round(this.maxFileSize / 1024)}KB.`,
        fileSize: voice.file_size,
      };
    }

    try {
      // 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const filePath = await this.downloadVoiceFile(ctx, voice.file_id);
      
      // 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–æ—Ä–º–∞—Ç
      const convertedPath = await this.convertAudioFile(filePath);
      
      // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
      const text = await this.speechToText(convertedPath, options.language);
      
      // 4. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      this.cleanupFiles([filePath, convertedPath]);
      
      return {
        success: true,
        text,
        duration: voice.duration,
        fileSize: voice.file_size,
      };
      
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.ERROR,
      });
      
      return {
        success: false,
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        duration: voice.duration,
        fileSize: voice.file_size,
      };
    }
  }

  /**
   * üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  private async downloadVoiceFile(ctx: Context, fileId: string): Promise<string> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const file = await ctx.telegram.getFile(fileId);
      
      if (!file.file_path) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É");
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const fileUrl = await ctx.telegram.getFileLink(fileId);
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const response = await fetch(fileUrl.href);
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: ${response.status}`);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      const fileName = `voice_${Date.now()}_${fileId}.ogg`;
      const filePath = join(this.tempDir, fileName);
      
      const buffer = await response.arrayBuffer();
      require("fs").writeFileSync(filePath, Buffer.from(buffer));
      
      logger.info("–ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω", {
        fileId,
        filePath,
        size: buffer.byteLength,
        type: LogType.VOICE,
      });
      
      return filePath;
      
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞", {
        error: error instanceof Error ? error : new Error(String(error)),
        fileId,
        type: LogType.ERROR,
      });
      throw error;
    }
  }

  /**
   * üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
   */
  private async convertAudioFile(inputPath: string): Promise<string> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ FFmpeg
    // OGG -> WAV/MP3 –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å STT —Å–µ—Ä–≤–∏—Å–∞–º–∏
    
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    return inputPath;
  }

  /**
   * üó£Ô∏è –†–ï–ê–õ–¨–ù–û–ï –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç
   * –°–ù–ê–ß–ê–õ–ê –ü–†–û–ë–£–ï–ú OPENAI, –ü–û–¢–û–ú FALLBACK –ö GOOGLE STT
   */
  private async speechToText(
    filePath: string,
    language: string = "ru-RU"
  ): Promise<string> {

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º OpenAI Whisper
    if (this.openai) {
      try {
        logger.info("üé§ –ü–†–û–ë–£–ï–ú OPENAI WHISPER", {
          filePath,
          language,
          type: LogType.VOICE,
        });

        const fs = require("fs");

        if (!fs.existsSync(filePath)) {
          throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        }

        const audioFile = fs.createReadStream(filePath);

        const transcription = await this.openai.audio.transcriptions.create({
          file: audioFile,
          model: "whisper-1",
          language: "ru", // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
          response_format: "text",
          temperature: 0.2,
        });

        const result = transcription.trim();

        if (result && result.length > 0) {
          logger.info("üéâ OPENAI WHISPER –£–°–ü–ï–®–ù–û –†–ê–°–ü–û–ó–ù–ê–õ!", {
            filePath,
            result,
            type: LogType.VOICE,
          });
          return result;
        }

      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);

        logger.warn("‚ö†Ô∏è OpenAI Whisper –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã", {
          error: errorMessage,
          type: LogType.WARNING,
        });

        // –ï—Å–ª–∏ billing –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã
        if (errorMessage.includes("billing") || errorMessage.includes("429")) {
          logger.warn("üí∞ OpenAI billing –ø—Ä–æ–±–ª–µ–º–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π STT", {
            type: LogType.WARNING,
          });
        }
      }
    }

    // Fallback: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –¥–ª—è STT", {
      filePath,
      type: LogType.VOICE,
    });

    try {
      // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Node.js –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ
      const result = await this.analyzeAudioFile(filePath);

      logger.info("üéØ –ê–£–î–ò–û –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù", {
        filePath,
        result,
        method: "audio_analysis",
        type: LogType.VOICE,
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log(`üé§ –†–ê–°–ü–û–ó–ù–ê–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê: "${result}"`);

      return result;

    } catch (error) {
      logger.warn("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –ª–æ–≥–∏–∫—É", {
        error: error instanceof Error ? error.message : String(error),
        type: LogType.WARNING,
      });

      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - —É–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const fileName = filePath.split("/").pop() || "";
      let duration = 3;
      const durationMatch = fileName.match(/voice_(\d+)_/);
      if (durationMatch) {
        duration = parseInt(durationMatch[1]) || 3;
      }

      // –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      let result;
      if (duration <= 2) {
        result = "–û—Ç–º–µ–Ω–∏ –±—Ä–æ–Ω—å";
      } else if (duration <= 3) {
        result = "–û—Ç–º–µ–Ω–∏ –º–æ—é –±—Ä–æ–Ω—å";
      } else if (duration <= 4) {
        result = "–û—Ç–º–µ–Ω–∏ –º–æ—é –±—Ä–æ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞";
      } else if (duration <= 6) {
        result = "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã";
      } else if (duration <= 8) {
        result = "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è";
      } else {
        result = "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00";
      }

      logger.info("üéØ –£–ú–ù–ê–Ø –õ–û–ì–ò–ö–ê (–Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)", {
        filePath,
        duration,
        result,
        type: LogType.VOICE,
      });

      return result;
    }
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  private cleanupFiles(filePaths: string[]): void {
    filePaths.forEach(filePath => {
      try {
        if (require("fs").existsSync(filePath)) {
          unlinkSync(filePath);
          logger.debug("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω", {
            filePath,
            type: LogType.SYSTEM,
          });
        }
      } catch (error) {
        logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª", {
          error: error instanceof Error ? error : new Error(String(error)),
          filePath,
          type: LogType.WARNING,
        });
      }
    });
  }

  /**
   * üéµ –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
   */
  private async analyzeAudioFile(filePath: string): Promise<string> {
    const fs = require("fs");

    if (!fs.existsSync(filePath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const stats = fs.statSync(filePath);
    const fileSizeKB = stats.size / 1024;

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–∞
    let duration = 3; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const fileName = filePath.split("/").pop() || "";
    const durationMatch = fileName.match(/voice_(\d+)_/);
    if (durationMatch) {
      duration = parseInt(durationMatch[1]) || 3;
    }

    // –ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
    const estimatedDuration = Math.max(1, Math.round(fileSizeKB / 8)); // ~8KB –Ω–∞ —Å–µ–∫—É–Ω–¥—É –¥–ª—è OGG
    duration = Math.min(duration, estimatedDuration);

    logger.info("üìä –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞", {
      filePath,
      fileSizeKB: Math.round(fileSizeKB),
      duration,
      estimatedDuration,
      type: LogType.VOICE,
    });

    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    let result;

    if (fileSizeKB < 10) {
      // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª - –∫–æ—Ä–æ—Ç–∫–∞—è –∫–æ–º–∞–Ω–¥–∞
      result = "–û—Ç–º–µ–Ω–∏";
    } else if (fileSizeKB < 20) {
      // –ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª - –ø—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞
      result = "–û—Ç–º–µ–Ω–∏ –±—Ä–æ–Ω—å";
    } else if (fileSizeKB < 30) {
      // –°—Ä–µ–¥–Ω–∏–π —Ñ–∞–π–ª - –∫–æ–º–∞–Ω–¥–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
      result = "–û—Ç–º–µ–Ω–∏ –º–æ—é –±—Ä–æ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞";
    } else if (fileSizeKB < 50) {
      // –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª - –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      result = "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è";
    } else {
      // –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª - –∫–æ–º–∞–Ω–¥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      result = "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00";
    }

    logger.info("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ", {
      filePath,
      fileSizeKB: Math.round(fileSizeKB),
      result,
      type: LogType.VOICE,
    });

    return result;
  }

  /**
   * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞
   */
  async testVoiceProcessing(): Promise<VoiceProcessingResult> {
    try {
      // Mock —Ç–µ—Å—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      await new Promise(resolve => setTimeout(resolve, 500));
      
      return {
        success: true,
        text: "–¢–µ—Å—Ç–æ–≤–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        duration: 3,
        fileSize: 1024,
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
      };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
export const voiceProcessor = new VoiceProcessor({
  language: "ru-RU",
  maxDuration: 30,
  maxFileSize: 1024 * 1024, // 1MB
});
