/**
 * üé§ Telegram Voice Handler
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram-–±–æ—Ç–µ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Voice Framework
 */

import { Context } from "telegraf";
import { Message } from "telegraf/typings/core/types/typegram";
import { logger, LogType } from "../utils/logger";
import { VoiceBookingService } from "../services/booking-service";
import { parseVoiceCommand, textToVoice } from "../services/voice-ai";
import { voiceProcessor } from "./voice-processor";

// –¢–∏–ø—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
interface VoiceMessage extends Message.VoiceMessage {
  voice: {
    file_id: string;
    file_unique_id: string;
    duration: number;
    mime_type?: string;
    file_size?: number;
  };
}

interface TelegramVoiceContext extends Context {
  message: VoiceMessage;
  session?: {
    user?: {
      id: string;
      first_name?: string;
    };
  };
}

/**
 * üé§ –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
 */
export class TelegramVoiceHandler {
  private bookingService: VoiceBookingService | null = null;

  constructor() {
    this.initializeBookingService();
  }

  /**
   * üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BookingService
   */
  private async initializeBookingService() {
    try {
      const { VoiceBookingService } = await import("../services/booking-service");
      const { BookingRepository } = await import("../repositories/booking-repository");
      const { CourtRepository } = await import("../repositories/court-repository");
      const { UserRepository } = await import("../repositories/user-repository");
      const { db } = await import("../db");

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
      const bookingRepo = new BookingRepository(db);
      const courtRepo = new CourtRepository(db);
      const userRepo = new UserRepository(db);

      // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
      this.bookingService = new VoiceBookingService(
        bookingRepo,
        courtRepo,
        userRepo,
        {
          defaultDuration: 90, // 1.5 —á–∞—Å–∞
          defaultCurrency: "THB",
          defaultPurpose: "free_play",
          pricePerHour: 1500, // 1500 THB –∑–∞ —á–∞—Å
        }
      );

      logger.info("VoiceBookingService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Telegram", {
        type: LogType.SYSTEM,
      });
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VoiceBookingService", {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.ERROR,
      });
    }
  }

  /**
   * üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async handleVoiceMessage(ctx: TelegramVoiceContext): Promise<void> {
    try {
      const userId = ctx.from?.id?.toString() || "unknown";
      const sessionId = `telegram-${userId}-${Date.now()}`;

      logger.info("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", {
        userId,
        duration: ctx.message.voice.duration,
        type: LogType.VOICE,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await ctx.reply("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...");

      // 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ VoiceProcessor
      const voiceResult = await voiceProcessor.processVoiceMessage(ctx, {
        language: "ru-RU",
      });

      if (!voiceResult.success || !voiceResult.text) {
        await ctx.reply(`‚ùå ${voiceResult.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}`);
        return;
      }

      const voiceText = voiceResult.text;

      logger.info("–ì–æ–ª–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω", {
        userId,
        text: voiceText,
        type: LogType.VOICE,
      });

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log(`üé§ –†–ê–°–ü–û–ó–ù–ê–ù–ù–´–ô –¢–ï–ö–°–¢: "${voiceText}"`);
      console.log(`üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: ${userId}`);

      // 2. –ü–∞—Ä—Å–∏–º –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
      const command = await parseVoiceCommand(voiceText);
      
      if (!command) {
        await ctx.reply(
          `‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—É: "${voiceText}"\n\n` +
          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å:\n" +
          "‚Ä¢ –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00\n" +
          "‚Ä¢ –ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã\n" +
          "‚Ä¢ –û—Ç–º–µ–Ω–∏ –º–æ—é –±—Ä–æ–Ω—å"
        );
        return;
      }

      // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ BookingService
      const result = await this.processVoiceCommand(command, userId, voiceText);

      // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.sendResponse(ctx, result, voiceText);

    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", {
        error: error instanceof Error ? error : new Error(String(error)),
        userId: ctx.from?.id?.toString(),
        type: LogType.ERROR,
      });

      await ctx.reply(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  }



  /**
   * üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
   */
  private async processVoiceCommand(
    command: any,
    userId: string,
    originalText: string
  ): Promise<any> {
    if (!this.bookingService) {
      // Fallback –∫ mock —Å–µ—Ä–≤–∏—Å—É
      const { processVoiceBooking } = await import("../services/voice-ai");
      return await processVoiceBooking(command, userId);
    }

    return await this.bookingService.processVoiceBooking(command, userId);
  }

  /**
   * üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  private async sendResponse(
    ctx: TelegramVoiceContext,
    result: any,
    originalText: string
  ): Promise<void> {
    try {
      let responseText = "";

      if (result.success) {
        responseText = `‚úÖ ${result.message}`;

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if (result.bookingId) {
          responseText += `\n\nüìã ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${result.bookingId}`;
        }

        if (result.nextSteps && result.nextSteps.length > 0) {
          responseText += "\n\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:";
          result.nextSteps.forEach((step: string, index: number) => {
            responseText += `\n${index + 1}. ${step}`;
          });
        }

        if (result.availableSlots && result.availableSlots.length > 0) {
          responseText += "\n\nüèì –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:";
          result.availableSlots.forEach((slot: any) => {
            responseText += `\n‚Ä¢ ${slot.time} - ${slot.court} (${slot.price} THB)`;
          });
        }
      } else {
        responseText = `‚ùå ${result.message}`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
      responseText += `\n\nüé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: "${originalText}"`;

      await ctx.reply(responseText);

      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      logger.info("–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", {
        userId: ctx.from?.id?.toString(),
        command: result.command || "unknown",
        success: result.success,
        originalText,
        type: LogType.VOICE,
      });

    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞", {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.ERROR,
      });

      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞");
    }
  }

  /**
   * üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
   */
  async handleTestCommand(ctx: Context): Promise<void> {
    try {
      const userId = ctx.from?.id?.toString() || "test-user";

      await ctx.reply("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫...");

      // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º VoiceProcessor
      const voiceTest = await voiceProcessor.testVoiceProcessing();

      // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
      const testText = voiceTest.text || "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00";
      const command = await parseVoiceCommand(testText);

      if (!command) {
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã");
        return;
      }

      // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const result = await this.processVoiceCommand(command, userId, testText);

      let responseText = "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n";
      responseText += `üîä VoiceProcessor: ${voiceTest.success ? "‚úÖ" : "‚ùå"}\n`;
      responseText += `üìù –ö–æ–º–∞–Ω–¥–∞: ${testText}\n`;
      responseText += `üß† –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${command.command}\n`;
      responseText += `üèì BookingService: ${this.bookingService ? "‚úÖ –†–µ–∞–ª—å–Ω—ã–π" : "‚ö†Ô∏è Mock"}\n`;
      responseText += `‚úÖ –°—Ç–∞—Ç—É—Å: ${result.success ? "–£—Å–ø–µ—à–Ω–æ" : "–û—à–∏–±–∫–∞"}\n`;
      responseText += `üí¨ –û—Ç–≤–µ—Ç: ${result.message}`;

      await ctx.reply(responseText);

    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", {
        error: error instanceof Error ? error : new Error(String(error)),
        type: LogType.ERROR,
      });

      await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏");
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
export const voiceHandler = new TelegramVoiceHandler();
