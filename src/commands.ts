import { Telegraf } from "telegraf";
import { CustomContext } from "./bot"; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å
import { logger, LogType } from "./utils/logger"; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å
import { voiceHandler } from "./telegram/voice-handler";

export const setupCommands = (bot: Telegraf<CustomContext>): void => {
  // üé§ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
  bot.command("voice_test", async (ctx) => {
    logger.info("/voice_test command executed", {
      type: LogType.COMMAND,
      userId: ctx.from?.id,
    });

    await voiceHandler.handleTestCommand(ctx);
  });

  // üé§ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
  bot.command("voice_help", async (ctx) => {
    logger.info("/voice_help command executed", {
      type: LogType.COMMAND,
      userId: ctx.from?.id,
    });

    const helpText = `üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞–¥–ª-—Ü–µ–Ω—Ç—Ä–∞

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/voice_test - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
/voice_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥:

üèì –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:
‚Ä¢ "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00"
‚Ä¢ "Book a court for tomorrow at 2 PM"

üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:
‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã"
‚Ä¢ "Show available courts"

‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
‚Ä¢ "–û—Ç–º–µ–Ω–∏ –º–æ—é –±—Ä–æ–Ω—å"
‚Ä¢ "Cancel my booking"

üí° –°–æ–≤–µ—Ç: –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.`;

    await ctx.reply(helpText);
  });

  // üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on("voice", async (ctx) => {
    logger.info("Voice message received", {
      type: LogType.VOICE,
      userId: ctx.from?.id,
      duration: ctx.message.voice.duration,
    });

    await voiceHandler.handleVoiceMessage(ctx as any);
  });

  // üìã –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
  bot.command("status", async (ctx) => {
    logger.info("/status command executed", {
      type: LogType.COMMAND,
      userId: ctx.from?.id,
    });

    const statusText = `üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ø–∞–¥–ª-—Ü–µ–Ω—Ç—Ä–∞

üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üèì Booking API: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω
ü§ñ MCP Server: ‚úÖ –ì–æ—Ç–æ–≤
üì± Telegram Bot: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

üîß –í–µ—Ä—Å–∏—è: Voice Framework v1.0.0
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU", { timeZone: "Asia/Bangkok" })}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /voice_help –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.`;

    await ctx.reply(statusText);
  });

  // üéØ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
  bot.command("voice_mock", async (ctx) => {
    const keyboard = {
      inline_keyboard: [
        [
          { text: "üèì –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ç", callback_data: "mock_book" },
          { text: "üîç –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ç—ã", callback_data: "mock_show" },
        ],
        [
          { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data: "mock_cancel" },
          { text: "üìÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", callback_data: "mock_check" },
        ],
      ],
    };

    await ctx.reply(
      "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\nüí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞",
      { reply_markup: keyboard }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è mock –∫–æ–º–∞–Ω–¥
  bot.on("callback_query", async (ctx) => {
    const data = ctx.callbackQuery.data;

    if (data?.startsWith("mock_")) {
      const mockCommands = {
        mock_book: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        mock_show: "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        mock_cancel: "–û—Ç–º–µ–Ω–∏ –º–æ—é –±—Ä–æ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
        mock_check: "–ü—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ—Ä—Ç–æ–≤",
      };

      const command = mockCommands[data as keyof typeof mockCommands];

      if (command) {
        await ctx.answerCbQuery();
        await ctx.reply(`üé§ –¢–µ—Å—Ç–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É: "${command}"`);

        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ VoiceHandler
        try {
          const testVoiceMessage = {
            duration: 4,
            file_id: `mock_${data}`,
            file_unique_id: `mock_unique_${data}`,
            file_size: 2048,
          };

          const response = await voiceHandler.handleVoiceMessage(
            testVoiceMessage,
            ctx.from?.id?.toString() || "test_user",
            command // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
          );

          await ctx.reply(response, { parse_mode: "HTML" });
        } catch (error) {
          await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã");
        }
      }
    }
  });

  // üéØ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è mock —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
  bot.command("voice_mock", async (ctx) => {
    const keyboard = {
      inline_keyboard: [
        [
          { text: "üèì –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ç", callback_data: "mock_book" },
          { text: "üîç –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä—Ç—ã", callback_data: "mock_show" },
        ],
        [
          { text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å", callback_data: "mock_cancel" },
          { text: "üìÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", callback_data: "mock_check" },
        ],
      ],
    };

    await ctx.reply(
      "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞:\n\nüí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ STT –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º —Å OpenAI –±–∏–ª–ª–∏–Ω–≥–æ–º",
      { reply_markup: keyboard }
    );
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è mock –∫–æ–º–∞–Ω–¥
  bot.on("callback_query", async (ctx) => {
    const data = ctx.callbackQuery.data;

    if (data?.startsWith("mock_")) {
      const mockCommands = {
        mock_book: "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00",
        mock_show: "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
        mock_cancel: "–û—Ç–º–µ–Ω–∏ –º–æ—é –±—Ä–æ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
        mock_check: "–ü—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ—Ä—Ç–æ–≤",
      };

      const command = mockCommands[data as keyof typeof mockCommands];

      if (command) {
        await ctx.answerCbQuery();
        await ctx.reply(`üé§ –°–∏–º—É–ª–∏—Ä—É—é –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É: "${command}"`);

        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        try {
          const testVoiceMessage = {
            duration: 4,
            file_id: `mock_${data}`,
            file_unique_id: `mock_unique_${data}`,
            file_size: 2048,
          };

          const response = await voiceHandler.handleVoiceMessage(
            testVoiceMessage,
            ctx.from?.id?.toString() || "test_user",
            command // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è mock
          );

          await ctx.reply(response, { parse_mode: "HTML" });
        } catch (error) {
          await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ mock –∫–æ–º–∞–Ω–¥—ã");
        }
      }
    }
  });

  // –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ bot.ts, –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å —Å–≤–æ–π)
  // bot.start(async (ctx) => {
  //   logger.info('/start command handled by commands.ts', { type: LogType.COMMAND, userId: ctx.from?.id });
  //   const userFirstName =
  //     ctx.session?.user?.first_name || ctx.from?.first_name || "–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü";
  //   await ctx.reply(
  //     `–ü—Ä–∏–≤–µ—Ç –∏–∑ commands.ts, ${userFirstName}! –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.`
  //   );
  // });

  // –ü—Ä–∏–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /help (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ bot.ts)
  // _bot.help(async (ctx) => {
  //   logger.info('/help command handled by commands.ts', { type: LogType.COMMAND, userId: ctx.from?.id });
  //   const helpMessage =
  //     "–ö–æ–º–∞–Ω–¥—ã –∏–∑ commands.ts:\n" +
  //     "/start - –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n" +
  //     "/help - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ";
  //   await ctx.reply(helpMessage);
  // });

  // –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
  // _bot.command('mycommand', (ctx) => {
  //   logger.info('/mycommand handled', { type: LogType.COMMAND, userId: ctx.from?.id });
  //   ctx.reply('–í—ã –≤—ã–∑–≤–∞–ª–∏ –º–æ—é –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É!');
  // });

  logger.info(
    "setupCommands function called (currently a stub or with examples). Actual commands might be in bot.ts or added here.",
    {
      type: LogType.SYSTEM,
    }
  );
};
