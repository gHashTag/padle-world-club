/**
 * Telegram Bot for Database Interaction
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞–º –æ–±—â–∞—Ç—å—Å—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
 */

import { Telegraf, Context } from "telegraf";
import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
import * as schema from "../db/schema";
import { AITextToSQLService } from "./services/ai-text-to-sql.service";
import { DatabaseContextService } from "./services/database-context.service";

// –¢–∏–ø—ã
interface BotContext extends Context {
  user?: {
    id: number;
    username?: string;
    isAdmin: boolean;
  };
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const DATABASE_URL = process.env.DATABASE_URL;
const ADMIN_USER_IDS = process.env.ADMIN_USER_IDS?.split(',').map(id => parseInt(id)) || [];

if (!BOT_TOKEN) {
  throw new Error("BOT_TOKEN environment variable is required");
}

if (!DATABASE_URL) {
  throw new Error("DATABASE_URL environment variable is required");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const bot = new Telegraf<BotContext>(BOT_TOKEN);
const client = postgres(DATABASE_URL);
const db = drizzle(client, { schema });

// –°–µ—Ä–≤–∏—Å—ã
const aiTextToSQLService = new AITextToSQLService(db);
const databaseContextService = new DatabaseContextService(db);

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
bot.use(async (ctx, next) => {
  const userId = ctx.from?.id;
  const username = ctx.from?.username;

  if (!userId) {
    return;
  }

  ctx.user = {
    id: userId,
    username,
    isAdmin: ADMIN_USER_IDS.includes(userId)
  };

  if (!ctx.user.isAdmin) {
    await ctx.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
    return;
  }

  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  const welcomeMessage = `
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Database Chat Bot!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö Padle World Club –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
/schema - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/examples - –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞?"
‚Ä¢ "–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"
‚Ä¢ "–ö–∞–∫–∏–µ –∫–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã —Å–µ–≥–æ–¥–Ω—è?"

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –≤ SQL –∑–∞–ø—Ä–æ—Å!
  `;

  await ctx.reply(welcomeMessage, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.help(async (ctx) => {
  const helpMessage = `
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ Database Chat Bot**

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤ SQL
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
/schema - —Å—Ö–µ–º–∞ –ë–î
/examples - –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç

**–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**
‚Ä¢ –¢–æ–ª—å–∫–æ SELECT –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 100 –∑–∞–ø–∏—Å–µ–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–π
‚Ä¢ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã:**
‚Ä¢ users - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
‚Ä¢ venues - –ø–ª–æ—â–∞–¥–∫–∏
‚Ä¢ courts - –∫–æ—Ä—Ç—ã
‚Ä¢ bookings - –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ game_sessions - –∏–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
‚Ä¢ tournaments - —Ç—É—Ä–Ω–∏—Ä—ã
‚Ä¢ payments - –ø–ª–∞—Ç–µ–∂–∏
‚Ä¢ –∏ –¥—Ä—É–≥–∏–µ...
  `;

  await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
});

// –ö–æ–º–∞–Ω–¥–∞ /stats
bot.command('stats', async (ctx) => {
  try {
    const stats = await databaseContextService.getDatabaseStats();

    const statsMessage = `
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** ${stats.users.total}
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.users.verified}
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${stats.users.averageRating}

üè¢ **–ü–ª–æ—â–∞–¥–∫–∏:** ${stats.venues.total}
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.venues.active}

üéæ **–ö–æ—Ä—Ç—ã:** ${stats.courts.total}
   ‚Ä¢ –ö—Ä—ã—Ç—ã—Ö: ${stats.courts.indoor}
   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: ${stats.courts.outdoor}

üìÖ **–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:** ${stats.bookings.total}
   ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö: ${stats.bookings.confirmed}
   ‚Ä¢ –ù–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.bookings.today}

üéÆ **–ò–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏:** ${stats.gameSessions.total}
   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats.gameSessions.completed}

üèÜ **–¢—É—Ä–Ω–∏—Ä—ã:** ${stats.tournaments.total}
   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${stats.tournaments.active}

üí∞ **–ü–ª–∞—Ç–µ–∂–∏:** ${stats.payments.total}
   ‚Ä¢ –°—É–º–º–∞: ${stats.payments.totalAmount} ‚ÇΩ
    `;

    await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error getting stats:', error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /schema
bot.command('schema', async (ctx) => {
  try {
    const schemaInfo = await databaseContextService.getSchemaInfo();

    let schemaMessage = "üóÑÔ∏è **–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö**\n\n";

    for (const table of schemaInfo) {
      schemaMessage += `**${table.name}** (${table.recordCount} –∑–∞–ø–∏—Å–µ–π)\n`;
      schemaMessage += `${table.description}\n`;
      schemaMessage += `–ü–æ–ª—è: ${table.columns.slice(0, 5).join(', ')}`;
      if (table.columns.length > 5) {
        schemaMessage += ` –∏ –µ—â–µ ${table.columns.length - 5}...`;
      }
      schemaMessage += "\n\n";
    }

    await ctx.reply(schemaMessage, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Error getting schema:', error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ö–µ–º—ã –ë–î");
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /examples
bot.command('examples', async (ctx) => {
  const examplesMessage = `
üí° **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ "–ü–æ–∫–∞–∂–∏ —Ç–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é?"
‚Ä¢ "–ù–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email admin@example.com"

**–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**
‚Ä¢ "–ö–∞–∫–∏–µ –∫–æ—Ä—Ç—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü?"

**–ò–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏:**
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–≥—Ä"
‚Ä¢ "–ö—Ç–æ –∏–≥—Ä–∞–ª –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–≥—Ä?"
‚Ä¢ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∏–≥—Ä"

**–¢—É—Ä–Ω–∏—Ä—ã:**
‚Ä¢ "–ö–∞–∫–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–µ–π—á–∞—Å?"
‚Ä¢ "–ü–æ–∫–∞–∂–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ X"
‚Ä¢ "–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤"

**–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**
‚Ä¢ "–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ—Ä—Ç—ã"
‚Ä¢ "–î–æ—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º"
‚Ä¢ "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º!
  `;

  await ctx.reply(examplesMessage, { parse_mode: 'Markdown' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const userMessage = ctx.message.text;

  if (!userMessage || userMessage.startsWith('/')) {
    return;
  }

  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await ctx.sendChatAction('typing');

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ SQL —Å –ø–æ–º–æ—â—å—é AI
    const sqlResult = await aiTextToSQLService.convertToSQL(userMessage);

    if (!sqlResult.success) {
      await ctx.reply(`‚ùå **–û—à–∏–±–∫–∞:** ${sqlResult.error}`, { parse_mode: 'Markdown' });
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI –≤ –∑–∞–ø—Ä–æ—Å–µ
    if (sqlResult.confidence && sqlResult.confidence < 0.7) {
      await ctx.reply(`‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–∏–∑–∫–∞—è (${Math.round(sqlResult.confidence * 100)}%). –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º.`, { parse_mode: 'Markdown' });
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const queryResult = await aiTextToSQLService.executeQuery(sqlResult.sql!);

    if (!queryResult.success) {
      await ctx.reply(`‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ${queryResult.error}`, { parse_mode: 'Markdown' });
      return;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–º–æ—â—å—é AI
    const formattedResult = await aiTextToSQLService.formatResultWithAI(
      userMessage,
      sqlResult.sql!,
      queryResult.data!
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    let performanceInfo = '';
    if (queryResult.executionTime) {
      performanceInfo = `\n\n‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** ${queryResult.executionTime}ms`;
    }
    if (sqlResult.confidence) {
      performanceInfo += `\nüéØ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI:** ${Math.round(sqlResult.confidence * 100)}%`;
    }

    await ctx.reply(formattedResult + performanceInfo, { parse_mode: 'Markdown' });

  } catch (error) {
    console.error('Error processing message:', error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('Bot error:', err);
  ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
export async function startBot() {
  console.log("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...");

  try {
    await bot.launch();
    console.log("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

    // Graceful shutdown
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startBot().catch(console.error);
}
