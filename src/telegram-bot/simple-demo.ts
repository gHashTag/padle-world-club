/**
 * –ü—Ä–æ—Å—Ç–æ–µ –¥–µ–º–æ –±–µ–∑ AI - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã
 */

// import { drizzle } from "drizzle-orm/postgres-js";
import postgres from "postgres";
// import * as schema from "../db/schema";

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ URL —á—Ç–æ –∏ –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
const DATABASE_URL = process.env.DATABASE_URL || "postgresql://neondb_owner:npg_z6BWURv1GHbu@ep-dry-base-a1uf8xwo-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require";

async function runSimpleDemo() {
  console.log("üèì –ü—Ä–æ—Å—Ç–æ–µ –¥–µ–º–æ Padle World Club Database");
  console.log("=" .repeat(50));

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
  const client = postgres(DATABASE_URL);
  // const _db = drizzle(client, { schema });

  // –ó–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  const queries = [
    {
      name: "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      sql: "SELECT COUNT(*) as count FROM \"user\"",
    },
    {
      name: "–í—Å–µ–≥–æ –ø–ª–æ—â–∞–¥–æ–∫",
      sql: "SELECT COUNT(*) as count FROM venue",
    },
    {
      name: "–í—Å–µ–≥–æ –∫–æ—Ä—Ç–æ–≤",
      sql: "SELECT COUNT(*) as count FROM court",
    },
    {
      name: "–¢–æ–ø 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É",
      sql: "SELECT username, current_rating FROM \"user\" ORDER BY current_rating DESC LIMIT 5",
    },
    {
      name: "–ü–ª–æ—â–∞–¥–∫–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º",
      sql: "SELECT city, COUNT(*) as count FROM venue GROUP BY city ORDER BY count DESC",
    },
    {
      name: "–ö–æ—Ä—Ç—ã –ø–æ —Ç–∏–ø–∞–º",
      sql: "SELECT court_type, COUNT(*) as count FROM court GROUP BY court_type",
    },
    {
      name: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π",
      sql: "SELECT status, COUNT(*) as count FROM booking GROUP BY status",
    },
    {
      name: "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–ª–∞—Ç–µ–∂–µ–π",
      sql: "SELECT amount, currency, status, created_at FROM payment ORDER BY created_at DESC LIMIT 5",
    },
    {
      name: "–¢—É—Ä–Ω–∏—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º",
      sql: "SELECT status, COUNT(*) as count FROM tournament GROUP BY status",
    },
    {
      name: "–ò–≥—Ä–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º",
      sql: "SELECT status, COUNT(*) as count FROM game_session GROUP BY status",
    }
  ];

  console.log(`\nüìä –í—ã–ø–æ–ª–Ω—è–µ–º ${queries.length} –∑–∞–ø—Ä–æ—Å–æ–≤...\n`);

  for (let i = 0; i < queries.length; i++) {
    const query = queries[i];
    console.log(`${i + 1}. üìù ${query.name}`);
    console.log("-".repeat(40));

    try {
      const startTime = Date.now();
      const result = await client.unsafe(query.sql);
      const executionTime = Date.now() - startTime;

      console.log(`‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${executionTime}ms`);
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç (${result.length} –∑–∞–ø–∏—Å–µ–π):`);

      if (result.length > 0) {
        result.slice(0, 5).forEach((record, idx) => {
          const fields = Object.entries(record)
            .map(([key, value]) => {
              if (value instanceof Date) {
                return `${key}: ${value.toLocaleDateString()}`;
              }
              return `${key}: ${value}`;
            })
            .join(", ");
          console.log(`   ${idx + 1}. ${fields}`);
        });

        if (result.length > 5) {
          console.log(`   ... –∏ –µ—â–µ ${result.length - 5} –∑–∞–ø–∏—Å–µ–π`);
        }
      } else {
        console.log("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö");
      }

    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
    }

    console.log(); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  }

  console.log("=".repeat(50));
  console.log("üéâ –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  console.log("\nüí° –ß—Ç–æ –¥–∞–ª—å—à–µ:");
  console.log("1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏");
  console.log("2. –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–ø–∏—Å–∏");
  console.log("3. –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å Telegram –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏");
  console.log("4. –î–ª—è AI Text-to-SQL –Ω—É–∂–µ–Ω OpenAI API –∫–ª—é—á");

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  await client.end();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ
if (require.main === module) {
  runSimpleDemo().catch((error) => {
    console.error("üí• –û—à–∏–±–∫–∞ –¥–µ–º–æ:", error);
    process.exit(1);
  });
}
