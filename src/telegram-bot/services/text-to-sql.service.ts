/**
 * Text-to-SQL Service
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –≤ SQL –∑–∞–ø—Ä–æ—Å—ã
 */

import { PostgresJsDatabase } from "drizzle-orm/postgres-js";
import * as schema from "../../db/schema";

export interface SQLResult {
  success: boolean;
  sql?: string;
  error?: string;
  explanation?: string;
}

export interface QueryResult {
  success: boolean;
  data?: any[];
  error?: string;
  rowCount?: number;
}

export class TextToSQLService {
  private db: PostgresJsDatabase<typeof schema>;
  
  // –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ä—É—Å—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
  private readonly translations = {
    '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': 'users',
    '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': 'users', 
    '–∏–≥—Ä–æ–∫–∏': 'users',
    '–∏–≥—Ä–æ–∫': 'users',
    '–ø–ª–æ—â–∞–¥–∫–∏': 'venues',
    '–ø–ª–æ—â–∞–¥–∫–∞': 'venues',
    '–∫–ª—É–±—ã': 'venues',
    '–∫–ª—É–±': 'venues',
    '–∫–æ—Ä—Ç—ã': 'courts',
    '–∫–æ—Ä—Ç': 'courts',
    '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è': 'bookings',
    '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ': 'bookings',
    '–∏–≥—Ä—ã': 'game_sessions',
    '–∏–≥—Ä–∞': 'game_sessions',
    '—Å–µ—Å—Å–∏–∏': 'game_sessions',
    '—Å–µ—Å—Å–∏—è': 'game_sessions',
    '—Ç—É—Ä–Ω–∏—Ä—ã': 'tournaments',
    '—Ç—É—Ä–Ω–∏—Ä': 'tournaments',
    '–ø–ª–∞—Ç–µ–∂–∏': 'payments',
    '–ø–ª–∞—Ç–µ–∂': 'payments',
    '—Ä–µ–π—Ç–∏–Ω–≥': 'current_rating',
    '–∏–º—è': 'first_name',
    '—Ñ–∞–º–∏–ª–∏—è': 'last_name',
    'email': 'email',
    '—Ç–µ–ª–µ—Ñ–æ–Ω': 'phone',
    '—Å—Ç–∞—Ç—É—Å': 'status',
    '—Ü–µ–Ω–∞': 'total_price',
    '—Å—É–º–º–∞': 'amount',
    '–¥–∞—Ç–∞': 'created_at',
    '–≤—Ä–µ–º—è': 'start_time',
    '–Ω–∞–∑–≤–∞–Ω–∏–µ': 'name',
    '–æ–ø–∏—Å–∞–Ω–∏–µ': 'description',
  };

  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
  private readonly patterns = {
    count: /—Å–∫–æ–ª—å–∫–æ|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ|—á–∏—Å–ª–æ/i,
    top: /—Ç–æ–ø|–ª—É—á—à–∏–µ|–ø–µ—Ä–≤—ã–µ \d+/i,
    recent: /–ø–æ—Å–ª–µ–¥–Ω–∏–µ|–Ω–µ–¥–∞–≤–Ω–∏–µ|–Ω–æ–≤—ã–µ/i,
    search: /–Ω–∞–π–¥–∏|–Ω–∞–π—Ç–∏|–ø–æ–∏—Å–∫|–≥–¥–µ/i,
    stats: /—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|–∞–Ω–∞–ª–∏—Ç–∏–∫–∞|–æ—Ç—á–µ—Ç/i,
    today: /—Å–µ–≥–æ–¥–Ω—è|—Å–µ–π—á–∞—Å/i,
    yesterday: /–≤—á–µ—Ä–∞/i,
    week: /–Ω–µ–¥–µ–ª—è|–Ω–µ–¥–µ–ª–∏/i,
    month: /–º–µ—Å—è—Ü|–º–µ—Å—è—Ü–∞/i,
  };

  constructor(db: PostgresJsDatabase<typeof schema>) {
    this.db = db;
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ –≤ SQL –∑–∞–ø—Ä–æ—Å
   */
  async convertToSQL(text: string): Promise<SQLResult> {
    try {
      const normalizedText = this.normalizeText(text);
      const queryType = this.detectQueryType(normalizedText);
      const tables = this.extractTables(normalizedText);
      
      if (tables.length === 0) {
        return {
          success: false,
          error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ä—Ç—ã, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç.–¥."
        };
      }

      const sql = this.buildSQL(queryType, tables, normalizedText);
      
      if (!sql) {
        return {
          success: false,
          error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å SQL –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
        };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
      if (!this.isSafeQuery(sql)) {
        return {
          success: false,
          error: "–ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SELECT –∑–∞–ø—Ä–æ—Å—ã."
        };
      }

      return {
        success: true,
        sql,
        explanation: this.explainQuery(queryType, tables[0])
      };

    } catch (error) {
      return {
        success: false,
        error: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`
      };
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å
   */
  async executeQuery(sql: string): Promise<QueryResult> {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º LIMIT –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!sql.toLowerCase().includes('limit')) {
        sql += ' LIMIT 100';
      }

      const result = await this.db.execute(sql);
      
      return {
        success: true,
        data: result as any[],
        rowCount: result.length
      };

    } catch (error) {
      return {
        success: false,
        error: `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: ${error.message}`
      };
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async formatResult(originalQuery: string, sql: string, data: any[]): Promise<string> {
    let result = `üîç **–ó–∞–ø—Ä–æ—Å:** ${originalQuery}\n\n`;
    
    if (data.length === 0) {
      result += "üì≠ –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
      return result;
    }

    result += `üìä **–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:** ${data.length}\n\n`;

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
    const displayData = data.slice(0, 10);
    
    if (data.length === 1 && typeof data[0] === 'object') {
      // –û–¥–Ω–∞ –∑–∞–ø–∏—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫—É
      const record = data[0];
      for (const [key, value] of Object.entries(record)) {
        if (value !== null && value !== undefined) {
          result += `**${this.formatFieldName(key)}:** ${this.formatValue(value)}\n`;
        }
      }
    } else if (this.isSimpleCount(data)) {
      // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç
      const count = Object.values(data[0])[0];
      result += `üìà **–†–µ–∑—É–ª—å—Ç–∞—Ç:** ${count}`;
    } else {
      // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫
      for (let i = 0; i < displayData.length; i++) {
        const record = displayData[i];
        result += `**${i + 1}.** `;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        const mainFields = this.getMainFields(record);
        result += mainFields.join(' ‚Ä¢ ') + '\n';
      }
      
      if (data.length > 10) {
        result += `\n... –∏ –µ—â–µ ${data.length - 10} –∑–∞–ø–∏—Å–µ–π`;
      }
    }

    result += `\n\nüîß **SQL:** \`${sql}\``;
    
    return result;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  private normalizeText(text: string): string {
    return text.toLowerCase().trim();
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
   */
  private detectQueryType(text: string): string {
    if (this.patterns.count.test(text)) return 'count';
    if (this.patterns.top.test(text)) return 'top';
    if (this.patterns.recent.test(text)) return 'recent';
    if (this.patterns.search.test(text)) return 'search';
    if (this.patterns.stats.test(text)) return 'stats';
    return 'select';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  private extractTables(text: string): string[] {
    const tables = [];
    
    for (const [russian, english] of Object.entries(this.translations)) {
      if (text.includes(russian)) {
        if (!tables.includes(english)) {
          tables.push(english);
        }
      }
    }
    
    return tables;
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç SQL –∑–∞–ø—Ä–æ—Å
   */
  private buildSQL(queryType: string, tables: string[], text: string): string {
    const mainTable = tables[0];
    
    switch (queryType) {
      case 'count':
        return `SELECT COUNT(*) as count FROM ${mainTable}`;
        
      case 'top':
        const topMatch = text.match(/(\d+)/);
        const limit = topMatch ? topMatch[1] : '10';
        
        if (mainTable === 'users') {
          return `SELECT first_name, last_name, username, current_rating FROM ${mainTable} ORDER BY current_rating DESC LIMIT ${limit}`;
        }
        return `SELECT * FROM ${mainTable} ORDER BY created_at DESC LIMIT ${limit}`;
        
      case 'recent':
        return `SELECT * FROM ${mainTable} ORDER BY created_at DESC LIMIT 10`;
        
      case 'search':
        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ - –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–ª—É—á—à–∏—Ç—å
        return `SELECT * FROM ${mainTable} LIMIT 10`;
        
      case 'stats':
        if (mainTable === 'users') {
          return `SELECT 
            COUNT(*) as total_users,
            AVG(current_rating) as avg_rating,
            COUNT(CASE WHEN is_account_verified THEN 1 END) as verified_users
            FROM ${mainTable}`;
        }
        return `SELECT COUNT(*) as total FROM ${mainTable}`;
        
      default:
        return `SELECT * FROM ${mainTable} LIMIT 10`;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å SQL –∑–∞–ø—Ä–æ—Å–∞
   */
  private isSafeQuery(sql: string): boolean {
    const lowerSQL = sql.toLowerCase();
    
    // –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ SELECT –∑–∞–ø—Ä–æ—Å—ã
    if (!lowerSQL.startsWith('select')) {
      return false;
    }
    
    // –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const forbidden = ['drop', 'delete', 'update', 'insert', 'alter', 'create', 'truncate'];
    
    for (const word of forbidden) {
      if (lowerSQL.includes(word)) {
        return false;
      }
    }
    
    return true;
  }

  /**
   * –û–±—ä—è—Å–Ω—è–µ—Ç —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
   */
  private explainQuery(queryType: string, table: string): string {
    const tableNames = {
      'users': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      'venues': '–ø–ª–æ—â–∞–¥–æ–∫', 
      'courts': '–∫–æ—Ä—Ç–æ–≤',
      'bookings': '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π',
      'game_sessions': '–∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π',
      'tournaments': '—Ç—É—Ä–Ω–∏—Ä–æ–≤',
      'payments': '–ø–ª–∞—Ç–µ–∂–µ–π'
    };
    
    const tableName = tableNames[table] || table;
    
    switch (queryType) {
      case 'count': return `–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ${tableName}`;
      case 'top': return `–¢–æ–ø ${tableName} –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É`;
      case 'recent': return `–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${tableName}`;
      case 'stats': return `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ ${tableName}`;
      default: return `–í—ã–±–æ—Ä–∫–∞ ${tableName}`;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
   */
  private formatFieldName(field: string): string {
    const fieldNames = {
      'first_name': '–ò–º—è',
      'last_name': '–§–∞–º–∏–ª–∏—è',
      'username': '–õ–æ–≥–∏–Ω',
      'email': 'Email',
      'current_rating': '–†–µ–π—Ç–∏–Ω–≥',
      'total_price': '–¶–µ–Ω–∞',
      'status': '–°—Ç–∞—Ç—É—Å',
      'created_at': '–°–æ–∑–¥–∞–Ω–æ',
      'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
      'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      'total_users': '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      'avg_rating': '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥',
      'verified_users': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö'
    };
    
    return fieldNames[field] || field;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
   */
  private formatValue(value: any): string {
    if (value === null || value === undefined) return '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    if (typeof value === 'number') return value.toLocaleString('ru-RU');
    if (value instanceof Date) return value.toLocaleDateString('ru-RU');
    return String(value);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ—Å—Ç—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º
   */
  private isSimpleCount(data: any[]): boolean {
    return data.length === 1 && Object.keys(data[0]).length === 1;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private getMainFields(record: any): string[] {
    const fields = [];
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const priority = ['name', 'first_name', 'last_name', 'username', 'email', 'current_rating', 'status', 'total_price'];
    
    for (const field of priority) {
      if (record[field] !== null && record[field] !== undefined) {
        fields.push(`${this.formatFieldName(field)}: ${this.formatValue(record[field])}`);
        if (fields.length >= 3) break;
      }
    }
    
    return fields;
  }
}
