/**
 * üé§ Voice AI Service –¥–ª—è –ø–∞–¥–ª-—Ü–µ–Ω—Ç—Ä–∞
 * –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ—Ä—Ç–æ–≤
 */

// –¢–∏–ø—ã –¥–ª—è Voice AI —Ñ—É–Ω–∫—Ü–∏–π
export interface VoiceToTextResult {
  text: string;
  confidence: number;
  language: string;
  duration: number;
}

export interface TextToVoiceResult {
  audioUrl: string;
  duration: number;
  format: "mp3" | "wav";
  size: number;
}

export interface VoiceBookingRequest {
  command: "book_court" | "cancel_booking" | "check_availability";
  courtType?: "indoor" | "outdoor";
  date?: string;
  time?: string;
  duration?: number;
  playerCount?: number;
  preferences?: string[];
}

export interface VoiceBookingResponse {
  success: boolean;
  bookingId?: string;
  message: string;
  availableSlots?: Array<{
    time: string;
    court: string;
    price: number;
  }>;
  nextSteps?: string[];
}

/**
 * üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç
 */
export async function voiceToText(
  audioBuffer: ArrayBuffer,
  options?: {
    language?: string;
    enableNoiseReduction?: boolean;
  }
): Promise<VoiceToTextResult> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!audioBuffer || audioBuffer.byteLength === 0) {
    throw new Error("Empty audio buffer provided");
  }

  // Mock —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞
  const mockTexts = [
    "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π –∫–æ—Ä—Ç –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 –Ω–∞ –¥–≤–∞ —á–∞—Å–∞",
    "–û—Ç–º–µ–Ω–∏ –º–æ—é –±—Ä–æ–Ω—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
    "–ü–æ–∫–∞–∂–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º",
    "Book a court for tomorrow at 2 PM",
    "‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏ï‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 14:00",
  ];

  const randomText = mockTexts[Math.floor(Math.random() * mockTexts.length)];
  const detectedLanguage = options?.language || detectLanguage(randomText);

  // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  await new Promise((resolve) => setTimeout(resolve, 100));

  return {
    text: randomText,
    confidence: 0.85 + Math.random() * 0.1, // 0.85-0.95
    language: detectedLanguage,
    duration: audioBuffer.byteLength / 1024, // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  };
}

/**
 * üîä –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≥–æ–ª–æ—Å
 */
export async function textToVoice(
  text: string,
  options?: {
    voice?: string;
    speed?: number;
    emotion?: "neutral" | "excited" | "calm";
  }
): Promise<TextToVoiceResult> {
  if (!text || text.trim().length === 0) {
    throw new Error("Empty text provided");
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  await new Promise((resolve) => setTimeout(resolve, 150));

  const mockAudioUrl = `https://voice-api.paddle-center.com/audio/${Date.now()}.mp3`;

  return {
    audioUrl: mockAudioUrl,
    duration: Math.ceil(text.length / 10), // –ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    format: "mp3",
    size: text.length * 50 + (options?.speed ? options.speed * 10 : 0), // –∏—Å–ø–æ–ª—å–∑—É–µ–º options
  };
}

/**
 * üß† –ü–∞—Ä—Å–∏—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
 */
export async function parseVoiceCommand(
  text: string
): Promise<VoiceBookingRequest | null> {
  if (!text || text.trim().length === 0) {
    return null;
  }

  const normalizedText = text.toLowerCase().trim();

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const bookingPatterns = [
    /–∑–∞–±—Ä–æ–Ω–∏|–∑–∞–±—Ä–æ–Ω–∏—Ä—É|–∫–Ω–∏–≥—É|book|‡∏à‡∏≠‡∏á/i,
    /–∫–æ—Ä—Ç|court|‡∏Ñ‡∏≠‡∏£‡πå‡∏ï/i,
  ];

  const cancelPatterns = [/–æ—Ç–º–µ–Ω–∏|–æ—Ç–º–µ–Ω–∏—Ç—å|cancel|‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å/i, /–±—Ä–æ–Ω—å|booking/i];

  const checkPatterns = [
    /–ø–æ–∫–∞–∂–∏|–ø–æ–∫–∞–∑–∞—Ç—å|—Å–≤–æ–±–æ–¥–Ω|–¥–æ—Å—Ç—É–ø–Ω|check|available|‡∏î‡∏π/i,
    /–∫–æ—Ä—Ç|court|‡∏Ñ‡∏≠‡∏£‡πå‡∏ï/i,
  ];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  if (bookingPatterns.every((pattern) => pattern.test(normalizedText))) {
    return {
      command: "book_court",
      courtType: extractCourtType(normalizedText),
      date: extractDate(normalizedText),
      time: extractTime(normalizedText),
      duration: extractDuration(normalizedText),
      playerCount: extractPlayerCount(normalizedText),
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
  if (cancelPatterns.every((pattern) => pattern.test(normalizedText))) {
    return {
      command: "cancel_booking",
      date: extractDate(normalizedText),
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  if (checkPatterns.some((pattern) => pattern.test(normalizedText))) {
    return {
      command: "check_availability",
      date: extractDate(normalizedText),
      courtType: extractCourtType(normalizedText),
    };
  }

  // –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
  return null;
}

/**
 * üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
 * DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VoiceBookingService –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */
export async function processVoiceBooking(
  request: VoiceBookingRequest,
  userId: string
): Promise<VoiceBookingResponse> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!request.command || !userId) {
    return {
      success: false,
      message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞",
    };
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  await new Promise((resolve) => setTimeout(resolve, 200));

  switch (request.command) {
    case "book_court":
      if (!request.date || !request.time) {
        return {
          success: false,
          message: "–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
        };
      }

      return {
        success: true,
        bookingId: `mock-booking-${Date.now()}`,
        message: `[MOCK] –ö–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${request.date} –≤ ${request.time}`,
        nextSteps: [
          "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã",
          "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
          "–ú–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞ 2 —á–∞—Å–∞ –¥–æ –∏–≥—Ä—ã",
        ],
      };

    case "check_availability":
      return {
        success: true,
        message: "[MOCK] –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:",
        availableSlots: [
          { time: "10:00", court: "–ö–æ—Ä—Ç 1 (–∫—Ä—ã—Ç—ã–π)", price: 2000 },
          { time: "14:00", court: "–ö–æ—Ä—Ç 2 (–æ—Ç–∫—Ä—ã—Ç—ã–π)", price: 1500 },
          { time: "16:00", court: "–ö–æ—Ä—Ç 1 (–∫—Ä—ã—Ç—ã–π)", price: 2000 },
          { time: "18:00", court: "–ö–æ—Ä—Ç 3 (–æ—Ç–∫—Ä—ã—Ç—ã–π)", price: 1800 },
        ],
      };

    case "cancel_booking":
      return {
        success: true,
        message:
          "[MOCK] –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
      };

    default:
      return {
        success: false,
        message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
      };
  }
}

// üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function detectLanguage(text: string): string {
  const russianPattern = /[–∞-—è—ë]/i;
  const thaiPattern = /[‡∏Å-‡πô]/;

  if (russianPattern.test(text)) return "ru-RU";
  if (thaiPattern.test(text)) return "th-TH";
  return "en-US";
}

function extractCourtType(text: string): "indoor" | "outdoor" | undefined {
  if (/–≤–Ω—É—Ç—Ä–µ–Ω–Ω|–∫—Ä—ã—Ç|indoor|covered/i.test(text)) return "indoor";
  if (/–æ—Ç–∫—Ä—ã—Ç|—É–ª–∏—á|outdoor|outside/i.test(text)) return "outdoor";
  return undefined;
}

function extractDate(text: string): string | undefined {
  if (/–∑–∞–≤—Ç—Ä–∞|tomorrow|‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ/i.test(text)) {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    return tomorrow.toISOString().split("T")[0];
  }
  if (/—Å–µ–≥–æ–¥–Ω—è|today|‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ/i.test(text)) {
    return new Date().toISOString().split("T")[0];
  }

  // –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "26 –¥–µ–∫–∞–±—Ä—è")
  const dateMatch = text.match(
    /(\d{1,2})\s*(–¥–µ–∫–∞–±—Ä—è|—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è)/i
  );
  if (dateMatch) {
    const day = dateMatch[1];
    const year = new Date().getFullYear();
    // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
    return `${year}-12-${day.padStart(2, "0")}`; // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –¥–µ–∫–∞–±—Ä—å
  }

  return undefined;
}

function extractTime(text: string): string | undefined {
  // –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "14:00", "2 PM", "14 —á–∞—Å–æ–≤"
  const timePatterns = [
    /(\d{1,2}):(\d{2})/,
    /(\d{1,2})\s*(—á–∞—Å|pm|am)/i,
    /(\d{1,2})\s*(—É—Ç—Ä–∞|–¥–Ω—è|–≤–µ—á–µ—Ä–∞)/i,
  ];

  for (const pattern of timePatterns) {
    const match = text.match(pattern);
    if (match) {
      let hour = parseInt(match[1]);
      if (match[2] && /pm|–¥–Ω—è|–≤–µ—á–µ—Ä–∞/i.test(match[2]) && hour < 12) {
        hour += 12;
      }
      return `${hour.toString().padStart(2, "0")}:00`;
    }
  }

  return undefined;
}

function extractDuration(text: string): number | undefined {
  const durationMatch = text.match(/(\d+)\s*(—á–∞—Å|hour)/i);
  if (durationMatch) {
    return parseInt(durationMatch[1]);
  }

  if (/–ø–æ–ª—Ç–æ—Ä–∞|1.5|1,5/i.test(text)) return 1.5;
  if (/–¥–≤–∞|2|–¥–≤—É—Ö/i.test(text)) return 2;

  return undefined;
}

function extractPlayerCount(text: string): number | undefined {
  const playerMatch = text.match(/(\d+)\s*(–∏–≥—Ä–æ–∫|player|‡∏Ñ‡∏ô)/i);
  if (playerMatch) {
    return parseInt(playerMatch[1]);
  }
  return undefined;
}
