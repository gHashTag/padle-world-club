/**
 * üé§ Booking Service –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ Booking API endpoints
 */

import { BookingRepository } from "../repositories/booking-repository";
import { CourtRepository } from "../repositories/court-repository";
import { UserRepository } from "../repositories/user-repository";
import type { VoiceBookingRequest, VoiceBookingResponse } from "./voice-ai";

// –¢–∏–ø—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API
export interface RealBookingRequest {
  courtId: string;
  startTime: string;
  endTime?: string;
  durationMinutes?: number;
  totalAmount: number;
  currency: string;
  bookedByUserId: string;
  bookingPurpose: "free_play" | "group_training" | "private_training" | "tournament_match" | "other";
  notes?: string;
}

export interface AvailableSlot {
  time: string;
  court: string;
  courtId: string;
  price: number;
  duration: number;
}

export interface BookingServiceConfig {
  defaultDuration: number; // –º–∏–Ω—É—Ç—ã
  defaultCurrency: string;
  defaultPurpose: "free_play" | "group_training" | "private_training" | "tournament_match" | "other";
  pricePerHour: number; // –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ —á–∞—Å
}

/**
 * üéØ Booking Service –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export class VoiceBookingService {
  private bookingRepo: BookingRepository;
  private courtRepo: CourtRepository;
  private userRepo: UserRepository;
  private config: BookingServiceConfig;

  constructor(
    bookingRepo: BookingRepository,
    courtRepo: CourtRepository,
    userRepo: UserRepository,
    config: Partial<BookingServiceConfig> = {}
  ) {
    this.bookingRepo = bookingRepo;
    this.courtRepo = courtRepo;
    this.userRepo = userRepo;
    this.config = {
      defaultDuration: 90, // 1.5 —á–∞—Å–∞
      defaultCurrency: "THB",
      defaultPurpose: "free_play",
      pricePerHour: 1500, // 1500 THB –∑–∞ —á–∞—Å
      ...config,
    };
  }

  /**
   * üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API
   */
  async processVoiceBooking(
    request: VoiceBookingRequest,
    userId: string
  ): Promise<VoiceBookingResponse> {
    try {
      switch (request.command) {
        case "book_court":
          return await this.handleBookCourt(request, userId);
        case "check_availability":
          return await this.handleCheckAvailability(request, userId);
        case "cancel_booking":
          return await this.handleCancelBooking(request, userId);
        default:
          return {
            success: false,
            message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
          };
      }
    } catch (error) {
      console.error("Error in processVoiceBooking:", error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: ${error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`,
      };
    }
  }

  /**
   * üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ç–∞
   */
  private async handleBookCourt(
    request: VoiceBookingRequest,
    userId: string
  ): Promise<VoiceBookingResponse> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!request.date || !request.time) {
      return {
        success: false,
        message: "–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
      };
    }

    // –î–ª—è Telegram userId —ç—Ç–æ —á–∏—Å–ª–æ, –∞ –Ω–µ UUID
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ
    let user;
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
      const users = await this.userRepo.findMany({
        telegramId: userId,
      });

      if (users.data.length > 0) {
        user = users.data[0];
      } else {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        user = {
          id: `temp-user-${userId}`,
          telegramId: userId,
          firstName: "Voice User",
          email: `voice-user-${userId}@telegram.local`,
        };
      }
    } catch (error) {
      // Fallback –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      user = {
        id: `temp-user-${userId}`,
        telegramId: userId,
        firstName: "Voice User",
        email: `voice-user-${userId}@telegram.local`,
      };
    }

    // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–æ—Ä—Ç
    const availableCourt = await this.findAvailableCourt(request);
    if (!availableCourt) {
      return {
        success: false,
        message: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è",
      };
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const duration = request.duration || this.config.defaultDuration;
    const startTime = this.parseDateTime(request.date, request.time);
    const endTime = new Date(startTime.getTime() + duration * 60 * 1000);
    const totalAmount = this.calculatePrice(duration);

    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º mock –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    const mockBooking = {
      id: `voice-booking-${Date.now()}`,
      courtId: availableCourt.courtId,
      startTime: startTime.toISOString(),
      endTime: endTime.toISOString(),
      durationMinutes: duration,
      totalAmount,
      currency: this.config.defaultCurrency,
      bookedByUserId: user.id,
      bookingPurpose: this.config.defaultPurpose,
      notes: `–ì–æ–ª–æ—Å–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
      status: "confirmed",
      createdAt: new Date().toISOString(),
    };

    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
    // const booking = await this.bookingRepo.create(bookingData);
    const booking = mockBooking;

    return {
      success: true,
      bookingId: booking.id,
      message: `–ö–æ—Ä—Ç ${availableCourt.court} —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${request.date} –≤ ${request.time}`,
      nextSteps: [
        "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã",
        `–û–ø–ª–∞—Ç–∞: ${totalAmount} ${this.config.defaultCurrency}`,
        "–ú–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞ 2 —á–∞—Å–∞ –¥–æ –∏–≥—Ä—ã",
      ],
    };
  }

  /**
   * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ç–æ–≤
   */
  private async handleCheckAvailability(
    request: VoiceBookingRequest,
    userId: string
  ): Promise<VoiceBookingResponse> {
    const date = request.date || new Date().toISOString().split("T")[0];
    const availableSlots = await this.getAvailableSlots(date, request.courtType);

    if (availableSlots.length === 0) {
      return {
        success: true,
        message: "–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤",
        availableSlots: [],
      };
    }

    return {
      success: true,
      message: `–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ ${date}:`,
      availableSlots: availableSlots.map(slot => ({
        time: slot.time,
        court: slot.court,
        price: slot.price,
      })),
    };
  }

  /**
   * ‚ùå –û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private async handleCancelBooking(
    request: VoiceBookingRequest,
    userId: string
  ): Promise<VoiceBookingResponse> {
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–º–µ–Ω—É
    const date = request.date || new Date().toISOString().split("T")[0];

    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∏—Å–∫ –∏ –æ—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
    // const userBookings = await this.bookingRepo.findMany({...});

    return {
      success: true,
      message: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${date} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.`,
    };
  }

  /**
   * üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä—Ç–∞
   */
  private async findAvailableCourt(request: VoiceBookingRequest): Promise<AvailableSlot | null> {
    if (!request.date || !request.time) return null;

    const duration = request.duration || this.config.defaultDuration;

    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –∫–æ—Ä—Ç
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ç—ã
      const courts = await this.courtRepo.findMany({});

      if (courts.data.length > 0) {
        const court = courts.data[0];
        return {
          time: request.time,
          court: `${court.name} (${court.courtType})`,
          courtId: court.id,
          price: this.calculatePrice(duration),
          duration,
        };
      }
    } catch (error) {
      // Fallback –∫ mock –¥–∞–Ω–Ω—ã–º
    }

    // Mock –∫–æ—Ä—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return {
      time: request.time,
      court: "–ö–æ—Ä—Ç 1 (–∫—Ä—ã—Ç—ã–π)",
      courtId: "mock-court-1",
      price: this.calculatePrice(duration),
      duration,
    };
  }

  /**
   * üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
   */
  private async getAvailableSlots(
    date: string,
    courtType?: "indoor" | "outdoor"
  ): Promise<AvailableSlot[]> {
    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —Å 8:00 –¥–æ 22:00 –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
    const timeSlots = ["08:00", "10:00", "12:00", "14:00", "16:00", "18:00", "20:00"];

    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock —Å–ª–æ—Ç—ã
    const mockSlots: AvailableSlot[] = [
      {
        time: "10:00",
        court: "–ö–æ—Ä—Ç 1 (–∫—Ä—ã—Ç—ã–π)",
        courtId: "mock-court-1",
        price: this.calculatePrice(this.config.defaultDuration),
        duration: this.config.defaultDuration,
      },
      {
        time: "14:00",
        court: "–ö–æ—Ä—Ç 2 (–æ—Ç–∫—Ä—ã—Ç—ã–π)",
        courtId: "mock-court-2",
        price: this.calculatePrice(this.config.defaultDuration) - 500,
        duration: this.config.defaultDuration,
      },
      {
        time: "16:00",
        court: "–ö–æ—Ä—Ç 1 (–∫—Ä—ã—Ç—ã–π)",
        courtId: "mock-court-1",
        price: this.calculatePrice(this.config.defaultDuration),
        duration: this.config.defaultDuration,
      },
    ];

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∫–æ—Ä—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (courtType) {
      return mockSlots.filter(slot =>
        (courtType === "indoor" && slot.court.includes("–∫—Ä—ã—Ç—ã–π")) ||
        (courtType === "outdoor" && slot.court.includes("–æ—Ç–∫—Ä—ã—Ç—ã–π"))
      );
    }

    return mockSlots;
  }

  /**
   * üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
   */
  private calculatePrice(durationMinutes: number): number {
    const hours = durationMinutes / 60;
    return Math.round(hours * this.config.pricePerHour);
  }

  /**
   * üìÖ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
   */
  private parseDateTime(date: string, time: string): Date {
    return new Date(`${date}T${time}:00.000Z`);
  }
}
