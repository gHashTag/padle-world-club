import { ReelContent, ParsingRunLog } from "../schemas";
import { StorageAdapter } from "../types";
import { logger } from "../logger";

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–ø—Ü–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
 */
export interface ScraperOptions {
  maxReels?: number;
  minViews?: number;
  maxDaysOld?: number;
}

/**
 * –°–µ—Ä–≤–∏—Å-–∏–º–∏—Ç–∞—Ç–æ—Ä —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ Instagram Reels
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ API
 */
export class MockScraperService {
  private storage: StorageAdapter;

  constructor(storage: StorageAdapter) {
    this.storage = storage;
  }

  /**
   * –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Å–∫—Ä–∞–ø–∏–Ω–≥ Reels –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
   * @param projectId ID –ø—Ä–æ–µ–∫—Ç–∞
   * @param competitorId ID –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
   * @param options –û–ø—Ü–∏–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
   * @returns –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö Reels
   */
  async scrapeCompetitorReels(
    projectId: number,
    competitorId: number,
    options: ScraperOptions = {}
  ): Promise<number> {
    logger.info(`[MockScraperService] Scraping competitor reels for competitor ID: ${competitorId}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–µ
      const competitors = await this.storage.getCompetitorAccounts(projectId);
      const competitor = competitors.find(c => c.id === competitorId);
      
      if (!competitor) {
        throw new Error(`Competitor with ID ${competitorId} not found`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
      const runId = this.generateUUID();
      const parsingLog: Partial<ParsingRunLog> = {
        run_id: runId,
        project_id: projectId,
        source_type: "competitor",
        source_id: competitorId.toString(),
        status: "running",
        started_at: new Date().toISOString(),
      };
      
      await this.storage.logParsingRun(parsingLog);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Reels
      const mockReels = this.generateMockReels(
        projectId,
        "competitor",
        competitorId.toString(),
        competitor.username,
        options.maxReels || 10
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º Reels –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const savedCount = await this.storage.saveReels(
        mockReels,
        projectId,
        "competitor",
        competitorId
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
      const updatedLog: Partial<ParsingRunLog> = {
        run_id: runId,
        status: "completed",
        ended_at: new Date().toISOString(),
        reels_found_count: mockReels.length,
        reels_added_count: savedCount,
      };
      
      await this.storage.logParsingRun(updatedLog);
      
      logger.info(`[MockScraperService] Saved ${savedCount} reels for competitor ${competitor.username}`);
      
      return savedCount;
    } catch (error) {
      logger.error(`[MockScraperService] Error scraping competitor reels:`, error);
      throw error;
    }
  }

  /**
   * –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Å–∫—Ä–∞–ø–∏–Ω–≥ Reels –ø–æ —Ö–µ—à—Ç–µ–≥—É
   * @param projectId ID –ø—Ä–æ–µ–∫—Ç–∞
   * @param hashtagId ID —Ö–µ—à—Ç–µ–≥–∞
   * @param options –û–ø—Ü–∏–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
   * @returns –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö Reels
   */
  async scrapeHashtagReels(
    projectId: number,
    hashtagId: number,
    options: ScraperOptions = {}
  ): Promise<number> {
    logger.info(`[MockScraperService] Scraping hashtag reels for hashtag ID: ${hashtagId}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ—à—Ç–µ–≥–µ
      const hashtags = await this.storage.getHashtagsByProjectId(projectId);
      const hashtag = hashtags?.find(h => h.id === hashtagId);
      
      if (!hashtag) {
        throw new Error(`Hashtag with ID ${hashtagId} not found`);
      }
      
      // –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
      const runId = this.generateUUID();
      const parsingLog: Partial<ParsingRunLog> = {
        run_id: runId,
        project_id: projectId,
        source_type: "hashtag",
        source_id: hashtagId.toString(),
        status: "running",
        started_at: new Date().toISOString(),
      };
      
      await this.storage.logParsingRun(parsingLog);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Reels
      const mockReels = this.generateMockReels(
        projectId,
        "hashtag",
        hashtagId.toString(),
        hashtag.hashtag,
        options.maxReels || 10
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º Reels –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const savedCount = await this.storage.saveReels(
        mockReels,
        projectId,
        "hashtag",
        hashtagId
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
      const updatedLog: Partial<ParsingRunLog> = {
        run_id: runId,
        status: "completed",
        ended_at: new Date().toISOString(),
        reels_found_count: mockReels.length,
        reels_added_count: savedCount,
      };
      
      await this.storage.logParsingRun(updatedLog);
      
      logger.info(`[MockScraperService] Saved ${savedCount} reels for hashtag #${hashtag.hashtag}`);
      
      return savedCount;
    } catch (error) {
      logger.error(`[MockScraperService] Error scraping hashtag reels:`, error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Reels
   * @param projectId ID –ø—Ä–æ–µ–∫—Ç–∞
   * @param sourceType –¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (competitor –∏–ª–∏ hashtag)
   * @param sourceId ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞
   * @param sourceName –ò–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Ö–µ—à—Ç–µ–≥)
   * @param count –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Reels –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @returns –ú–∞—Å—Å–∏–≤ –º–æ–∫–æ–≤—ã—Ö Reels
   */
  private generateMockReels(
    projectId: number,
    sourceType: "competitor" | "hashtag",
    sourceId: string,
    sourceName: string,
    count: number
  ): Partial<ReelContent>[] {
    const reels: Partial<ReelContent>[] = [];
    
    for (let i = 0; i < count; i++) {
      const publishedDate = new Date();
      publishedDate.setDate(publishedDate.getDate() - Math.floor(Math.random() * 30)); // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 30 –¥–Ω–µ–π
      
      const reel: Partial<ReelContent> = {
        project_id: projectId,
        source_type: sourceType,
        source_id: sourceId,
        instagram_id: `reel_${this.generateUUID().substring(0, 8)}`,
        url: `https://www.instagram.com/reel/mock_${i}_${sourceName.replace(/[^a-zA-Z0-9]/g, "")}`,
        caption: this.generateMockCaption(sourceName, i),
        author_username: sourceType === "competitor" ? sourceName : `user_${Math.floor(Math.random() * 1000)}`,
        author_id: `author_${Math.floor(Math.random() * 10000)}`,
        views: Math.floor(Math.random() * 10000) + 100,
        likes: Math.floor(Math.random() * 1000) + 10,
        comments_count: Math.floor(Math.random() * 100),
        duration: Math.floor(Math.random() * 60) + 10,
        thumbnail_url: `https://example.com/thumbnails/mock_${i}_${sourceName.replace(/[^a-zA-Z0-9]/g, "")}.jpg`,
        music_title: this.generateMockMusicTitle(),
        published_at: publishedDate.toISOString(),
        fetched_at: new Date().toISOString(),
        is_processed: false,
      };
      
      reels.push(reel);
    }
    
    return reels;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è Reel
   * @param sourceName –ò–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
   * @param index –ò–Ω–¥–µ–∫—Å Reel
   * @returns –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è
   */
  private generateMockCaption(sourceName: string, index: number): string {
    const captions = [
      `–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç ${sourceName}! #reels #instagram #trending`,
      `–°–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à –Ω–æ–≤—ã–π —Ä–æ–ª–∏–∫! üî• #viral #content #${sourceName}`,
      `–î–µ–ª–∏–º—Å—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏ —É—Å–ø–µ—Ö–∞! üí™ #motivation #success #tips`,
      `–ó–∞–∫—É–ª–∏—Å—å–µ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç—ã üëÄ #behindthescenes #work #process`,
      `–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! ‚ù§Ô∏è #followers #special #exclusive`,
    ];
    
    return captions[index % captions.length];
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ –¥–ª—è Reel
   * @returns –ù–∞–∑–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏
   */
  private generateMockMusicTitle(): string {
    const artists = ["Artist One", "Popular Singer", "Music Band", "DJ Cool", "Famous Rapper"];
    const titles = ["Summer Hit", "Viral Sound", "Trending Track", "Popular Song", "New Release"];
    
    const artist = artists[Math.floor(Math.random() * artists.length)];
    const title = titles[Math.floor(Math.random() * titles.length)];
    
    return `${artist} - ${title}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç UUID
   * @returns UUID —Å—Ç—Ä–æ–∫–∞
   */
  private generateUUID(): string {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
      /[xy]/g,
      function (c) {
        const r = (Math.random() * 16) | 0;
        const v = c === "x" ? r : (r & 0x3) | 0x8;
        return v.toString(16);
      }
    );
  }
}

export default MockScraperService;
