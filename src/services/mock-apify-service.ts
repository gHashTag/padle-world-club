/**
 * Instagram Scraper Bot - Mock Apify Service
 *
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å Apify API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 * –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API.
 */

import type { ScrapedReel, ScraperOptions } from "@/types"; // –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã
// import { InstagramScraperService } from "../types" // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ

/**
 * –ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ InstagramScraperService –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö.
 * –≠—Ç–æ—Ç –º–æ–∫ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ,
 * —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ API Apify.
 */
// export class MockApifyService implements InstagramScraperService { // implements –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
export class MockInstagramScraperService /* implements InstagramScraperService */ {
  // implements –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
  private defaultDelay: number = 500; // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º—Å)
  private mockReels: Map<string, any[]> = new Map(); // –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  private mockHashtags: Map<string, any[]> = new Map(); // –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ö—ç—à—Ç–µ–≥–æ–≤
  // private reelsData: any[] = []; // –£–¥–∞–ª—è–µ–º —ç—Ç–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
  public errorToThrow: Error | null = null;

  constructor() {
    console.log("üì± Mock Apify Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    this.initializeMockData();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
   */
  private initializeMockData(): void {
    // –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    this.mockReels.set(
      "beauty_clinic",
      this.generateMockReels(15, "beauty_clinic")
    );
    this.mockReels.set(
      "luxury_beauty",
      this.generateMockReels(12, "luxury_beauty")
    );
    this.mockReels.set(
      "cosmetology_pro",
      this.generateMockReels(10, "cosmetology_pro")
    );
    this.mockReels.set(
      "skin_experts",
      this.generateMockReels(8, "skin_experts")
    );
    this.mockReels.set(
      "plastic_surgery",
      this.generateMockReels(20, "plastic_surgery")
    );

    // –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ö—ç—à—Ç–µ–≥–æ–≤
    this.mockHashtags.set(
      "–∫—Ä–∞—Å–æ—Ç–∞",
      this.generateMockReels(25, "—Ä–∞–∑–ª–∏—á–Ω—ã–µ_–∞–∫–∫–∞—É–Ω—Ç—ã", "–∫—Ä–∞—Å–æ—Ç–∞")
    );
    this.mockHashtags.set(
      "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è",
      this.generateMockReels(18, "—Ä–∞–∑–ª–∏—á–Ω—ã–µ_–∞–∫–∫–∞—É–Ω—Ç—ã", "–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è")
    );
    this.mockHashtags.set(
      "—É—Ö–æ–¥–∑–∞–ª–∏—Ü–æ–º",
      this.generateMockReels(15, "—Ä–∞–∑–ª–∏—á–Ω—ã–µ_–∞–∫–∫–∞—É–Ω—Ç—ã", "—É—Ö–æ–¥–∑–∞–ª–∏—Ü–æ–º")
    );
    this.mockHashtags.set(
      "–∏–Ω—ä–µ–∫—Ü–∏–∏",
      this.generateMockReels(12, "—Ä–∞–∑–ª–∏—á–Ω—ã–µ_–∞–∫–∫–∞—É–Ω—Ç—ã", "–∏–Ω—ä–µ–∫—Ü–∏–∏")
    );
    this.mockHashtags.set(
      "—Ñ–∏–ª–ª–µ—Ä—ã",
      this.generateMockReels(10, "—Ä–∞–∑–ª–∏—á–Ω—ã–µ_–∞–∫–∫–∞—É–Ω—Ç—ã", "—Ñ–∏–ª–ª–µ—Ä—ã")
    );
    this.mockHashtags.set(
      "–ø–ª–∞—Å—Ç–∏–∫–∞",
      this.generateMockReels(22, "—Ä–∞–∑–ª–∏—á–Ω—ã–µ_–∞–∫–∫–∞—É–Ω—Ç—ã", "–ø–ª–∞—Å—Ç–∏–∫–∞")
    );
    this.mockHashtags.set(
      "—Ä–∏–Ω–æ–ø–ª–∞—Å—Ç–∏–∫–∞",
      this.generateMockReels(14, "—Ä–∞–∑–ª–∏—á–Ω—ã–µ_–∞–∫–∫–∞—É–Ω—Ç—ã", "—Ä–∏–Ω–æ–ø–ª–∞—Å—Ç–∏–∫–∞")
    );
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è Reels
   */
  private generateMockReels(
    count: number,
    ownerUsername: string,
    hashtag?: string
  ): any[] {
    const reels: any[] = [];

    for (let i = 0; i < count; i++) {
      const publishedDate = new Date();
      publishedDate.setDate(
        publishedDate.getDate() - Math.floor(Math.random() * 14)
      ); // –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π

      const viewCount = Math.floor(Math.random() * 200000) + 50000; // –û—Ç 50k –¥–æ 250k –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      const likeCount = Math.floor(viewCount * (Math.random() * 0.1 + 0.05)); // 5%-15% –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      const commentCount = Math.floor(likeCount * (Math.random() * 0.1 + 0.01)); // 1%-11% –æ—Ç –ª–∞–π–∫–æ–≤

      const reelId = `mock_${Date.now()}_${Math.floor(Math.random() * 10000)}`;

      const captionHashtags = hashtag ? `#${hashtag} ` : "";
      const randomHashtags = [
        "#–∫—Ä–∞—Å–æ—Ç–∞",
        "#–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è",
        "#—ç—Å—Ç–µ—Ç–∏–∫–∞",
        "#–ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
        "#—É—Ö–æ–¥",
      ]
        .sort(() => 0.5 - Math.random())
        .slice(0, 3)
        .join(" ");

      const reel: any = {
        instagram_id: reelId,
        url: `https://instagram.com/reel/${reelId}/`,
        caption: `–ú–æ–∫-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. ${captionHashtags}${randomHashtags}`,
        owner_username:
          ownerUsername === "—Ä–∞–∑–ª–∏—á–Ω—ã–µ_–∞–∫–∫–∞—É–Ω—Ç—ã"
            ? `user_${Math.floor(Math.random() * 1000)}`
            : ownerUsername,
        owner_id: `${Math.floor(Math.random() * 10000000)}`,
        view_count: viewCount,
        like_count: likeCount,
        comment_count: commentCount,
        duration: Math.floor(Math.random() * 45) + 15, // 15-60 —Å–µ–∫—É–Ω–¥
        thumbnail_url: `https://example.com/thumbnails/${reelId}.jpg`,
        audio_title: `–ú–æ–∫-–∞—É–¥–∏–æ ${Math.floor(Math.random() * 100)}`,
        published_at: publishedDate.toISOString(),
      };

      reels.push(reel);
    }

    return reels;
  }

  /**
   * –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
   */
  private async simulateDelay(options?: ScraperOptions): Promise<void> {
    const delay = options?.delayBetweenRequests || this.defaultDelay;
    return new Promise((resolve) => setTimeout(resolve, delay));
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–ø—Ü–∏—è–º
   */
  private filterResults(
    reels: ScrapedReel[],
    options?: ScraperOptions
  ): ScrapedReel[] {
    let filtered = [...reels];

    // –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    if (options?.minViews) {
      filtered = filtered.filter(
        (reel) => (reel.view_count || 0) >= (options.minViews || 0)
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –ø–æ—Å—Ç–æ–≤
    if (options?.maxDaysOld && options.maxDaysOld > 0) {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - options.maxDaysOld);

      filtered = filtered.filter((reel) => {
        if (!reel.published_at) return true;
        const publishDate = new Date(reel.published_at);
        return publishDate >= cutoffDate;
      });
    }

    // –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (options?.maxReels && options.maxReels > 0) {
      filtered = filtered.slice(0, options.maxReels);
    }

    return filtered;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ Reels –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
   */
  async getReelsFromAccount(
    username: string,
    options?: ScraperOptions
  ): Promise<ScrapedReel[]> {
    console.log(`üì± [Mock] –ü–æ–ª—É—á–µ–Ω–∏–µ Reels –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞: ${username}`);

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    await this.simulateDelay(options);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
    const mockData =
      this.mockReels.get(username) || this.generateMockReels(5, username);

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filteredResults = this.filterResults(mockData, options);

    console.log(
      `üì± [Mock] –ù–∞–π–¥–µ–Ω–æ ${filteredResults.length} Reels –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${username}`
    );

    return filteredResults;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ Reels –ø–æ —Ö—ç—à—Ç–µ–≥—É
   */
  async getReelsByHashtag(
    hashtag: string,
    options?: ScraperOptions
  ): Promise<ScrapedReel[]> {
    console.log(`üì± [Mock] –ü–æ–ª—É—á–µ–Ω–∏–µ Reels –ø–æ —Ö—ç—à—Ç–µ–≥—É: #${hashtag}`);

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    await this.simulateDelay(options);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
    const mockData =
      this.mockHashtags.get(hashtag) ||
      this.generateMockReels(10, "—Ä–∞–∑–ª–∏—á–Ω—ã–µ_–∞–∫–∫–∞—É–Ω—Ç—ã", hashtag);

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filteredResults = this.filterResults(mockData, options);

    console.log(
      `üì± [Mock] –ù–∞–π–¥–µ–Ω–æ ${filteredResults.length} Reels –ø–æ —Ö—ç—à—Ç–µ–≥—É #${hashtag}`
    );

    return filteredResults;
  }
}
